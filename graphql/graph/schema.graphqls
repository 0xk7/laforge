# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type varsMap {
  key: String!
  value: String!
}

type configMap {
  key: String!
  value: String!
}

type Disk {
  size: Int!
}

type User {
  id: ID!
  name: String!
  uuid: String!
  email: String!
}

type Tag {
  id: ID!
  name: String!
  description: String # Will need to update Tags
}

enum FindingSeverity {
  ZeroSeverity
  LowSeverity
  MediumSeverity
  HighSeverity
  CriticalSeverity
  NullSeverity
}

enum FindingDifficulty {
  ZeroDifficulty
  NoviceDifficulty
  AdvancedDifficulty
  ExpertDifficulty
  NullDifficulty
}

type Finding {
  name: String!
  description: String!
  severity: FindingSeverity!
  difficulty: FindingDifficulty!
  findingToUser: User!
  findingToTag: [Tag]
  findingToHost: Host!
}

type DNSRecord {
  id: ID!
  hcl_id: String!
  name: String!
  values: [String]!
  type: String!
  zone: String!
  vars: [varsMap]
  dnsRecordToTag: [Tag]
  disabled: Boolean!
}

type Script {
  id: ID!
  hcl_id: String!
  name: String!
  language: String!
  description: String!
  source: String!
  sourceType: String!
  cooldown: Int!
  timeout: Int!
  ignoreErrors: Boolean!
  args: [String]!
  disabled: Boolean!
  vars: [varsMap]
  scriptToTag: [Tag]
  absPath: String!
  scriptToUser: User!
  scriptToFinding: [Finding]!
}
type Command {
  id: ID!
  name: String!
  description: String!
  program: String!
  args: [String]!
  ignoreErrors: Boolean!
  cooldown: Int!
  timeout: Int!
  disabled: Boolean!
  vars: [varsMap]
  tags: [Tag]
  commandToUser: User!
}
type FileDownload {
  id: ID!
  hcl_id: String!
  sourceType: String!
  source: String!
  destination: String!
  templete: Boolean!
  perms: String!
  disabled: Boolean!
  md5: String!
  absPath: String!
  fileDownloadToTag: [Tag]
}
type FileDelete {
  id: ID!
  hcl_id: String!
  path: String!
}
type FileExtract {
  id: ID!
  hcl_id: String!
  source: String!
  destination: String!
  type: String!
}

type Host {
  id: ID!
  hcl_id: String!
  hostname: String!
  OS: String!
  lastOctet: Int!
  allowMacChanges: Boolean!
  exposedTCPPorts: [String]!
  exposedUDPPorts: [String]!
  overridePassword: String!
  vars: [varsMap]
  userGroups: [String]!
  dependsOn: [Host]!
  hostToUser: User!
  hostToTag: [Tag]
  hostToDisk: Disk!
}

type Network {
  id: ID!
  hcl_id: String!
  name: String!
  cidr: String!
  vdiVisible: Boolean!
  vars: [varsMap]
  networkToTag: [Tag]
}

type DNS {
  id: ID!
  hcl_id: String!
  type: String!
  rootDomain: String!
  DNSServers: [String]!
  NTPServer: [String]!
  config: [configMap]
}

type Identity {
  id: ID!
  hcl_id: String!
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  description: String!
  avatar_file: String!
  vars: [varsMap]
}

type Build {
  id: ID!
  revision: Int!
  tags: [Tag]
  buildToTeam: [Team]!
}

type Environment {
  id: ID!
  hcl_id: String!
  CompetitionID: String!
  Name: String!
  Description: String!
  Builder: String!
  TeamCount: Int!
  AdminCIDRs: [String]!
  ExposedVDIPorts: [String]!
  tags: [Tag]
  config: [configMap]
  environmentToUser: [User]!
  environmentToNetwork: [Network]!
  environmentToHost: [Host]!
  environmentToBuild: [Build]!
  environmentToCompetition: Competition!
  environmentToIdentity: [Identity]!
}

type Competition {
  id: ID!
  hcl_id: String!
  rootPassword: String!
  config: [configMap]
  competitionToDNS: DNS!
}

type Team {
  id: ID!
  teamNumber: Int!
  config: [configMap]
  revision: Int!
  teamToUser: User!
  teamToBuild: Build!
  teamToEnvironment: Environment!
  teamToTag: [Tag]
  teamToProvisionedNetwork: [ProvisionedNetwork]!
}

type ProvisionedNetwork {
  id: ID!
  name: String!
  cidr: String!
  provisionedNetworkToProvisionedHost: [ProvisionedHost]!
  provisionedNetworkToStatus: Status!
  provisionedNetworkToNetwork: Network!
  provisionedNetworkToBuild: Build!
}

enum ProvisionStatus {
  ProvStatusUndefined
  ProvStatusPlanning
  ProvStatusAwaiting
  ProvStatusInProgress
  ProvStatusFailed
  ProvStatusComplete
  ProvStatusTainted
}

type Status {
  state: ProvisionStatus!
  startedAt: String!
  endedAt: String!
  failed: Boolean!
  completed: Boolean!
  error: String!
}

type AgentStatus {
  clientId: String!
  hostname: String!
  upTime: Int!
  bootTime: Int!
  numProcs: Int!
  OS: String! 
  hostID: String!
  load1: Float
  load5: Float
  load15: Float
  totalMem: Int!
  freeMem: Int!
  usedMem: Int!
  timestamp: Int!
}

type ProvisionedHost {
  id: ID!
  subnetIP: String!
  provisionedHostToStatus: Status!
  provisionedHostToProvisionedNetwork: ProvisionedNetwork!
  provisionedHostToProvisioningStep: [ProvisioningStep]!
  provisionedHostToHost: Host!
  combinedOutput: String # Link to WebSocket
  provisionedHostToAgentStatus: AgentStatus
}

type ProvisioningStep {
  id: ID!
  provisionType: String!
  stepNumber: Int!
  provisioningStepToProvisionedHost: ProvisionedHost!
  provisioningStepToStatus: Status!
  provisioningStepToScript: Script
  provisioningStepToCommand: Command
  provisioningStepToDNSRecord: DNSRecord
  provisioningStepToFileDownload: FileDownload
  provisioningStepToFileDelete: FileDelete
  provisioningStepToFileExtract: FileExtract
}

type Query {
  environments: [Environment]!
  environment(envUUID: String!): Environment!
  provisionedHost(proHostUUID: String!): ProvisionedHost!
  provisionedNetwork(proNetUUID: String!): ProvisionedNetwork!
  provisionedStep(proStepUUID: String!): ProvisioningStep!
}

type Mutation {
  executePlan(buildUUID: String!): Build!
}
