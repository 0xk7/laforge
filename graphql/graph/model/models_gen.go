// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ConfigMap struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TagMap struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type VarsMap struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type FindingDifficulty string

const (
	FindingDifficultyZeroDifficulty     FindingDifficulty = "ZeroDifficulty"
	FindingDifficultyNoviceDifficulty   FindingDifficulty = "NoviceDifficulty"
	FindingDifficultyAdvancedDifficulty FindingDifficulty = "AdvancedDifficulty"
	FindingDifficultyExpertDifficulty   FindingDifficulty = "ExpertDifficulty"
	FindingDifficultyNullDifficulty     FindingDifficulty = "NullDifficulty"
)

var AllFindingDifficulty = []FindingDifficulty{
	FindingDifficultyZeroDifficulty,
	FindingDifficultyNoviceDifficulty,
	FindingDifficultyAdvancedDifficulty,
	FindingDifficultyExpertDifficulty,
	FindingDifficultyNullDifficulty,
}

func (e FindingDifficulty) IsValid() bool {
	switch e {
	case FindingDifficultyZeroDifficulty, FindingDifficultyNoviceDifficulty, FindingDifficultyAdvancedDifficulty, FindingDifficultyExpertDifficulty, FindingDifficultyNullDifficulty:
		return true
	}
	return false
}

func (e FindingDifficulty) String() string {
	return string(e)
}

func (e *FindingDifficulty) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FindingDifficulty(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FindingDifficulty", str)
	}
	return nil
}

func (e FindingDifficulty) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FindingSeverity string

const (
	FindingSeverityZeroSeverity     FindingSeverity = "ZeroSeverity"
	FindingSeverityLowSeverity      FindingSeverity = "LowSeverity"
	FindingSeverityMediumSeverity   FindingSeverity = "MediumSeverity"
	FindingSeverityHighSeverity     FindingSeverity = "HighSeverity"
	FindingSeverityCriticalSeverity FindingSeverity = "CriticalSeverity"
	FindingSeverityNullSeverity     FindingSeverity = "NullSeverity"
)

var AllFindingSeverity = []FindingSeverity{
	FindingSeverityZeroSeverity,
	FindingSeverityLowSeverity,
	FindingSeverityMediumSeverity,
	FindingSeverityHighSeverity,
	FindingSeverityCriticalSeverity,
	FindingSeverityNullSeverity,
}

func (e FindingSeverity) IsValid() bool {
	switch e {
	case FindingSeverityZeroSeverity, FindingSeverityLowSeverity, FindingSeverityMediumSeverity, FindingSeverityHighSeverity, FindingSeverityCriticalSeverity, FindingSeverityNullSeverity:
		return true
	}
	return false
}

func (e FindingSeverity) String() string {
	return string(e)
}

func (e *FindingSeverity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FindingSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FindingSeverity", str)
	}
	return nil
}

func (e FindingSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlanType string

const (
	PlanTypeStartBuild       PlanType = "start_build"
	PlanTypeStartTeam        PlanType = "start_team"
	PlanTypeProvisionNetwork PlanType = "provision_network"
	PlanTypeProvisionHost    PlanType = "provision_host"
	PlanTypeExecuteStep      PlanType = "execute_step"
	PlanTypeUndefined        PlanType = "undefined"
)

var AllPlanType = []PlanType{
	PlanTypeStartBuild,
	PlanTypeStartTeam,
	PlanTypeProvisionNetwork,
	PlanTypeProvisionHost,
	PlanTypeExecuteStep,
	PlanTypeUndefined,
}

func (e PlanType) IsValid() bool {
	switch e {
	case PlanTypeStartBuild, PlanTypeStartTeam, PlanTypeProvisionNetwork, PlanTypeProvisionHost, PlanTypeExecuteStep, PlanTypeUndefined:
		return true
	}
	return false
}

func (e PlanType) String() string {
	return string(e)
}

func (e *PlanType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlanType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlanType", str)
	}
	return nil
}

func (e PlanType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderType string

const (
	ProviderTypeLocal     ProviderType = "LOCAL"
	ProviderTypeGithub    ProviderType = "GITHUB"
	ProviderTypeOpenid    ProviderType = "OPENID"
	ProviderTypeUndefined ProviderType = "UNDEFINED"
)

var AllProviderType = []ProviderType{
	ProviderTypeLocal,
	ProviderTypeGithub,
	ProviderTypeOpenid,
	ProviderTypeUndefined,
}

func (e ProviderType) IsValid() bool {
	switch e {
	case ProviderTypeLocal, ProviderTypeGithub, ProviderTypeOpenid, ProviderTypeUndefined:
		return true
	}
	return false
}

func (e ProviderType) String() string {
	return string(e)
}

func (e *ProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderType", str)
	}
	return nil
}

func (e ProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvisionStatus string

const (
	ProvisionStatusPlanning   ProvisionStatus = "PLANNING"
	ProvisionStatusAwaiting   ProvisionStatus = "AWAITING"
	ProvisionStatusInprogress ProvisionStatus = "INPROGRESS"
	ProvisionStatusFailed     ProvisionStatus = "FAILED"
	ProvisionStatusComplete   ProvisionStatus = "COMPLETE"
	ProvisionStatusTainted    ProvisionStatus = "TAINTED"
	ProvisionStatusUndefined  ProvisionStatus = "UNDEFINED"
)

var AllProvisionStatus = []ProvisionStatus{
	ProvisionStatusPlanning,
	ProvisionStatusAwaiting,
	ProvisionStatusInprogress,
	ProvisionStatusFailed,
	ProvisionStatusComplete,
	ProvisionStatusTainted,
	ProvisionStatusUndefined,
}

func (e ProvisionStatus) IsValid() bool {
	switch e {
	case ProvisionStatusPlanning, ProvisionStatusAwaiting, ProvisionStatusInprogress, ProvisionStatusFailed, ProvisionStatusComplete, ProvisionStatusTainted, ProvisionStatusUndefined:
		return true
	}
	return false
}

func (e ProvisionStatus) String() string {
	return string(e)
}

func (e *ProvisionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvisionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProvisionStatus", str)
	}
	return nil
}

func (e ProvisionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvisionStatusFor string

const (
	ProvisionStatusForBuild              ProvisionStatusFor = "Build"
	ProvisionStatusForTeam               ProvisionStatusFor = "Team"
	ProvisionStatusForProvisionedNetwork ProvisionStatusFor = "ProvisionedNetwork"
	ProvisionStatusForProvisionedHost    ProvisionStatusFor = "ProvisionedHost"
	ProvisionStatusForProvisioningStep   ProvisionStatusFor = "ProvisioningStep"
	ProvisionStatusForUndefined          ProvisionStatusFor = "Undefined"
)

var AllProvisionStatusFor = []ProvisionStatusFor{
	ProvisionStatusForBuild,
	ProvisionStatusForTeam,
	ProvisionStatusForProvisionedNetwork,
	ProvisionStatusForProvisionedHost,
	ProvisionStatusForProvisioningStep,
	ProvisionStatusForUndefined,
}

func (e ProvisionStatusFor) IsValid() bool {
	switch e {
	case ProvisionStatusForBuild, ProvisionStatusForTeam, ProvisionStatusForProvisionedNetwork, ProvisionStatusForProvisionedHost, ProvisionStatusForProvisioningStep, ProvisionStatusForUndefined:
		return true
	}
	return false
}

func (e ProvisionStatusFor) String() string {
	return string(e)
}

func (e *ProvisionStatusFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvisionStatusFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProvisionStatusFor", str)
	}
	return nil
}

func (e ProvisionStatusFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProvisioningStepType string

const (
	ProvisioningStepTypeScript       ProvisioningStepType = "Script"
	ProvisioningStepTypeCommand      ProvisioningStepType = "Command"
	ProvisioningStepTypeDNSRecord    ProvisioningStepType = "DNSRecord"
	ProvisioningStepTypeFileDelete   ProvisioningStepType = "FileDelete"
	ProvisioningStepTypeFileDownload ProvisioningStepType = "FileDownload"
	ProvisioningStepTypeFileExtract  ProvisioningStepType = "FileExtract"
	ProvisioningStepTypeUndefined    ProvisioningStepType = "Undefined"
)

var AllProvisioningStepType = []ProvisioningStepType{
	ProvisioningStepTypeScript,
	ProvisioningStepTypeCommand,
	ProvisioningStepTypeDNSRecord,
	ProvisioningStepTypeFileDelete,
	ProvisioningStepTypeFileDownload,
	ProvisioningStepTypeFileExtract,
	ProvisioningStepTypeUndefined,
}

func (e ProvisioningStepType) IsValid() bool {
	switch e {
	case ProvisioningStepTypeScript, ProvisioningStepTypeCommand, ProvisioningStepTypeDNSRecord, ProvisioningStepTypeFileDelete, ProvisioningStepTypeFileDownload, ProvisioningStepTypeFileExtract, ProvisioningStepTypeUndefined:
		return true
	}
	return false
}

func (e ProvisioningStepType) String() string {
	return string(e)
}

func (e *ProvisioningStepType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProvisioningStepType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProvisioningStepType", str)
	}
	return nil
}

func (e ProvisioningStepType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleLevel string

const (
	RoleLevelAdmin     RoleLevel = "ADMIN"
	RoleLevelUser      RoleLevel = "USER"
	RoleLevelUndefined RoleLevel = "UNDEFINED"
)

var AllRoleLevel = []RoleLevel{
	RoleLevelAdmin,
	RoleLevelUser,
	RoleLevelUndefined,
}

func (e RoleLevel) IsValid() bool {
	switch e {
	case RoleLevelAdmin, RoleLevelUser, RoleLevelUndefined:
		return true
	}
	return false
}

func (e RoleLevel) String() string {
	return string(e)
}

func (e *RoleLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleLevel", str)
	}
	return nil
}

func (e RoleLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
