// Code generated by fileb0x at "2018-08-05 05:03:23.196447285 -0700 PDT m=+0.003980594" from config file "assets.toml" DO NOT EDIT.
// modification hash(5555bb77d9c6f67e70ae0a69227aa7c1.e5b9c5ef4c0b7aef8593382d0449dfd6)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileCompetitionHclTmpl is "competition.hcl.tmpl"
var FileCompetitionHclTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x9c\x93\x5d\x8b\xa3\x30\x14\x86\xef\xf3\x2b\x0e\xd2\x2b\x99\xad\xf7\x0b\xbd\x70\xaa\x1d\x64\x1d\x2d\xea\x5c\x2c\xcb\x52\x5c\x3d\x75\xa4\x35\x91\x24\x33\x43\x91\xfc\xf7\x25\x9a\xba\xad\xec\x87\xee\x65\xce\xfb\x9c\xf7\x21\x11\x1d\x9b\x10\x00\xcf\xdf\xb9\x2f\x61\x06\xa1\xbb\x8b\x93\x27\x1f\x1e\xdd\xd4\x87\x6d\xfc\xbc\xf7\xb3\x20\x0b\xe2\x08\xb6\x71\xb4\x0b\x9e\x5e\x12\x57\x9f\x08\xb1\x1d\x42\x88\x63\x43\xf0\xbc\x8f\x93\x0c\xdc\x30\x84\xf5\x39\x3f\x32\x5e\x21\xec\x82\xd0\x4f\x21\x88\xa0\x60\xf4\x58\x57\x0e\x78\x41\xe2\x6f\xb3\x38\xf9\x0a\xb6\x43\x6a\x5a\x9c\xdf\x4a\x84\x8e\x00\xb4\xb9\x7c\x85\x0d\x58\x6b\xc7\xa0\xf6\xb5\xc4\x22\xea\xdf\xfd\xa2\xe0\x75\x2b\xc5\x2c\xc1\x95\x5d\x66\x28\x58\xd3\xe4\xb4\x14\x33\xef\x60\xe0\x65\x8e\x57\x26\x66\xde\x61\x20\x97\xb5\x53\x94\x1f\x8c\x9f\xe6\x09\x46\x78\x99\xa3\x2e\x91\xca\x5a\xd6\x38\xcf\x72\x83\x2f\xf3\x1c\xeb\xf3\x4c\xc5\x40\xde\xb7\x93\x82\x35\x2d\x6a\x31\xa3\x60\x75\x1d\xac\xd6\x81\x07\x4a\x59\xfd\x2e\x67\x4c\x1e\xda\x5c\x88\x0f\xc6\x4b\x5d\xd2\x03\x09\x63\x72\x7f\x1d\x2a\x65\xe9\x5f\xa5\xa4\xc2\xa4\x5e\x94\xde\x56\x00\xc8\x4b\x8b\xe3\xae\x4e\x33\x3d\x30\x7b\xc6\x51\xb2\x26\xaf\xe9\x1d\xa5\x2d\xde\x30\x1e\xd9\x92\x8a\x83\x40\xfe\x8e\x5c\xc0\x06\xbe\xf5\x33\x80\xae\x03\x9e\xd3\x0a\x61\x75\x78\x80\x95\xe0\xef\xf0\x79\x63\x4a\xbc\x28\x4d\x0d\xff\x49\x29\xc3\xf7\x0e\x8d\x29\x65\x3d\xfc\xea\x40\x5a\x8e\xd0\xf7\xc1\x47\x65\xbb\xcc\x17\x65\xfb\xff\xf4\x01\x28\xed\xe4\xd8\x30\x89\xd7\x87\xee\x0f\x7f\x79\x4d\x03\x4c\x1e\x14\x2b\xfd\x31\x27\x4c\x32\x4c\x47\xea\x84\x97\x29\xf2\x05\x2f\x7d\xae\x63\x81\x05\x47\x39\x25\xd2\x61\x3a\x96\x08\x99\x4b\x3c\xfc\x78\x2b\x4e\xbf\x61\x75\xf6\x38\x44\x63\xab\x64\x3c\xaf\xfe\xbc\xd1\xa7\x77\x3b\x8a\xa8\x9f\x01\x00\x00\xff\xff\x47\xb8\x82\x1a\x8c\x05\x00\x00")

// FileUserHclTmpl is "user.hcl.tmpl"
var FileUserHclTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x2a\x2d\x4e\x2d\x52\x50\xaa\xae\x56\x50\xd1\xf3\x74\x51\xa8\xad\x55\x52\xa8\xe6\x52\x50\xc8\x4b\xcc\x4d\x55\xb0\x85\x8a\xfb\x81\x38\xb5\xb5\x4a\x5c\x0a\x0a\xa5\xa5\x99\x29\x70\xf1\xd0\x50\x88\x0e\x2e\x05\x85\xd4\xdc\xc4\xcc\x1c\xb8\x84\x2b\x98\x07\x92\xa9\x05\x04\x00\x00\xff\xff\xe2\x47\xe8\x14\x5f\x00\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileCompetitionHclTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "competition.hcl.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileUserHclTmpl)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "user.hcl.tmpl", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
