// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package core

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore(in *jlexer.Lexer, out *WinRMAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "https":
			out.HTTPS = bool(in.Bool())
		case "skip_verify":
			out.SkipVerify = bool(in.Bool())
		case "tls_server_name":
			out.TLSServerName = string(in.String())
		case "ca_file":
			out.CAFile = string(in.String())
		case "cert_file":
			out.CertFile = string(in.String())
		case "key_file":
			out.KeyFile = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore(out *jwriter.Writer, in WinRMAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.HTTPS {
		const prefix string = ",\"https\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HTTPS))
	}
	if in.SkipVerify {
		const prefix string = ",\"skip_verify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipVerify))
	}
	if in.TLSServerName != "" {
		const prefix string = ",\"tls_server_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TLSServerName))
	}
	if in.CAFile != "" {
		const prefix string = ",\"ca_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CAFile))
	}
	if in.CertFile != "" {
		const prefix string = ",\"cert_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CertFile))
	}
	if in.KeyFile != "" {
		const prefix string = ",\"key_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyFile))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WinRMAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WinRMAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uuid":
			out.UUID = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.UUID != "" {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore1(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore2(in *jlexer.Lexer, out *Team) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_number":
			out.TeamNumber = int(in.Int())
		case "build_id":
			out.BuildID = string(in.String())
		case "environment_id":
			out.EnvironmentID = string(in.String())
		case "competition_id":
			out.CompetitionID = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Config)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Tags)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore2(out *jwriter.Writer, in Team) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.TeamNumber != 0 {
		const prefix string = ",\"team_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamNumber))
	}
	if in.BuildID != "" {
		const prefix string = ",\"build_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildID))
	}
	if in.EnvironmentID != "" {
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EnvironmentID))
	}
	if in.CompetitionID != "" {
		const prefix string = ",\"competition_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompetitionID))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Config {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Tags {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Team) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Team) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Team) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Team) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore2(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore3(in *jlexer.Lexer, out *Script) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "source":
			out.Source = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Args = append(out.Args, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Vars)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Tags)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "findings":
			if in.IsNull() {
				in.Skip()
				out.Findings = nil
			} else {
				in.Delim('[')
				if out.Findings == nil {
					if !in.IsDelim(']') {
						out.Findings = make([]*Finding, 0, 8)
					} else {
						out.Findings = []*Finding{}
					}
				} else {
					out.Findings = (out.Findings)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Finding
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Finding)
						}
						(*v8).UnmarshalEasyJSON(in)
					}
					out.Findings = append(out.Findings, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore3(out *jwriter.Writer, in Script) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.Args {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Vars {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Tags {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				out.String(string(v12Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if len(in.Findings) != 0 {
		const prefix string = ",\"findings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Findings {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					(*v14).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Script) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Script) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Script) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Script) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore3(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore4(in *jlexer.Lexer, out *SSHAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "identity_file":
			out.IdentityFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore4(out *jwriter.Writer, in SSHAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.IdentityFile != "" {
		const prefix string = ",\"identity_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SSHAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SSHAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore4(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore5(in *jlexer.Lexer, out *RemoteFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.Vars)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.Tags)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "template":
			out.Template = bool(in.Bool())
		case "perms":
			out.Perms = string(in.String())
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "md5":
			out.MD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore5(out *jwriter.Writer, in RemoteFile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Destination != "" {
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Vars {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Tags {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	if in.Template {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Template))
	}
	if in.Perms != "" {
		const prefix string = ",\"perms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Perms))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.MD5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore5(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore6(in *jlexer.Lexer, out *Remote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Config)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore6(out *jwriter.Writer, in Remote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Config {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				out.String(string(v20Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Remote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Remote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Remote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Remote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore6(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore7(in *jlexer.Lexer, out *ProvisionedHost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "competition_id":
			out.CompetitionID = string(in.String())
		case "environment_id":
			out.EnvironmentID = string(in.String())
		case "build_id":
			out.BuildID = string(in.String())
		case "team_id":
			out.TeamID = string(in.String())
		case "network_id":
			out.NetworkID = string(in.String())
		case "host_id":
			out.HostID = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "local_addr":
			out.LocalAddr = string(in.String())
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "resource_name":
			out.ResourceName = string(in.String())
		case "ssh":
			if in.IsNull() {
				in.Skip()
				out.SSHAuthConfig = nil
			} else {
				if out.SSHAuthConfig == nil {
					out.SSHAuthConfig = new(SSHAuthConfig)
				}
				(*out.SSHAuthConfig).UnmarshalEasyJSON(in)
			}
		case "winrm":
			if in.IsNull() {
				in.Skip()
				out.WinRMAuthConfig = nil
			} else {
				if out.WinRMAuthConfig == nil {
					out.WinRMAuthConfig = new(WinRMAuthConfig)
				}
				(*out.WinRMAuthConfig).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore7(out *jwriter.Writer, in ProvisionedHost) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"competition_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompetitionID))
	}
	if in.EnvironmentID != "" {
		const prefix string = ",\"environment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EnvironmentID))
	}
	if in.BuildID != "" {
		const prefix string = ",\"build_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuildID))
	}
	if in.TeamID != "" {
		const prefix string = ",\"team_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TeamID))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	if in.HostID != "" {
		const prefix string = ",\"host_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HostID))
	}
	if in.Active {
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	if in.LocalAddr != "" {
		const prefix string = ",\"local_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalAddr))
	}
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.ResourceName != "" {
		const prefix string = ",\"resource_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceName))
	}
	if in.SSHAuthConfig != nil {
		const prefix string = ",\"ssh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SSHAuthConfig).MarshalEasyJSON(out)
	}
	if in.WinRMAuthConfig != nil {
		const prefix string = ",\"winrm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WinRMAuthConfig).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisionedHost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisionedHost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore7(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore8(in *jlexer.Lexer, out *Opt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore8(out *jwriter.Writer, in Opt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore8(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore9(in *jlexer.Lexer, out *OnConflict) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "do":
			out.Do = string(in.String())
		case "append":
			out.Append = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore9(out *jwriter.Writer, in OnConflict) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Do != "" {
		const prefix string = ",\"do\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Do))
	}
	if in.Append {
		const prefix string = ",\"append\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Append))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnConflict) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnConflict) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnConflict) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnConflict) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore9(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore10(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cidr":
			out.CIDR = string(in.String())
		case "vdi_visible":
			out.VDIVisible = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.Vars)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 string
					v22 = string(in.String())
					(out.Tags)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore10(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CIDR != "" {
		const prefix string = ",\"cidr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CIDR))
	}
	if in.VDIVisible {
		const prefix string = ",\"vdi_visible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.VDIVisible))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Vars {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Tags {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Network) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Network) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Network) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Network) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore10(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore11(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object_type":
			out.ObjectType = string(in.String())
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "parent_ids":
			if in.IsNull() {
				in.Skip()
				out.ParentIDs = nil
			} else {
				in.Delim('[')
				if out.ParentIDs == nil {
					if !in.IsDelim(']') {
						out.ParentIDs = make([]string, 0, 4)
					} else {
						out.ParentIDs = []string{}
					}
				} else {
					out.ParentIDs = (out.ParentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.ParentIDs = append(out.ParentIDs, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dependency_ids":
			if in.IsNull() {
				in.Skip()
				out.DependencyIDs = nil
			} else {
				in.Delim('[')
				if out.DependencyIDs == nil {
					if !in.IsDelim(']') {
						out.DependencyIDs = make([]string, 0, 4)
					} else {
						out.DependencyIDs = []string{}
					}
				} else {
					out.DependencyIDs = (out.DependencyIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.DependencyIDs = append(out.DependencyIDs, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]MetaResource, 0, 1)
					} else {
						out.Resources = []MetaResource{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v27 MetaResource
					(v27).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore11(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ObjectType != "" {
		const prefix string = ",\"object_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectType))
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Checksum))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if len(in.ParentIDs) != 0 {
		const prefix string = ",\"parent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.ParentIDs {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.DependencyIDs) != 0 {
		const prefix string = ",\"dependency_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.DependencyIDs {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.Resources {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore11(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore12(in *jlexer.Lexer, out *MetaResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "path_from_base":
			out.PathFromBase = string(in.String())
		case "basename":
			out.Basename = string(in.String())
		case "parent_ids":
			if in.IsNull() {
				in.Skip()
				out.ParentIDs = nil
			} else {
				in.Delim('[')
				if out.ParentIDs == nil {
					if !in.IsDelim(']') {
						out.ParentIDs = make([]string, 0, 4)
					} else {
						out.ParentIDs = []string{}
					}
				} else {
					out.ParentIDs = (out.ParentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.ParentIDs = append(out.ParentIDs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_dir":
			out.IsDir = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore12(out *jwriter.Writer, in MetaResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	if in.Basename != "" {
		const prefix string = ",\"basename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Basename))
	}
	if len(in.ParentIDs) != 0 {
		const prefix string = ",\"parent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.ParentIDs {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.IsDir {
		const prefix string = ",\"is_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDir))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Checksum))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaResource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaResource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaResource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore12(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore13(in *jlexer.Lexer, out *LocalFileRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "abs_path":
			out.AbsPath = string(in.String())
		case "rel_path":
			out.RelPath = string(in.String())
		case "cwd":
			out.Cwd = string(in.String())
		case "declared_path":
			out.DeclaredPath = string(in.String())
		case "rel_to_call_file":
			out.RelToCallFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore13(out *jwriter.Writer, in LocalFileRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Base != "" {
		const prefix string = ",\"base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Base))
	}
	if in.AbsPath != "" {
		const prefix string = ",\"abs_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AbsPath))
	}
	if in.RelPath != "" {
		const prefix string = ",\"rel_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelPath))
	}
	if in.Cwd != "" {
		const prefix string = ",\"cwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cwd))
	}
	if in.DeclaredPath != "" {
		const prefix string = ",\"declared_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeclaredPath))
	}
	if in.RelToCallFile != "" {
		const prefix string = ",\"rel_to_call_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelToCallFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalFileRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalFileRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalFileRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalFileRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore13(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore14(in *jlexer.Lexer, out *Laforge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "include_paths":
			if in.IsNull() {
				in.Skip()
				out.IncludePaths = nil
			} else {
				in.Delim('[')
				if out.IncludePaths == nil {
					if !in.IsDelim(']') {
						out.IncludePaths = make([]*Include, 0, 8)
					} else {
						out.IncludePaths = []*Include{}
					}
				} else {
					out.IncludePaths = (out.IncludePaths)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *Include
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(Include)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					out.IncludePaths = append(out.IncludePaths, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "competitions":
			if in.IsNull() {
				in.Skip()
				out.DefinedCompetitions = nil
			} else {
				in.Delim('[')
				if out.DefinedCompetitions == nil {
					if !in.IsDelim(']') {
						out.DefinedCompetitions = make([]*Competition, 0, 8)
					} else {
						out.DefinedCompetitions = []*Competition{}
					}
				} else {
					out.DefinedCompetitions = (out.DefinedCompetitions)[:0]
				}
				for !in.IsDelim(']') {
					var v38 *Competition
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(Competition)
						}
						(*v38).UnmarshalEasyJSON(in)
					}
					out.DefinedCompetitions = append(out.DefinedCompetitions, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.DefinedEnvironments = nil
			} else {
				in.Delim('[')
				if out.DefinedEnvironments == nil {
					if !in.IsDelim(']') {
						out.DefinedEnvironments = make([]*Environment, 0, 8)
					} else {
						out.DefinedEnvironments = []*Environment{}
					}
				} else {
					out.DefinedEnvironments = (out.DefinedEnvironments)[:0]
				}
				for !in.IsDelim(']') {
					var v39 *Environment
					if in.IsNull() {
						in.Skip()
						v39 = nil
					} else {
						if v39 == nil {
							v39 = new(Environment)
						}
						(*v39).UnmarshalEasyJSON(in)
					}
					out.DefinedEnvironments = append(out.DefinedEnvironments, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "builds":
			if in.IsNull() {
				in.Skip()
				out.DefinedBuilds = nil
			} else {
				in.Delim('[')
				if out.DefinedBuilds == nil {
					if !in.IsDelim(']') {
						out.DefinedBuilds = make([]*Build, 0, 8)
					} else {
						out.DefinedBuilds = []*Build{}
					}
				} else {
					out.DefinedBuilds = (out.DefinedBuilds)[:0]
				}
				for !in.IsDelim(']') {
					var v40 *Build
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						if v40 == nil {
							v40 = new(Build)
						}
						(*v40).UnmarshalEasyJSON(in)
					}
					out.DefinedBuilds = append(out.DefinedBuilds, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teams":
			if in.IsNull() {
				in.Skip()
				out.DefinedTeams = nil
			} else {
				in.Delim('[')
				if out.DefinedTeams == nil {
					if !in.IsDelim(']') {
						out.DefinedTeams = make([]*Team, 0, 8)
					} else {
						out.DefinedTeams = []*Team{}
					}
				} else {
					out.DefinedTeams = (out.DefinedTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *Team
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(Team)
						}
						(*v41).UnmarshalEasyJSON(in)
					}
					out.DefinedTeams = append(out.DefinedTeams, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedHosts = make([]*Host, 0, 8)
					} else {
						out.DefinedHosts = []*Host{}
					}
				} else {
					out.DefinedHosts = (out.DefinedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v42 *Host
					if in.IsNull() {
						in.Skip()
						v42 = nil
					} else {
						if v42 == nil {
							v42 = new(Host)
						}
						(*v42).UnmarshalEasyJSON(in)
					}
					out.DefinedHosts = append(out.DefinedHosts, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.DefinedNetworks = nil
			} else {
				in.Delim('[')
				if out.DefinedNetworks == nil {
					if !in.IsDelim(']') {
						out.DefinedNetworks = make([]*Network, 0, 8)
					} else {
						out.DefinedNetworks = []*Network{}
					}
				} else {
					out.DefinedNetworks = (out.DefinedNetworks)[:0]
				}
				for !in.IsDelim(']') {
					var v43 *Network
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(Network)
						}
						(*v43).UnmarshalEasyJSON(in)
					}
					out.DefinedNetworks = append(out.DefinedNetworks, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identities":
			if in.IsNull() {
				in.Skip()
				out.DefinedIdentities = nil
			} else {
				in.Delim('[')
				if out.DefinedIdentities == nil {
					if !in.IsDelim(']') {
						out.DefinedIdentities = make([]*Identity, 0, 8)
					} else {
						out.DefinedIdentities = []*Identity{}
					}
				} else {
					out.DefinedIdentities = (out.DefinedIdentities)[:0]
				}
				for !in.IsDelim(']') {
					var v44 *Identity
					if in.IsNull() {
						in.Skip()
						v44 = nil
					} else {
						if v44 == nil {
							v44 = new(Identity)
						}
						(*v44).UnmarshalEasyJSON(in)
					}
					out.DefinedIdentities = append(out.DefinedIdentities, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scripts":
			if in.IsNull() {
				in.Skip()
				out.DefinedScripts = nil
			} else {
				in.Delim('[')
				if out.DefinedScripts == nil {
					if !in.IsDelim(']') {
						out.DefinedScripts = make([]*Script, 0, 8)
					} else {
						out.DefinedScripts = []*Script{}
					}
				} else {
					out.DefinedScripts = (out.DefinedScripts)[:0]
				}
				for !in.IsDelim(']') {
					var v45 *Script
					if in.IsNull() {
						in.Skip()
						v45 = nil
					} else {
						if v45 == nil {
							v45 = new(Script)
						}
						(*v45).UnmarshalEasyJSON(in)
					}
					out.DefinedScripts = append(out.DefinedScripts, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_commands":
			if in.IsNull() {
				in.Skip()
				out.DefinedCommands = nil
			} else {
				in.Delim('[')
				if out.DefinedCommands == nil {
					if !in.IsDelim(']') {
						out.DefinedCommands = make([]*Command, 0, 8)
					} else {
						out.DefinedCommands = []*Command{}
					}
				} else {
					out.DefinedCommands = (out.DefinedCommands)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *Command
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(Command)
						}
						(*v46).UnmarshalEasyJSON(in)
					}
					out.DefinedCommands = append(out.DefinedCommands, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_files":
			if in.IsNull() {
				in.Skip()
				out.DefinedRemoteFiles = nil
			} else {
				in.Delim('[')
				if out.DefinedRemoteFiles == nil {
					if !in.IsDelim(']') {
						out.DefinedRemoteFiles = make([]*RemoteFile, 0, 8)
					} else {
						out.DefinedRemoteFiles = []*RemoteFile{}
					}
				} else {
					out.DefinedRemoteFiles = (out.DefinedRemoteFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v47 *RemoteFile
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(RemoteFile)
						}
						(*v47).UnmarshalEasyJSON(in)
					}
					out.DefinedRemoteFiles = append(out.DefinedRemoteFiles, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_dns_records":
			if in.IsNull() {
				in.Skip()
				out.DefinedDNSRecords = nil
			} else {
				in.Delim('[')
				if out.DefinedDNSRecords == nil {
					if !in.IsDelim(']') {
						out.DefinedDNSRecords = make([]*DNSRecord, 0, 8)
					} else {
						out.DefinedDNSRecords = []*DNSRecord{}
					}
				} else {
					out.DefinedDNSRecords = (out.DefinedDNSRecords)[:0]
				}
				for !in.IsDelim(']') {
					var v48 *DNSRecord
					if in.IsNull() {
						in.Skip()
						v48 = nil
					} else {
						if v48 == nil {
							v48 = new(DNSRecord)
						}
						(*v48).UnmarshalEasyJSON(in)
					}
					out.DefinedDNSRecords = append(out.DefinedDNSRecords, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisionedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisionedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisionedHosts = make([]*ProvisionedHost, 0, 8)
					} else {
						out.DefinedProvisionedHosts = []*ProvisionedHost{}
					}
				} else {
					out.DefinedProvisionedHosts = (out.DefinedProvisionedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(ProvisionedHost)
						}
						(*v49).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisionedHosts = append(out.DefinedProvisionedHosts, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore14(out *jwriter.Writer, in Laforge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filename))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if len(in.IncludePaths) != 0 {
		const prefix string = ",\"include_paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.IncludePaths {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCompetitions) != 0 {
		const prefix string = ",\"competitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.DefinedCompetitions {
				if v52 > 0 {
					out.RawByte(',')
				}
				if v53 == nil {
					out.RawString("null")
				} else {
					(*v53).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedEnvironments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.DefinedEnvironments {
				if v54 > 0 {
					out.RawByte(',')
				}
				if v55 == nil {
					out.RawString("null")
				} else {
					(*v55).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedBuilds) != 0 {
		const prefix string = ",\"builds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.DefinedBuilds {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					(*v57).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedTeams) != 0 {
		const prefix string = ",\"teams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.DefinedTeams {
				if v58 > 0 {
					out.RawByte(',')
				}
				if v59 == nil {
					out.RawString("null")
				} else {
					(*v59).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedHosts) != 0 {
		const prefix string = ",\"hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.DefinedHosts {
				if v60 > 0 {
					out.RawByte(',')
				}
				if v61 == nil {
					out.RawString("null")
				} else {
					(*v61).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedNetworks) != 0 {
		const prefix string = ",\"networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.DefinedNetworks {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					(*v63).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedIdentities) != 0 {
		const prefix string = ",\"identities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.DefinedIdentities {
				if v64 > 0 {
					out.RawByte(',')
				}
				if v65 == nil {
					out.RawString("null")
				} else {
					(*v65).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedScripts) != 0 {
		const prefix string = ",\"scripts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.DefinedScripts {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					(*v67).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCommands) != 0 {
		const prefix string = ",\"defined_commands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.DefinedCommands {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					(*v69).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedRemoteFiles) != 0 {
		const prefix string = ",\"defined_files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.DefinedRemoteFiles {
				if v70 > 0 {
					out.RawByte(',')
				}
				if v71 == nil {
					out.RawString("null")
				} else {
					(*v71).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedDNSRecords) != 0 {
		const prefix string = ",\"defined_dns_records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.DefinedDNSRecords {
				if v72 > 0 {
					out.RawByte(',')
				}
				if v73 == nil {
					out.RawString("null")
				} else {
					(*v73).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisionedHosts) != 0 {
		const prefix string = ",\"provisioned_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.DefinedProvisionedHosts {
				if v74 > 0 {
					out.RawByte(',')
				}
				if v75 == nil {
					out.RawString("null")
				} else {
					(*v75).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Laforge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Laforge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Laforge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Laforge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore14(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore15(in *jlexer.Lexer, out *IncludedNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "included_hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v76 string
					v76 = string(in.String())
					out.Hosts = append(out.Hosts, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore15(out *jwriter.Writer, in IncludedNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"included_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.Hosts {
				if v77 > 0 {
					out.RawByte(',')
				}
				out.String(string(v78))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncludedNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncludedNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore15(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore16(in *jlexer.Lexer, out *Include) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore16(out *jwriter.Writer, in Include) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Include) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Include) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Include) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Include) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore16(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore17(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar_file":
			out.AvatarFile = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v79 string
					v79 = string(in.String())
					(out.Vars)[key] = v79
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v80 string
					v80 = string(in.String())
					(out.Tags)[key] = v80
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore17(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Firstname != "" {
		const prefix string = ",\"firstname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Firstname))
	}
	if in.Lastname != "" {
		const prefix string = ",\"lastname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Lastname))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.AvatarFile != "" {
		const prefix string = ",\"avatar_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarFile))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.Vars {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v81Name))
				out.RawByte(':')
				out.String(string(v81Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v82First := true
			for v82Name, v82Value := range in.Tags {
				if v82First {
					v82First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v82Name))
				out.RawByte(':')
				out.String(string(v82Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore17(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore18(in *jlexer.Lexer, out *IO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stdin":
			out.Stdin = string(in.String())
		case "stdout":
			out.Stdout = string(in.String())
		case "stderr":
			out.Stderr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore18(out *jwriter.Writer, in IO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Stdin != "" {
		const prefix string = ",\"stdin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stdin))
	}
	if in.Stdout != "" {
		const prefix string = ",\"stdout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stdout))
	}
	if in.Stderr != "" {
		const prefix string = ",\"stderr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stderr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore18(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore19(in *jlexer.Lexer, out *HostDependency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.HostID = string(in.String())
		case "network":
			out.NetworkID = string(in.String())
		case "step":
			out.Step = string(in.String())
		case "step_id":
			out.StepID = int(in.Int())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore19(out *jwriter.Writer, in HostDependency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HostID != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HostID))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	if in.Step != "" {
		const prefix string = ",\"step\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Step))
	}
	if in.StepID != 0 {
		const prefix string = ",\"step_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepID))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HostDependency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HostDependency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HostDependency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HostDependency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore19(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore20(in *jlexer.Lexer, out *Host) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "ami":
			out.AMI = string(in.String())
		case "last_octet":
			out.LastOctet = int(in.Int())
		case "instance_size":
			out.InstanceSize = string(in.String())
		case "disk":
			(out.Disk).UnmarshalEasyJSON(in)
		case "provision_steps":
			if in.IsNull() {
				in.Skip()
				out.ProvisionSteps = nil
			} else {
				in.Delim('[')
				if out.ProvisionSteps == nil {
					if !in.IsDelim(']') {
						out.ProvisionSteps = make([]string, 0, 4)
					} else {
						out.ProvisionSteps = []string{}
					}
				} else {
					out.ProvisionSteps = (out.ProvisionSteps)[:0]
				}
				for !in.IsDelim(']') {
					var v83 string
					v83 = string(in.String())
					out.ProvisionSteps = append(out.ProvisionSteps, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_tcp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedTCPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedTCPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedTCPPorts = make([]string, 0, 4)
					} else {
						out.ExposedTCPPorts = []string{}
					}
				} else {
					out.ExposedTCPPorts = (out.ExposedTCPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.ExposedTCPPorts = append(out.ExposedTCPPorts, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_udp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedUDPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedUDPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedUDPPorts = make([]string, 0, 4)
					} else {
						out.ExposedUDPPorts = []string{}
					}
				} else {
					out.ExposedUDPPorts = (out.ExposedUDPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.ExposedUDPPorts = append(out.ExposedUDPPorts, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "override_password":
			out.OverridePassword = string(in.String())
		case "user_groups":
			if in.IsNull() {
				in.Skip()
				out.UserGroups = nil
			} else {
				in.Delim('[')
				if out.UserGroups == nil {
					if !in.IsDelim(']') {
						out.UserGroups = make([]string, 0, 4)
					} else {
						out.UserGroups = []string{}
					}
				} else {
					out.UserGroups = (out.UserGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.UserGroups = append(out.UserGroups, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "depends_on":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]*HostDependency, 0, 8)
					} else {
						out.Dependencies = []*HostDependency{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v87 *HostDependency
					if in.IsNull() {
						in.Skip()
						v87 = nil
					} else {
						if v87 == nil {
							v87 = new(HostDependency)
						}
						(*v87).UnmarshalEasyJSON(in)
					}
					out.Dependencies = append(out.Dependencies, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v88 string
					v88 = string(in.String())
					(out.Vars)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v89 string
					v89 = string(in.String())
					(out.Tags)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore20(out *jwriter.Writer, in Host) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.AMI != "" {
		const prefix string = ",\"ami\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AMI))
	}
	if in.LastOctet != 0 {
		const prefix string = ",\"last_octet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastOctet))
	}
	if in.InstanceSize != "" {
		const prefix string = ",\"instance_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InstanceSize))
	}
	if true {
		const prefix string = ",\"disk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Disk).MarshalEasyJSON(out)
	}
	if len(in.ProvisionSteps) != 0 {
		const prefix string = ",\"provision_steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.ProvisionSteps {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.String(string(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedTCPPorts) != 0 {
		const prefix string = ",\"exposed_tcp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.ExposedTCPPorts {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedUDPPorts) != 0 {
		const prefix string = ",\"exposed_udp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v94, v95 := range in.ExposedUDPPorts {
				if v94 > 0 {
					out.RawByte(',')
				}
				out.String(string(v95))
			}
			out.RawByte(']')
		}
	}
	if in.OverridePassword != "" {
		const prefix string = ",\"override_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OverridePassword))
	}
	if len(in.UserGroups) != 0 {
		const prefix string = ",\"user_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.UserGroups {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"depends_on\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Dependencies {
				if v98 > 0 {
					out.RawByte(',')
				}
				if v99 == nil {
					out.RawString("null")
				} else {
					(*v99).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v100First := true
			for v100Name, v100Value := range in.Vars {
				if v100First {
					v100First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v100Name))
				out.RawByte(':')
				out.String(string(v100Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v101First := true
			for v101Name, v101Value := range in.Tags {
				if v101First {
					v101First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v101Name))
				out.RawByte(':')
				out.String(string(v101Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Host) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Host) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Host) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Host) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore20(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore21(in *jlexer.Lexer, out *Finding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "severity":
			out.Severity = FindingSeverity(in.Int())
		case "difficulty":
			out.Difficulty = FindingDifficulty(in.Int())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v102 string
					v102 = string(in.String())
					out.Tags = append(out.Tags, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore21(out *jwriter.Writer, in Finding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Severity != 0 {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Severity))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Difficulty))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v103, v104 := range in.Tags {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Finding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Finding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Finding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Finding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore21(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore22(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "competition_id":
			out.CompetitionID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "builder":
			out.Builder = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "admin_ranges":
			if in.IsNull() {
				in.Skip()
				out.AdminCIDRs = nil
			} else {
				in.Delim('[')
				if out.AdminCIDRs == nil {
					if !in.IsDelim(']') {
						out.AdminCIDRs = make([]string, 0, 4)
					} else {
						out.AdminCIDRs = []string{}
					}
				} else {
					out.AdminCIDRs = (out.AdminCIDRs)[:0]
				}
				for !in.IsDelim(']') {
					var v105 string
					v105 = string(in.String())
					out.AdminCIDRs = append(out.AdminCIDRs, v105)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v106 string
					v106 = string(in.String())
					(out.Config)[key] = v106
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v107 string
					v107 = string(in.String())
					(out.Tags)[key] = v107
					in.WantComma()
				}
				in.Delim('}')
			}
		case "included_networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]*IncludedNetwork, 0, 8)
					} else {
						out.Networks = []*IncludedNetwork{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v108 *IncludedNetwork
					if in.IsNull() {
						in.Skip()
						v108 = nil
					} else {
						if v108 == nil {
							v108 = new(IncludedNetwork)
						}
						(*v108).UnmarshalEasyJSON(in)
					}
					out.Networks = append(out.Networks, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "base_dir":
			out.BaseDir = string(in.String())
		case "revision":
			out.Revision = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore22(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.CompetitionID != "" {
		const prefix string = ",\"competition_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompetitionID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Builder != "" {
		const prefix string = ",\"builder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Builder))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.AdminCIDRs) != 0 {
		const prefix string = ",\"admin_ranges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v109, v110 := range in.AdminCIDRs {
				if v109 > 0 {
					out.RawByte(',')
				}
				out.String(string(v110))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v111First := true
			for v111Name, v111Value := range in.Config {
				if v111First {
					v111First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v111Name))
				out.RawByte(':')
				out.String(string(v111Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v112First := true
			for v112Name, v112Value := range in.Tags {
				if v112First {
					v112First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v112Name))
				out.RawByte(':')
				out.String(string(v112Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Networks) != 0 {
		const prefix string = ",\"included_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.Networks {
				if v113 > 0 {
					out.RawByte(',')
				}
				if v114 == nil {
					out.RawString("null")
				} else {
					(*v114).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Environment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Environment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Environment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Environment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore22(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore23(in *jlexer.Lexer, out *Disk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore23(out *jwriter.Writer, in Disk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Disk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Disk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore23(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore24(in *jlexer.Lexer, out *DNSRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v115 string
					v115 = string(in.String())
					out.Values = append(out.Values, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "zone":
			out.Zone = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v116 string
					v116 = string(in.String())
					(out.Vars)[key] = v116
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v117 string
					v117 = string(in.String())
					(out.Tags)[key] = v117
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore24(out *jwriter.Writer, in DNSRecord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v118, v119 := range in.Values {
				if v118 > 0 {
					out.RawByte(',')
				}
				out.String(string(v119))
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Zone != "" {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zone))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v120First := true
			for v120Name, v120Value := range in.Vars {
				if v120First {
					v120First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v120Name))
				out.RawByte(':')
				out.String(string(v120Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v121First := true
			for v121Name, v121Value := range in.Tags {
				if v121First {
					v121First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v121Name))
				out.RawByte(':')
				out.String(string(v121Value))
			}
			out.RawByte('}')
		}
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNSRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNSRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore24(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore25(in *jlexer.Lexer, out *DNS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "root_domain":
			out.RootDomain = string(in.String())
		case "dns_servers":
			if in.IsNull() {
				in.Skip()
				out.DNSServers = nil
			} else {
				in.Delim('[')
				if out.DNSServers == nil {
					if !in.IsDelim(']') {
						out.DNSServers = make([]string, 0, 4)
					} else {
						out.DNSServers = []string{}
					}
				} else {
					out.DNSServers = (out.DNSServers)[:0]
				}
				for !in.IsDelim(']') {
					var v122 string
					v122 = string(in.String())
					out.DNSServers = append(out.DNSServers, v122)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ntp_servers":
			if in.IsNull() {
				in.Skip()
				out.NTPServers = nil
			} else {
				in.Delim('[')
				if out.NTPServers == nil {
					if !in.IsDelim(']') {
						out.NTPServers = make([]string, 0, 4)
					} else {
						out.NTPServers = []string{}
					}
				} else {
					out.NTPServers = (out.NTPServers)[:0]
				}
				for !in.IsDelim(']') {
					var v123 string
					v123 = string(in.String())
					out.NTPServers = append(out.NTPServers, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v124 string
					v124 = string(in.String())
					(out.Config)[key] = v124
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore25(out *jwriter.Writer, in DNS) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.RootDomain != "" {
		const prefix string = ",\"root_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootDomain))
	}
	if len(in.DNSServers) != 0 {
		const prefix string = ",\"dns_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v125, v126 := range in.DNSServers {
				if v125 > 0 {
					out.RawByte(',')
				}
				out.String(string(v126))
			}
			out.RawByte(']')
		}
	}
	if len(in.NTPServers) != 0 {
		const prefix string = ",\"ntp_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v127, v128 := range in.NTPServers {
				if v127 > 0 {
					out.RawByte(',')
				}
				out.String(string(v128))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v129First := true
			for v129Name, v129Value := range in.Config {
				if v129First {
					v129First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v129Name))
				out.RawByte(':')
				out.String(string(v129Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore25(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore26(in *jlexer.Lexer, out *Competition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "root_password":
			out.RootPassword = string(in.String())
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNS = nil
			} else {
				if out.DNS == nil {
					out.DNS = new(DNS)
				}
				(*out.DNS).UnmarshalEasyJSON(in)
			}
		case "remote":
			if in.IsNull() {
				in.Skip()
				out.Remote = nil
			} else {
				if out.Remote == nil {
					out.Remote = new(Remote)
				}
				(*out.Remote).UnmarshalEasyJSON(in)
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v130 string
					v130 = string(in.String())
					(out.Config)[key] = v130
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore26(out *jwriter.Writer, in Competition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.RootPassword != "" {
		const prefix string = ",\"root_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootPassword))
	}
	if in.DNS != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DNS).MarshalEasyJSON(out)
	}
	if in.Remote != nil {
		const prefix string = ",\"remote\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Remote).MarshalEasyJSON(out)
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v131First := true
			for v131Name, v131Value := range in.Config {
				if v131First {
					v131First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v131Name))
				out.RawByte(':')
				out.String(string(v131Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Competition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Competition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Competition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Competition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore26(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore27(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "program":
			out.Program = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v132 string
					v132 = string(in.String())
					out.Args = append(out.Args, v132)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v133 string
					v133 = string(in.String())
					(out.Vars)[key] = v133
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v134 string
					v134 = string(in.String())
					(out.Tags)[key] = v134
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore27(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Program != "" {
		const prefix string = ",\"program\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Program))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v135, v136 := range in.Args {
				if v135 > 0 {
					out.RawByte(',')
				}
				out.String(string(v136))
			}
			out.RawByte(']')
		}
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Vars {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				out.String(string(v137Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v138First := true
			for v138Name, v138Value := range in.Tags {
				if v138First {
					v138First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v138Name))
				out.RawByte(':')
				out.String(string(v138Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore27(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore28(in *jlexer.Lexer, out *Build) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v139 string
					v139 = string(in.String())
					(out.Config)[key] = v139
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v140 string
					v140 = string(in.String())
					(out.Tags)[key] = v140
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "path_from_base":
			out.PathFromBase = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore28(out *jwriter.Writer, in Build) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v141First := true
			for v141Name, v141Value := range in.Config {
				if v141First {
					v141First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v141Name))
				out.RawByte(':')
				out.String(string(v141Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v142First := true
			for v142Name, v142Value := range in.Tags {
				if v142First {
					v142First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v142Name))
				out.RawByte(':')
				out.String(string(v142Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Build) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Build) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Build) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Build) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore28(l, v)
}
func easyjson3d34c335DecodeGithubComGen0cideLaforgeCore29(in *jlexer.Lexer, out *AMI) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "provider":
			out.Provider = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v143 string
					v143 = string(in.String())
					(out.Vars)[key] = v143
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v144 string
					v144 = string(in.String())
					(out.Tags)[key] = v144
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComGen0cideLaforgeCore29(out *jwriter.Writer, in AMI) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Provider != "" {
		const prefix string = ",\"provider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Provider))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v145First := true
			for v145Name, v145Value := range in.Vars {
				if v145First {
					v145First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v145Name))
				out.RawByte(':')
				out.String(string(v145Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v146First := true
			for v146Name, v146Value := range in.Tags {
				if v146First {
					v146First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v146Name))
				out.RawByte(':')
				out.String(string(v146Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AMI) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AMI) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComGen0cideLaforgeCore29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AMI) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AMI) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComGen0cideLaforgeCore29(l, v)
}
