// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package core

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(in *jlexer.Lexer, out *WinRMAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "https":
			out.HTTPS = bool(in.Bool())
		case "skip_verify":
			out.SkipVerify = bool(in.Bool())
		case "tls_server_name":
			out.TLSServerName = string(in.String())
		case "ca_file":
			out.CAFile = string(in.String())
		case "cert_file":
			out.CertFile = string(in.String())
		case "key_file":
			out.KeyFile = string(in.String())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(out *jwriter.Writer, in WinRMAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.HTTPS {
		const prefix string = ",\"https\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HTTPS))
	}
	if in.SkipVerify {
		const prefix string = ",\"skip_verify\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipVerify))
	}
	if in.TLSServerName != "" {
		const prefix string = ",\"tls_server_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TLSServerName))
	}
	if in.CAFile != "" {
		const prefix string = ",\"ca_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CAFile))
	}
	if in.CertFile != "" {
		const prefix string = ",\"cert_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CertFile))
	}
	if in.KeyFile != "" {
		const prefix string = ",\"key_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeyFile))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WinRMAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WinRMAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WinRMAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uuid":
			out.UUID = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.UUID != "" {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UUID))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore1(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(in *jlexer.Lexer, out *Team) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_number":
			out.TeamNumber = int(in.Int())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Config)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Tags)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "provisioned_networks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedNetworks = make(map[string]*ProvisionedNetwork)
				} else {
					out.ProvisionedNetworks = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 *ProvisionedNetwork
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(ProvisionedNetwork)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedNetworks)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedHosts = make(map[string]*ProvisionedHost)
				} else {
					out.ProvisionedHosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(ProvisionedHost)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedHosts)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(out *jwriter.Writer, in Team) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.TeamNumber != 0 {
		const prefix string = ",\"team_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamNumber))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Config {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				out.String(string(v5Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Tags {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"provisioned_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisionedNetworks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.ProvisionedNetworks {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					(*v7Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"provisioned_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisionedHosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.ProvisionedHosts {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					(*v8Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Team) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Team) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Team) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Team) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore2(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = ProvisionStatus(in.String())
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "ended_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndedAt).UnmarshalJSON(data))
			}
		case "failed":
			out.Failed = bool(in.Bool())
		case "completed":
			out.Completed = bool(in.Bool())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"started_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"ended_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.EndedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Failed))
	}
	{
		const prefix string = ",\"completed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Completed))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore3(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(in *jlexer.Lexer, out *Script) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "source":
			out.Source = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.Args = append(out.Args, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 string
					v10 = string(in.String())
					(out.Vars)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 string
					v11 = string(in.String())
					(out.Tags)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "findings":
			if in.IsNull() {
				in.Skip()
				out.Findings = nil
			} else {
				in.Delim('[')
				if out.Findings == nil {
					if !in.IsDelim(']') {
						out.Findings = make([]*Finding, 0, 8)
					} else {
						out.Findings = []*Finding{}
					}
				} else {
					out.Findings = (out.Findings)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *Finding
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(Finding)
						}
						(*v12).UnmarshalEasyJSON(in)
					}
					out.Findings = append(out.Findings, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(out *jwriter.Writer, in Script) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Args {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Vars {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Tags {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if len(in.Findings) != 0 {
		const prefix string = ",\"findings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Findings {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					(*v18).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Script) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Script) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Script) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Script) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore4(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(in *jlexer.Lexer, out *SSHAuthConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "user":
			out.User = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "identity_file":
			out.IdentityFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(out *jwriter.Writer, in SSHAuthConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Port))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.User))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.IdentityFile != "" {
		const prefix string = ",\"identity_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentityFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SSHAuthConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SSHAuthConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SSHAuthConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore5(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(in *jlexer.Lexer, out *RemoteFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "source_type":
			out.SourceType = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Vars)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 string
					v20 = string(in.String())
					(out.Tags)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "template":
			out.Template = bool(in.Bool())
		case "perms":
			out.Perms = string(in.String())
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "md5":
			out.MD5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(out *jwriter.Writer, in RemoteFile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.SourceType != "" {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.Destination != "" {
		const prefix string = ",\"destination\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destination))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Vars {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				out.String(string(v21Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Tags {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	if in.Template {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Template))
	}
	if in.Perms != "" {
		const prefix string = ",\"perms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Perms))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.MD5 != "" {
		const prefix string = ",\"md5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MD5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoteFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoteFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoteFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoteFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore6(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(in *jlexer.Lexer, out *Remote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 string
					v23 = string(in.String())
					(out.Config)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(out *jwriter.Writer, in Remote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Config {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Remote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Remote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Remote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Remote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore7(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(in *jlexer.Lexer, out *ProvisioningStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "provisioner_id":
			out.ProvisionerID = string(in.String())
		case "provisioner_type":
			out.ProvisionerType = string(in.String())
		case "step_number":
			out.StepNumber = int(in.Int())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(out *jwriter.Writer, in ProvisioningStep) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ProvisionerID != "" {
		const prefix string = ",\"provisioner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProvisionerID))
	}
	if in.ProvisionerType != "" {
		const prefix string = ",\"provisioner_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProvisionerType))
	}
	if in.StepNumber != 0 {
		const prefix string = ",\"step_number\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepNumber))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisioningStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisioningStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisioningStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisioningStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore8(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(in *jlexer.Lexer, out *ProvisionedNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cidr":
			out.CIDR = string(in.String())
		case "network_id":
			out.NetworkID = string(in.String())
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisionedHosts = make(map[string]*ProvisionedHost)
				} else {
					out.ProvisionedHosts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(ProvisionedHost)
						}
						(*v25).UnmarshalEasyJSON(in)
					}
					(out.ProvisionedHosts)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(out *jwriter.Writer, in ProvisionedNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CIDR != "" {
		const prefix string = ",\"cidr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CIDR))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	{
		const prefix string = ",\"provisioned_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisionedHosts == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.ProvisionedHosts {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if v26Value == nil {
					out.RawString("null")
				} else {
					(*v26Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisionedNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisionedNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisionedNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisionedNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore9(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(in *jlexer.Lexer, out *ProvisionedHost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "host_id":
			out.HostID = string(in.String())
		case "subnet_ip":
			out.SubnetIP = string(in.String())
		case "connection":
			if in.IsNull() {
				in.Skip()
				out.Conn = nil
			} else {
				if out.Conn == nil {
					out.Conn = new(Connection)
				}
				(*out.Conn).UnmarshalEasyJSON(in)
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "provisioning_steps":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ProvisioningSteps = make(map[string]*ProvisioningStep)
				} else {
					out.ProvisioningSteps = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 *ProvisioningStep
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(ProvisioningStep)
						}
						(*v27).UnmarshalEasyJSON(in)
					}
					(out.ProvisioningSteps)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(out *jwriter.Writer, in ProvisionedHost) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.HostID != "" {
		const prefix string = ",\"host_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HostID))
	}
	if in.SubnetIP != "" {
		const prefix string = ",\"subnet_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubnetIP))
	}
	{
		const prefix string = ",\"connection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Conn == nil {
			out.RawString("null")
		} else {
			(*in.Conn).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"provisioning_steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ProvisioningSteps == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.ProvisioningSteps {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if v28Value == nil {
					out.RawString("null")
				} else {
					(*v28Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProvisionedHost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProvisionedHost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProvisionedHost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore10(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(in *jlexer.Lexer, out *Opt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(out *jwriter.Writer, in Opt) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore11(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(in *jlexer.Lexer, out *OnConflict) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "do":
			out.Do = string(in.String())
		case "append":
			out.Append = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(out *jwriter.Writer, in OnConflict) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Do != "" {
		const prefix string = ",\"do\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Do))
	}
	if in.Append {
		const prefix string = ",\"append\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Append))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnConflict) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnConflict) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnConflict) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnConflict) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore12(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cidr":
			out.CIDR = string(in.String())
		case "vdi_visible":
			out.VDIVisible = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Vars)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v30 string
					v30 = string(in.String())
					(out.Tags)[key] = v30
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.CIDR != "" {
		const prefix string = ",\"cidr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CIDR))
	}
	if in.VDIVisible {
		const prefix string = ",\"vdi_visible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.VDIVisible))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v31First := true
			for v31Name, v31Value := range in.Vars {
				if v31First {
					v31First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v31Name))
				out.RawByte(':')
				out.String(string(v31Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Tags {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				out.String(string(v32Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Network) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Network) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Network) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Network) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore13(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "gid":
			out.GID = int(in.Int())
		case "gcost":
			out.GCost = int64(in.Int64())
		case "object_type":
			out.ObjectType = string(in.String())
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "parent_ids":
			if in.IsNull() {
				in.Skip()
				out.ParentIDs = nil
			} else {
				in.Delim('[')
				if out.ParentIDs == nil {
					if !in.IsDelim(']') {
						out.ParentIDs = make([]string, 0, 4)
					} else {
						out.ParentIDs = []string{}
					}
				} else {
					out.ParentIDs = (out.ParentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.ParentIDs = append(out.ParentIDs, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent_gids":
			if in.IsNull() {
				in.Skip()
				out.ParentGIDs = nil
			} else {
				in.Delim('[')
				if out.ParentGIDs == nil {
					if !in.IsDelim(']') {
						out.ParentGIDs = make([]int, 0, 8)
					} else {
						out.ParentGIDs = []int{}
					}
				} else {
					out.ParentGIDs = (out.ParentGIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 int
					v34 = int(in.Int())
					out.ParentGIDs = append(out.ParentGIDs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "child_gids":
			if in.IsNull() {
				in.Skip()
				out.ChildGIDs = nil
			} else {
				in.Delim('[')
				if out.ChildGIDs == nil {
					if !in.IsDelim(']') {
						out.ChildGIDs = make([]int, 0, 8)
					} else {
						out.ChildGIDs = []int{}
					}
				} else {
					out.ChildGIDs = (out.ChildGIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v35 int
					v35 = int(in.Int())
					out.ChildGIDs = append(out.ChildGIDs, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dependency_ids":
			if in.IsNull() {
				in.Skip()
				out.ChildIDs = nil
			} else {
				in.Delim('[')
				if out.ChildIDs == nil {
					if !in.IsDelim(']') {
						out.ChildIDs = make([]string, 0, 4)
					} else {
						out.ChildIDs = []string{}
					}
				} else {
					out.ChildIDs = (out.ChildIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.ChildIDs = append(out.ChildIDs, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			if in.IsNull() {
				in.Skip()
				out.Resources = nil
			} else {
				in.Delim('[')
				if out.Resources == nil {
					if !in.IsDelim(']') {
						out.Resources = make([]MetaResource, 0, 1)
					} else {
						out.Resources = []MetaResource{}
					}
				} else {
					out.Resources = (out.Resources)[:0]
				}
				for !in.IsDelim(']') {
					var v37 MetaResource
					(v37).UnmarshalEasyJSON(in)
					out.Resources = append(out.Resources, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"gid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GID))
	}
	{
		const prefix string = ",\"gcost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GCost))
	}
	if in.ObjectType != "" {
		const prefix string = ",\"object_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ObjectType))
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Checksum))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if len(in.ParentIDs) != 0 {
		const prefix string = ",\"parent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.ParentIDs {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent_gids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ParentGIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.ParentGIDs {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"child_gids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ChildGIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.ChildGIDs {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.ChildIDs) != 0 {
		const prefix string = ",\"dependency_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.ChildIDs {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if len(in.Resources) != 0 {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.Resources {
				if v46 > 0 {
					out.RawByte(',')
				}
				(v47).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore14(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(in *jlexer.Lexer, out *MetaResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "path_from_base":
			out.PathFromBase = string(in.String())
		case "basename":
			out.Basename = string(in.String())
		case "parent_ids":
			if in.IsNull() {
				in.Skip()
				out.ParentIDs = nil
			} else {
				in.Delim('[')
				if out.ParentIDs == nil {
					if !in.IsDelim(']') {
						out.ParentIDs = make([]string, 0, 4)
					} else {
						out.ParentIDs = []string{}
					}
				} else {
					out.ParentIDs = (out.ParentIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v48 string
					v48 = string(in.String())
					out.ParentIDs = append(out.ParentIDs, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_dir":
			out.IsDir = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modified_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedAt).UnmarshalJSON(data))
			}
		case "checksum":
			out.Checksum = uint64(in.Uint64())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(out *jwriter.Writer, in MetaResource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	if in.Basename != "" {
		const prefix string = ",\"basename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Basename))
	}
	if len(in.ParentIDs) != 0 {
		const prefix string = ",\"parent_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v49, v50 := range in.ParentIDs {
				if v49 > 0 {
					out.RawByte(',')
				}
				out.String(string(v50))
			}
			out.RawByte(']')
		}
	}
	if in.IsDir {
		const prefix string = ",\"is_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDir))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedAt).MarshalJSON())
	}
	if in.Checksum != 0 {
		const prefix string = ",\"checksum\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Checksum))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaResource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaResource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaResource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore15(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(in *jlexer.Lexer, out *LocalFileRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "abs_path":
			out.AbsPath = string(in.String())
		case "rel_path":
			out.RelPath = string(in.String())
		case "cwd":
			out.Cwd = string(in.String())
		case "declared_path":
			out.DeclaredPath = string(in.String())
		case "rel_to_call_file":
			out.RelToCallFile = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(out *jwriter.Writer, in LocalFileRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Base != "" {
		const prefix string = ",\"base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Base))
	}
	if in.AbsPath != "" {
		const prefix string = ",\"abs_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AbsPath))
	}
	if in.RelPath != "" {
		const prefix string = ",\"rel_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelPath))
	}
	if in.Cwd != "" {
		const prefix string = ",\"cwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Cwd))
	}
	if in.DeclaredPath != "" {
		const prefix string = ",\"declared_path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeclaredPath))
	}
	if in.RelToCallFile != "" {
		const prefix string = ",\"rel_to_call_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RelToCallFile))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LocalFileRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LocalFileRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LocalFileRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LocalFileRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore16(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(in *jlexer.Lexer, out *Laforge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "include_paths":
			if in.IsNull() {
				in.Skip()
				out.IncludePaths = nil
			} else {
				in.Delim('[')
				if out.IncludePaths == nil {
					if !in.IsDelim(']') {
						out.IncludePaths = make([]*Include, 0, 8)
					} else {
						out.IncludePaths = []*Include{}
					}
				} else {
					out.IncludePaths = (out.IncludePaths)[:0]
				}
				for !in.IsDelim(']') {
					var v51 *Include
					if in.IsNull() {
						in.Skip()
						v51 = nil
					} else {
						if v51 == nil {
							v51 = new(Include)
						}
						(*v51).UnmarshalEasyJSON(in)
					}
					out.IncludePaths = append(out.IncludePaths, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "competitions":
			if in.IsNull() {
				in.Skip()
				out.DefinedCompetitions = nil
			} else {
				in.Delim('[')
				if out.DefinedCompetitions == nil {
					if !in.IsDelim(']') {
						out.DefinedCompetitions = make([]*Competition, 0, 8)
					} else {
						out.DefinedCompetitions = []*Competition{}
					}
				} else {
					out.DefinedCompetitions = (out.DefinedCompetitions)[:0]
				}
				for !in.IsDelim(']') {
					var v52 *Competition
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(Competition)
						}
						(*v52).UnmarshalEasyJSON(in)
					}
					out.DefinedCompetitions = append(out.DefinedCompetitions, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedHosts = make([]*Host, 0, 8)
					} else {
						out.DefinedHosts = []*Host{}
					}
				} else {
					out.DefinedHosts = (out.DefinedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v53 *Host
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						if v53 == nil {
							v53 = new(Host)
						}
						(*v53).UnmarshalEasyJSON(in)
					}
					out.DefinedHosts = append(out.DefinedHosts, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.DefinedNetworks = nil
			} else {
				in.Delim('[')
				if out.DefinedNetworks == nil {
					if !in.IsDelim(']') {
						out.DefinedNetworks = make([]*Network, 0, 8)
					} else {
						out.DefinedNetworks = []*Network{}
					}
				} else {
					out.DefinedNetworks = (out.DefinedNetworks)[:0]
				}
				for !in.IsDelim(']') {
					var v54 *Network
					if in.IsNull() {
						in.Skip()
						v54 = nil
					} else {
						if v54 == nil {
							v54 = new(Network)
						}
						(*v54).UnmarshalEasyJSON(in)
					}
					out.DefinedNetworks = append(out.DefinedNetworks, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identities":
			if in.IsNull() {
				in.Skip()
				out.DefinedIdentities = nil
			} else {
				in.Delim('[')
				if out.DefinedIdentities == nil {
					if !in.IsDelim(']') {
						out.DefinedIdentities = make([]*Identity, 0, 8)
					} else {
						out.DefinedIdentities = []*Identity{}
					}
				} else {
					out.DefinedIdentities = (out.DefinedIdentities)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *Identity
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(Identity)
						}
						(*v55).UnmarshalEasyJSON(in)
					}
					out.DefinedIdentities = append(out.DefinedIdentities, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scripts":
			if in.IsNull() {
				in.Skip()
				out.DefinedScripts = nil
			} else {
				in.Delim('[')
				if out.DefinedScripts == nil {
					if !in.IsDelim(']') {
						out.DefinedScripts = make([]*Script, 0, 8)
					} else {
						out.DefinedScripts = []*Script{}
					}
				} else {
					out.DefinedScripts = (out.DefinedScripts)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *Script
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(Script)
						}
						(*v56).UnmarshalEasyJSON(in)
					}
					out.DefinedScripts = append(out.DefinedScripts, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_commands":
			if in.IsNull() {
				in.Skip()
				out.DefinedCommands = nil
			} else {
				in.Delim('[')
				if out.DefinedCommands == nil {
					if !in.IsDelim(']') {
						out.DefinedCommands = make([]*Command, 0, 8)
					} else {
						out.DefinedCommands = []*Command{}
					}
				} else {
					out.DefinedCommands = (out.DefinedCommands)[:0]
				}
				for !in.IsDelim(']') {
					var v57 *Command
					if in.IsNull() {
						in.Skip()
						v57 = nil
					} else {
						if v57 == nil {
							v57 = new(Command)
						}
						(*v57).UnmarshalEasyJSON(in)
					}
					out.DefinedCommands = append(out.DefinedCommands, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_files":
			if in.IsNull() {
				in.Skip()
				out.DefinedRemoteFiles = nil
			} else {
				in.Delim('[')
				if out.DefinedRemoteFiles == nil {
					if !in.IsDelim(']') {
						out.DefinedRemoteFiles = make([]*RemoteFile, 0, 8)
					} else {
						out.DefinedRemoteFiles = []*RemoteFile{}
					}
				} else {
					out.DefinedRemoteFiles = (out.DefinedRemoteFiles)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *RemoteFile
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(RemoteFile)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.DefinedRemoteFiles = append(out.DefinedRemoteFiles, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defined_dns_records":
			if in.IsNull() {
				in.Skip()
				out.DefinedDNSRecords = nil
			} else {
				in.Delim('[')
				if out.DefinedDNSRecords == nil {
					if !in.IsDelim(']') {
						out.DefinedDNSRecords = make([]*DNSRecord, 0, 8)
					} else {
						out.DefinedDNSRecords = []*DNSRecord{}
					}
				} else {
					out.DefinedDNSRecords = (out.DefinedDNSRecords)[:0]
				}
				for !in.IsDelim(']') {
					var v59 *DNSRecord
					if in.IsNull() {
						in.Skip()
						v59 = nil
					} else {
						if v59 == nil {
							v59 = new(DNSRecord)
						}
						(*v59).UnmarshalEasyJSON(in)
					}
					out.DefinedDNSRecords = append(out.DefinedDNSRecords, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "environments":
			if in.IsNull() {
				in.Skip()
				out.DefinedEnvironments = nil
			} else {
				in.Delim('[')
				if out.DefinedEnvironments == nil {
					if !in.IsDelim(']') {
						out.DefinedEnvironments = make([]*Environment, 0, 8)
					} else {
						out.DefinedEnvironments = []*Environment{}
					}
				} else {
					out.DefinedEnvironments = (out.DefinedEnvironments)[:0]
				}
				for !in.IsDelim(']') {
					var v60 *Environment
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						if v60 == nil {
							v60 = new(Environment)
						}
						(*v60).UnmarshalEasyJSON(in)
					}
					out.DefinedEnvironments = append(out.DefinedEnvironments, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "builds":
			if in.IsNull() {
				in.Skip()
				out.DefinedBuilds = nil
			} else {
				in.Delim('[')
				if out.DefinedBuilds == nil {
					if !in.IsDelim(']') {
						out.DefinedBuilds = make([]*Build, 0, 8)
					} else {
						out.DefinedBuilds = []*Build{}
					}
				} else {
					out.DefinedBuilds = (out.DefinedBuilds)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *Build
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(Build)
						}
						(*v61).UnmarshalEasyJSON(in)
					}
					out.DefinedBuilds = append(out.DefinedBuilds, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teams":
			if in.IsNull() {
				in.Skip()
				out.DefinedTeams = nil
			} else {
				in.Delim('[')
				if out.DefinedTeams == nil {
					if !in.IsDelim(']') {
						out.DefinedTeams = make([]*Team, 0, 8)
					} else {
						out.DefinedTeams = []*Team{}
					}
				} else {
					out.DefinedTeams = (out.DefinedTeams)[:0]
				}
				for !in.IsDelim(']') {
					var v62 *Team
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						if v62 == nil {
							v62 = new(Team)
						}
						(*v62).UnmarshalEasyJSON(in)
					}
					out.DefinedTeams = append(out.DefinedTeams, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioned_networks":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisionedNetworks = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisionedNetworks == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisionedNetworks = make([]*ProvisionedNetwork, 0, 8)
					} else {
						out.DefinedProvisionedNetworks = []*ProvisionedNetwork{}
					}
				} else {
					out.DefinedProvisionedNetworks = (out.DefinedProvisionedNetworks)[:0]
				}
				for !in.IsDelim(']') {
					var v63 *ProvisionedNetwork
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						if v63 == nil {
							v63 = new(ProvisionedNetwork)
						}
						(*v63).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisionedNetworks = append(out.DefinedProvisionedNetworks, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioned_hosts":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisionedHosts = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisionedHosts == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisionedHosts = make([]*ProvisionedHost, 0, 8)
					} else {
						out.DefinedProvisionedHosts = []*ProvisionedHost{}
					}
				} else {
					out.DefinedProvisionedHosts = (out.DefinedProvisionedHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *ProvisionedHost
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(ProvisionedHost)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisionedHosts = append(out.DefinedProvisionedHosts, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provisioning_steps":
			if in.IsNull() {
				in.Skip()
				out.DefinedProvisioningSteps = nil
			} else {
				in.Delim('[')
				if out.DefinedProvisioningSteps == nil {
					if !in.IsDelim(']') {
						out.DefinedProvisioningSteps = make([]*ProvisioningStep, 0, 8)
					} else {
						out.DefinedProvisioningSteps = []*ProvisioningStep{}
					}
				} else {
					out.DefinedProvisioningSteps = (out.DefinedProvisioningSteps)[:0]
				}
				for !in.IsDelim(']') {
					var v65 *ProvisioningStep
					if in.IsNull() {
						in.Skip()
						v65 = nil
					} else {
						if v65 == nil {
							v65 = new(ProvisioningStep)
						}
						(*v65).UnmarshalEasyJSON(in)
					}
					out.DefinedProvisioningSteps = append(out.DefinedProvisioningSteps, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "connections":
			if in.IsNull() {
				in.Skip()
				out.DefinedConnections = nil
			} else {
				in.Delim('[')
				if out.DefinedConnections == nil {
					if !in.IsDelim(']') {
						out.DefinedConnections = make([]*Connection, 0, 8)
					} else {
						out.DefinedConnections = []*Connection{}
					}
				} else {
					out.DefinedConnections = (out.DefinedConnections)[:0]
				}
				for !in.IsDelim(']') {
					var v66 *Connection
					if in.IsNull() {
						in.Skip()
						v66 = nil
					} else {
						if v66 == nil {
							v66 = new(Connection)
						}
						(*v66).UnmarshalEasyJSON(in)
					}
					out.DefinedConnections = append(out.DefinedConnections, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(out *jwriter.Writer, in Laforge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filename))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	if len(in.IncludePaths) != 0 {
		const prefix string = ",\"include_paths\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.IncludePaths {
				if v67 > 0 {
					out.RawByte(',')
				}
				if v68 == nil {
					out.RawString("null")
				} else {
					(*v68).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCompetitions) != 0 {
		const prefix string = ",\"competitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.DefinedCompetitions {
				if v69 > 0 {
					out.RawByte(',')
				}
				if v70 == nil {
					out.RawString("null")
				} else {
					(*v70).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedHosts) != 0 {
		const prefix string = ",\"hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.DefinedHosts {
				if v71 > 0 {
					out.RawByte(',')
				}
				if v72 == nil {
					out.RawString("null")
				} else {
					(*v72).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedNetworks) != 0 {
		const prefix string = ",\"networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v73, v74 := range in.DefinedNetworks {
				if v73 > 0 {
					out.RawByte(',')
				}
				if v74 == nil {
					out.RawString("null")
				} else {
					(*v74).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedIdentities) != 0 {
		const prefix string = ",\"identities\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v75, v76 := range in.DefinedIdentities {
				if v75 > 0 {
					out.RawByte(',')
				}
				if v76 == nil {
					out.RawString("null")
				} else {
					(*v76).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedScripts) != 0 {
		const prefix string = ",\"scripts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.DefinedScripts {
				if v77 > 0 {
					out.RawByte(',')
				}
				if v78 == nil {
					out.RawString("null")
				} else {
					(*v78).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedCommands) != 0 {
		const prefix string = ",\"defined_commands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v79, v80 := range in.DefinedCommands {
				if v79 > 0 {
					out.RawByte(',')
				}
				if v80 == nil {
					out.RawString("null")
				} else {
					(*v80).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedRemoteFiles) != 0 {
		const prefix string = ",\"defined_files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v81, v82 := range in.DefinedRemoteFiles {
				if v81 > 0 {
					out.RawByte(',')
				}
				if v82 == nil {
					out.RawString("null")
				} else {
					(*v82).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedDNSRecords) != 0 {
		const prefix string = ",\"defined_dns_records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.DefinedDNSRecords {
				if v83 > 0 {
					out.RawByte(',')
				}
				if v84 == nil {
					out.RawString("null")
				} else {
					(*v84).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedEnvironments) != 0 {
		const prefix string = ",\"environments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v85, v86 := range in.DefinedEnvironments {
				if v85 > 0 {
					out.RawByte(',')
				}
				if v86 == nil {
					out.RawString("null")
				} else {
					(*v86).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedBuilds) != 0 {
		const prefix string = ",\"builds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v87, v88 := range in.DefinedBuilds {
				if v87 > 0 {
					out.RawByte(',')
				}
				if v88 == nil {
					out.RawString("null")
				} else {
					(*v88).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedTeams) != 0 {
		const prefix string = ",\"teams\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v89, v90 := range in.DefinedTeams {
				if v89 > 0 {
					out.RawByte(',')
				}
				if v90 == nil {
					out.RawString("null")
				} else {
					(*v90).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisionedNetworks) != 0 {
		const prefix string = ",\"provisioned_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.DefinedProvisionedNetworks {
				if v91 > 0 {
					out.RawByte(',')
				}
				if v92 == nil {
					out.RawString("null")
				} else {
					(*v92).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisionedHosts) != 0 {
		const prefix string = ",\"provisioned_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v93, v94 := range in.DefinedProvisionedHosts {
				if v93 > 0 {
					out.RawByte(',')
				}
				if v94 == nil {
					out.RawString("null")
				} else {
					(*v94).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedProvisioningSteps) != 0 {
		const prefix string = ",\"provisioning_steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v95, v96 := range in.DefinedProvisioningSteps {
				if v95 > 0 {
					out.RawByte(',')
				}
				if v96 == nil {
					out.RawString("null")
				} else {
					(*v96).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DefinedConnections) != 0 {
		const prefix string = ",\"connections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v97, v98 := range in.DefinedConnections {
				if v97 > 0 {
					out.RawByte(',')
				}
				if v98 == nil {
					out.RawString("null")
				} else {
					(*v98).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Laforge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Laforge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Laforge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Laforge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore17(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(in *jlexer.Lexer, out *IncludedNetwork) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "included_hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v99 string
					v99 = string(in.String())
					out.Hosts = append(out.Hosts, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(out *jwriter.Writer, in IncludedNetwork) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"included_hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v100, v101 := range in.Hosts {
				if v100 > 0 {
					out.RawByte(',')
				}
				out.String(string(v101))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncludedNetwork) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncludedNetwork) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncludedNetwork) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore18(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(in *jlexer.Lexer, out *Include) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(out *jwriter.Writer, in Include) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Include) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Include) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Include) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Include) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore19(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(in *jlexer.Lexer, out *Identity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "avatar_file":
			out.AvatarFile = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v102 string
					v102 = string(in.String())
					(out.Vars)[key] = v102
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v103 string
					v103 = string(in.String())
					(out.Tags)[key] = v103
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(out *jwriter.Writer, in Identity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Firstname != "" {
		const prefix string = ",\"firstname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Firstname))
	}
	if in.Lastname != "" {
		const prefix string = ",\"lastname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Lastname))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.AvatarFile != "" {
		const prefix string = ",\"avatar_file\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarFile))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v104First := true
			for v104Name, v104Value := range in.Vars {
				if v104First {
					v104First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v104Name))
				out.RawByte(':')
				out.String(string(v104Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v105First := true
			for v105Name, v105Value := range in.Tags {
				if v105First {
					v105First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v105Name))
				out.RawByte(':')
				out.String(string(v105Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Identity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Identity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Identity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Identity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore20(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(in *jlexer.Lexer, out *IO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stdin":
			out.Stdin = string(in.String())
		case "stdout":
			out.Stdout = string(in.String())
		case "stderr":
			out.Stderr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(out *jwriter.Writer, in IO) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Stdin != "" {
		const prefix string = ",\"stdin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stdin))
	}
	if in.Stdout != "" {
		const prefix string = ",\"stdout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stdout))
	}
	if in.Stderr != "" {
		const prefix string = ",\"stderr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Stderr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore21(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(in *jlexer.Lexer, out *HostDependency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.HostID = string(in.String())
		case "network":
			out.NetworkID = string(in.String())
		case "step":
			out.Step = string(in.String())
		case "step_id":
			out.StepID = int(in.Int())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(out *jwriter.Writer, in HostDependency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.HostID != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HostID))
	}
	if in.NetworkID != "" {
		const prefix string = ",\"network\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NetworkID))
	}
	if in.Step != "" {
		const prefix string = ",\"step\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Step))
	}
	if in.StepID != 0 {
		const prefix string = ",\"step_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StepID))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HostDependency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HostDependency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HostDependency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HostDependency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore22(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(in *jlexer.Lexer, out *Host) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "ami":
			out.AMI = string(in.String())
		case "last_octet":
			out.LastOctet = int(in.Int())
		case "instance_size":
			out.InstanceSize = string(in.String())
		case "disk":
			(out.Disk).UnmarshalEasyJSON(in)
		case "provision_steps":
			if in.IsNull() {
				in.Skip()
				out.ProvisionSteps = nil
			} else {
				in.Delim('[')
				if out.ProvisionSteps == nil {
					if !in.IsDelim(']') {
						out.ProvisionSteps = make([]string, 0, 4)
					} else {
						out.ProvisionSteps = []string{}
					}
				} else {
					out.ProvisionSteps = (out.ProvisionSteps)[:0]
				}
				for !in.IsDelim(']') {
					var v106 string
					v106 = string(in.String())
					out.ProvisionSteps = append(out.ProvisionSteps, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_tcp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedTCPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedTCPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedTCPPorts = make([]string, 0, 4)
					} else {
						out.ExposedTCPPorts = []string{}
					}
				} else {
					out.ExposedTCPPorts = (out.ExposedTCPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v107 string
					v107 = string(in.String())
					out.ExposedTCPPorts = append(out.ExposedTCPPorts, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exposed_udp_ports":
			if in.IsNull() {
				in.Skip()
				out.ExposedUDPPorts = nil
			} else {
				in.Delim('[')
				if out.ExposedUDPPorts == nil {
					if !in.IsDelim(']') {
						out.ExposedUDPPorts = make([]string, 0, 4)
					} else {
						out.ExposedUDPPorts = []string{}
					}
				} else {
					out.ExposedUDPPorts = (out.ExposedUDPPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v108 string
					v108 = string(in.String())
					out.ExposedUDPPorts = append(out.ExposedUDPPorts, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "override_password":
			out.OverridePassword = string(in.String())
		case "user_groups":
			if in.IsNull() {
				in.Skip()
				out.UserGroups = nil
			} else {
				in.Delim('[')
				if out.UserGroups == nil {
					if !in.IsDelim(']') {
						out.UserGroups = make([]string, 0, 4)
					} else {
						out.UserGroups = []string{}
					}
				} else {
					out.UserGroups = (out.UserGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v109 string
					v109 = string(in.String())
					out.UserGroups = append(out.UserGroups, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "depends_on":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]*HostDependency, 0, 8)
					} else {
						out.Dependencies = []*HostDependency{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v110 *HostDependency
					if in.IsNull() {
						in.Skip()
						v110 = nil
					} else {
						if v110 == nil {
							v110 = new(HostDependency)
						}
						(*v110).UnmarshalEasyJSON(in)
					}
					out.Dependencies = append(out.Dependencies, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v111 string
					v111 = string(in.String())
					(out.Vars)[key] = v111
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v112 string
					v112 = string(in.String())
					(out.Tags)[key] = v112
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(out *jwriter.Writer, in Host) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Hostname != "" {
		const prefix string = ",\"hostname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Hostname))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.AMI != "" {
		const prefix string = ",\"ami\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AMI))
	}
	if in.LastOctet != 0 {
		const prefix string = ",\"last_octet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastOctet))
	}
	if in.InstanceSize != "" {
		const prefix string = ",\"instance_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InstanceSize))
	}
	if true {
		const prefix string = ",\"disk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Disk).MarshalEasyJSON(out)
	}
	if len(in.ProvisionSteps) != 0 {
		const prefix string = ",\"provision_steps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.ProvisionSteps {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.String(string(v114))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedTCPPorts) != 0 {
		const prefix string = ",\"exposed_tcp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v115, v116 := range in.ExposedTCPPorts {
				if v115 > 0 {
					out.RawByte(',')
				}
				out.String(string(v116))
			}
			out.RawByte(']')
		}
	}
	if len(in.ExposedUDPPorts) != 0 {
		const prefix string = ",\"exposed_udp_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v117, v118 := range in.ExposedUDPPorts {
				if v117 > 0 {
					out.RawByte(',')
				}
				out.String(string(v118))
			}
			out.RawByte(']')
		}
	}
	if in.OverridePassword != "" {
		const prefix string = ",\"override_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OverridePassword))
	}
	if len(in.UserGroups) != 0 {
		const prefix string = ",\"user_groups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v119, v120 := range in.UserGroups {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.String(string(v120))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"depends_on\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v121, v122 := range in.Dependencies {
				if v121 > 0 {
					out.RawByte(',')
				}
				if v122 == nil {
					out.RawString("null")
				} else {
					(*v122).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v123First := true
			for v123Name, v123Value := range in.Vars {
				if v123First {
					v123First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v123Name))
				out.RawByte(':')
				out.String(string(v123Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v124First := true
			for v124Name, v124Value := range in.Tags {
				if v124First {
					v124First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v124Name))
				out.RawByte(':')
				out.String(string(v124Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Host) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Host) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Host) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Host) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore23(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(in *jlexer.Lexer, out *Finding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "severity":
			out.Severity = FindingSeverity(in.Int())
		case "difficulty":
			out.Difficulty = FindingDifficulty(in.Int())
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v125 string
					v125 = string(in.String())
					out.Tags = append(out.Tags, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(out *jwriter.Writer, in Finding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Severity != 0 {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Severity))
	}
	if in.Difficulty != 0 {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Difficulty))
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v126, v127 := range in.Tags {
				if v126 > 0 {
					out.RawByte(',')
				}
				out.String(string(v127))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Finding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Finding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Finding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Finding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore24(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(in *jlexer.Lexer, out *Environment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "competition_id":
			out.CompetitionID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "builder":
			out.Builder = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "admin_ranges":
			if in.IsNull() {
				in.Skip()
				out.AdminCIDRs = nil
			} else {
				in.Delim('[')
				if out.AdminCIDRs == nil {
					if !in.IsDelim(']') {
						out.AdminCIDRs = make([]string, 0, 4)
					} else {
						out.AdminCIDRs = []string{}
					}
				} else {
					out.AdminCIDRs = (out.AdminCIDRs)[:0]
				}
				for !in.IsDelim(']') {
					var v128 string
					v128 = string(in.String())
					out.AdminCIDRs = append(out.AdminCIDRs, v128)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v129 string
					v129 = string(in.String())
					(out.Config)[key] = v129
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v130 string
					v130 = string(in.String())
					(out.Tags)[key] = v130
					in.WantComma()
				}
				in.Delim('}')
			}
		case "included_networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]*IncludedNetwork, 0, 8)
					} else {
						out.Networks = []*IncludedNetwork{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v131 *IncludedNetwork
					if in.IsNull() {
						in.Skip()
						v131 = nil
					} else {
						if v131 == nil {
							v131 = new(IncludedNetwork)
						}
						(*v131).UnmarshalEasyJSON(in)
					}
					out.Networks = append(out.Networks, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "base_dir":
			out.BaseDir = string(in.String())
		case "revision":
			out.Revision = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(out *jwriter.Writer, in Environment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.CompetitionID != "" {
		const prefix string = ",\"competition_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompetitionID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Builder != "" {
		const prefix string = ",\"builder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Builder))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.AdminCIDRs) != 0 {
		const prefix string = ",\"admin_ranges\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v132, v133 := range in.AdminCIDRs {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.String(string(v133))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v134First := true
			for v134Name, v134Value := range in.Config {
				if v134First {
					v134First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v134Name))
				out.RawByte(':')
				out.String(string(v134Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v135First := true
			for v135Name, v135Value := range in.Tags {
				if v135First {
					v135First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v135Name))
				out.RawByte(':')
				out.String(string(v135Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Networks) != 0 {
		const prefix string = ",\"included_networks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v136, v137 := range in.Networks {
				if v136 > 0 {
					out.RawByte(',')
				}
				if v137 == nil {
					out.RawString("null")
				} else {
					(*v137).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Environment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Environment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Environment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Environment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore25(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(in *jlexer.Lexer, out *Disk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(out *jwriter.Writer, in Disk) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Disk) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Disk) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Disk) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Disk) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore26(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(in *jlexer.Lexer, out *DNSRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v138 string
					v138 = string(in.String())
					out.Values = append(out.Values, v138)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			out.Type = string(in.String())
		case "zone":
			out.Zone = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v139 string
					v139 = string(in.String())
					(out.Vars)[key] = v139
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v140 string
					v140 = string(in.String())
					(out.Tags)[key] = v140
					in.WantComma()
				}
				in.Delim('}')
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(out *jwriter.Writer, in DNSRecord) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.Values {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Zone != "" {
		const prefix string = ",\"zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zone))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v143First := true
			for v143Name, v143Value := range in.Vars {
				if v143First {
					v143First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v143Name))
				out.RawByte(':')
				out.String(string(v143Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v144First := true
			for v144Name, v144Value := range in.Tags {
				if v144First {
					v144First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v144Name))
				out.RawByte(':')
				out.String(string(v144Value))
			}
			out.RawByte('}')
		}
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNSRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNSRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNSRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNSRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore27(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(in *jlexer.Lexer, out *DNS) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "root_domain":
			out.RootDomain = string(in.String())
		case "dns_servers":
			if in.IsNull() {
				in.Skip()
				out.DNSServers = nil
			} else {
				in.Delim('[')
				if out.DNSServers == nil {
					if !in.IsDelim(']') {
						out.DNSServers = make([]string, 0, 4)
					} else {
						out.DNSServers = []string{}
					}
				} else {
					out.DNSServers = (out.DNSServers)[:0]
				}
				for !in.IsDelim(']') {
					var v145 string
					v145 = string(in.String())
					out.DNSServers = append(out.DNSServers, v145)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ntp_servers":
			if in.IsNull() {
				in.Skip()
				out.NTPServers = nil
			} else {
				in.Delim('[')
				if out.NTPServers == nil {
					if !in.IsDelim(']') {
						out.NTPServers = make([]string, 0, 4)
					} else {
						out.NTPServers = []string{}
					}
				} else {
					out.NTPServers = (out.NTPServers)[:0]
				}
				for !in.IsDelim(']') {
					var v146 string
					v146 = string(in.String())
					out.NTPServers = append(out.NTPServers, v146)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v147 string
					v147 = string(in.String())
					(out.Config)[key] = v147
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(out *jwriter.Writer, in DNS) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.RootDomain != "" {
		const prefix string = ",\"root_domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootDomain))
	}
	if len(in.DNSServers) != 0 {
		const prefix string = ",\"dns_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v148, v149 := range in.DNSServers {
				if v148 > 0 {
					out.RawByte(',')
				}
				out.String(string(v149))
			}
			out.RawByte(']')
		}
	}
	if len(in.NTPServers) != 0 {
		const prefix string = ",\"ntp_servers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v150, v151 := range in.NTPServers {
				if v150 > 0 {
					out.RawByte(',')
				}
				out.String(string(v151))
			}
			out.RawByte(']')
		}
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v152First := true
			for v152Name, v152Value := range in.Config {
				if v152First {
					v152First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v152Name))
				out.RawByte(':')
				out.String(string(v152Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DNS) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DNS) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DNS) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DNS) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore28(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(in *jlexer.Lexer, out *Connection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "local_addr":
			out.LocalAddr = string(in.String())
		case "remote_addr":
			out.RemoteAddr = string(in.String())
		case "resource_name":
			out.ResourceName = string(in.String())
		case "ssh":
			if in.IsNull() {
				in.Skip()
				out.SSHAuthConfig = nil
			} else {
				if out.SSHAuthConfig == nil {
					out.SSHAuthConfig = new(SSHAuthConfig)
				}
				(*out.SSHAuthConfig).UnmarshalEasyJSON(in)
			}
		case "winrm":
			if in.IsNull() {
				in.Skip()
				out.WinRMAuthConfig = nil
			} else {
				if out.WinRMAuthConfig == nil {
					out.WinRMAuthConfig = new(WinRMAuthConfig)
				}
				(*out.WinRMAuthConfig).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(out *jwriter.Writer, in Connection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Active {
		const prefix string = ",\"active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Active))
	}
	if in.LocalAddr != "" {
		const prefix string = ",\"local_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalAddr))
	}
	if in.RemoteAddr != "" {
		const prefix string = ",\"remote_addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RemoteAddr))
	}
	if in.ResourceName != "" {
		const prefix string = ",\"resource_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceName))
	}
	if in.SSHAuthConfig != nil {
		const prefix string = ",\"ssh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SSHAuthConfig).MarshalEasyJSON(out)
	}
	if in.WinRMAuthConfig != nil {
		const prefix string = ",\"winrm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WinRMAuthConfig).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Connection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Connection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Connection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Connection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore29(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(in *jlexer.Lexer, out *Competition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "base_dir":
			out.BaseDir = string(in.String())
		case "root_password":
			out.RootPassword = string(in.String())
		case "dns":
			if in.IsNull() {
				in.Skip()
				out.DNS = nil
			} else {
				if out.DNS == nil {
					out.DNS = new(DNS)
				}
				(*out.DNS).UnmarshalEasyJSON(in)
			}
		case "remote":
			if in.IsNull() {
				in.Skip()
				out.Remote = nil
			} else {
				if out.Remote == nil {
					out.Remote = new(Remote)
				}
				(*out.Remote).UnmarshalEasyJSON(in)
			}
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v153 string
					v153 = string(in.String())
					(out.Config)[key] = v153
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(out *jwriter.Writer, in Competition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.BaseDir != "" {
		const prefix string = ",\"base_dir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseDir))
	}
	if in.RootPassword != "" {
		const prefix string = ",\"root_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootPassword))
	}
	if in.DNS != nil {
		const prefix string = ",\"dns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.DNS).MarshalEasyJSON(out)
	}
	if in.Remote != nil {
		const prefix string = ",\"remote\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Remote).MarshalEasyJSON(out)
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v154First := true
			for v154Name, v154Value := range in.Config {
				if v154First {
					v154First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v154Name))
				out.RawByte(':')
				out.String(string(v154Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Competition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Competition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Competition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Competition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore30(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "program":
			out.Program = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.Args = append(out.Args, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ignore_errors":
			out.IgnoreErrors = bool(in.Bool())
		case "cooldown":
			out.Cooldown = int(in.Int())
		case "io":
			if in.IsNull() {
				in.Skip()
				out.IO = nil
			} else {
				if out.IO == nil {
					out.IO = new(IO)
				}
				(*out.IO).UnmarshalEasyJSON(in)
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v156 string
					v156 = string(in.String())
					(out.Vars)[key] = v156
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v157 string
					v157 = string(in.String())
					(out.Tags)[key] = v157
					in.WantComma()
				}
				in.Delim('}')
			}
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Program != "" {
		const prefix string = ",\"program\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Program))
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v158, v159 := range in.Args {
				if v158 > 0 {
					out.RawByte(',')
				}
				out.String(string(v159))
			}
			out.RawByte(']')
		}
	}
	if in.IgnoreErrors {
		const prefix string = ",\"ignore_errors\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IgnoreErrors))
	}
	if in.Cooldown != 0 {
		const prefix string = ",\"cooldown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cooldown))
	}
	if in.IO != nil {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IO).MarshalEasyJSON(out)
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v160First := true
			for v160Name, v160Value := range in.Vars {
				if v160First {
					v160First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v160Name))
				out.RawByte(':')
				out.String(string(v160Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v161First := true
			for v161Name, v161Value := range in.Tags {
				if v161First {
					v161First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v161Name))
				out.RawByte(':')
				out.String(string(v161Value))
			}
			out.RawByte('}')
		}
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore31(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(in *jlexer.Lexer, out *Build) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "team_count":
			out.TeamCount = int(in.Int())
		case "config":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Config = make(map[string]string)
				} else {
					out.Config = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v162 string
					v162 = string(in.String())
					(out.Config)[key] = v162
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v163 string
					v163 = string(in.String())
					(out.Tags)[key] = v163
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		case "revision":
			out.Revision = int64(in.Int64())
		case "on_conflict":
			if in.IsNull() {
				in.Skip()
				out.OnConflict = nil
			} else {
				if out.OnConflict == nil {
					out.OnConflict = new(OnConflict)
				}
				(*out.OnConflict).UnmarshalEasyJSON(in)
			}
		case "path_from_base":
			out.PathFromBase = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(out *jwriter.Writer, in Build) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.TeamCount != 0 {
		const prefix string = ",\"team_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TeamCount))
	}
	if len(in.Config) != 0 {
		const prefix string = ",\"config\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v164First := true
			for v164Name, v164Value := range in.Config {
				if v164First {
					v164First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v164Name))
				out.RawByte(':')
				out.String(string(v164Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v165First := true
			for v165Name, v165Value := range in.Tags {
				if v165First {
					v165First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v165Name))
				out.RawByte(':')
				out.String(string(v165Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Revision))
	}
	if in.OnConflict != nil {
		const prefix string = ",\"on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OnConflict).MarshalEasyJSON(out)
	}
	if in.PathFromBase != "" {
		const prefix string = ",\"path_from_base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PathFromBase))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Build) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Build) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Build) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Build) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore32(l, v)
}
func easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(in *jlexer.Lexer, out *AMI) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "provider":
			out.Provider = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "vars":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Vars = make(map[string]string)
				} else {
					out.Vars = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v166 string
					v166 = string(in.String())
					(out.Vars)[key] = v166
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v167 string
					v167 = string(in.String())
					(out.Tags)[key] = v167
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maintainer":
			if in.IsNull() {
				in.Skip()
				out.Maintainer = nil
			} else {
				if out.Maintainer == nil {
					out.Maintainer = new(User)
				}
				(*out.Maintainer).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(out *jwriter.Writer, in AMI) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Provider != "" {
		const prefix string = ",\"provider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Provider))
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if len(in.Vars) != 0 {
		const prefix string = ",\"vars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v168First := true
			for v168Name, v168Value := range in.Vars {
				if v168First {
					v168First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v168Name))
				out.RawByte(':')
				out.String(string(v168Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v169First := true
			for v169Name, v169Value := range in.Tags {
				if v169First {
					v169First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v169Name))
				out.RawByte(':')
				out.String(string(v169Value))
			}
			out.RawByte('}')
		}
	}
	if in.Maintainer != nil {
		const prefix string = ",\"maintainer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Maintainer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AMI) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AMI) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA5722a85EncodeGithubComGen0cideLaforgeCore33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AMI) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AMI) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA5722a85DecodeGithubComGen0cideLaforgeCore33(l, v)
}
