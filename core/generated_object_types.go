// Code generated by renum (github.com/gen0cide/renum)
// DO NOT EDIT!

package core

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

// ObjectType is a generated type alias for the ObjectType enum.
type ObjectType int

const (
	// ObjectTypeUnknown is an enum value for type ObjectType.
	// ObjectTypeUnknown is the default value for enum type ObjectType. It is meant to be a placeholder and default for unknown values.
	// This value is a default placeholder for any unknown type for the core.ObjectType enum.
	ObjectTypeUnknown ObjectType = iota

	// ObjectTypeBuild is an enum value for type ObjectType.
	// Build is a type of Laforge object that describes the current and goal state of an environment configuration as realized by a builder implementation.
	ObjectTypeBuild

	// ObjectTypeCompetition is an enum value for type ObjectType.
	// Competition is a type of Laforge object that describes the root configuration object for a Laforge configuration directory.
	ObjectTypeCompetition

	// ObjectTypeCommand is an enum value for type ObjectType.
	// Command is a type of Laforge object that describes a single command to be run during provisioning.
	ObjectTypeCommand

	// ObjectTypeDNSRecord is an enum value for type ObjectType.
	// DNSRecord is a type of Laforge object that describes a DNS record that needs to be created in the root DNS of the environment.
	ObjectTypeDNSRecord

	// ObjectTypeEnvironment is an enum value for type ObjectType.
	// Environment is a type of Laforge object that describes a single, atomic configuration with an isolated state.
	ObjectTypeEnvironment

	// ObjectTypeHost is an enum value for type ObjectType.
	// Host is a type of Laforge object that describes a buildable configuration of a machine.
	ObjectTypeHost

	// ObjectTypeIdentity is an enum value for type ObjectType.
	// Identity is a type of Laforge object that describes a user, employee, or account on the built network.
	ObjectTypeIdentity

	// ObjectTypeNetwork is an enum value for type ObjectType.
	// Network is a type of Laforge object that describes a buildable subnet within an environment, containing many Hosts.
	ObjectTypeNetwork

	// ObjectTypeRemoteFile is an enum value for type ObjectType.
	// RemoteFile is a type of Laforge object that describes a provisioning step where a file is uploaded to the target Host.
	ObjectTypeRemoteFile

	// ObjectTypeScript is an enum value for type ObjectType.
	// Script is a type of Laforge object that describes a provisioning step where a script is uploaded and executed on the target Host.
	ObjectTypeScript

	// ObjectTypeTeam is an enum value for type ObjectType.
	// Team is a type of Laforge object that defines an isolated pod that exists within an environment, by which all network and host configurations are cloned.
	ObjectTypeTeam

	// ObjectTypeUser is an enum value for type ObjectType.
	// User is a type of Laforge object that defines an operator of the Laforge framework.
	ObjectTypeUser

	// ObjectTypeAMI is an enum value for type ObjectType.
	// AMI is a type of Laforge object that defines a reference to a custom image within an infrastructure provider.
	ObjectTypeAMI

	// ObjectTypeProvisionedHost is an enum value for type ObjectType.
	// ProvisionedHost is a type of Laforge object that defines a deployed Host configuration, contained within an Environment's ecology.
	ObjectTypeProvisionedHost

	// ObjectTypeProvisionedNetwork is an enum value for type ObjectType.
	// ProvisionedNetwork is a type of Laforge object that defines a deployed Network configuration, contained within an Environment ecology.
	ObjectTypeProvisionedNetwork

	// ObjectTypeProvisioningStep is an enum value for type ObjectType.
	// ProvisioningStep is a type of Laforge object that defines an action Laforge is required to take to advance the a build towards the desired state.
	ObjectTypeProvisioningStep

	// ObjectTypeConnection is an enum value for type ObjectType.
	// Connection is a type of Laforge object that defines the parameters by which the Laforge provisioner can use to make a remote connection to a provisioned host.
	ObjectTypeConnection

	// ObjectTypeIncluded is an enum value for type ObjectType.
	// Included is a classification of Laforge objects that help the compiler understand if the what hosts and networks should be included in an environment.
	ObjectTypeIncluded

	_ObjectTypeNamespace = `github.com.gen0cide.laforge.core`
	_ObjectTypePkgName   = `core`
	_ObjectTypePkgPath   = `github.com/gen0cide/laforge/core`
)

const _ObjectTypeName = "unknownbuildcompetitioncommanddns_recordenvironmenthostidentitynetworkremote_filescriptteamuseramiprovisioned_hostprovisioned_networkprovisioning_stepconnectionincluded"

var _ObjectTypeNames = []string{
	_ObjectTypeName[0:7],
	_ObjectTypeName[7:12],
	_ObjectTypeName[12:23],
	_ObjectTypeName[23:30],
	_ObjectTypeName[30:40],
	_ObjectTypeName[40:51],
	_ObjectTypeName[51:55],
	_ObjectTypeName[55:63],
	_ObjectTypeName[63:70],
	_ObjectTypeName[70:81],
	_ObjectTypeName[81:87],
	_ObjectTypeName[87:91],
	_ObjectTypeName[91:95],
	_ObjectTypeName[95:98],
	_ObjectTypeName[98:114],
	_ObjectTypeName[114:133],
	_ObjectTypeName[133:150],
	_ObjectTypeName[150:160],
	_ObjectTypeName[160:168],
}

// ObjectTypeNames returns a list of possible string values of ObjectType.
func ObjectTypeNames() []string {
	tmp := make([]string, len(_ObjectTypeNames))
	copy(tmp, _ObjectTypeNames)
	return tmp
}

var _ObjectTypeMap = map[ObjectType]string{
	0:  _ObjectTypeName[0:7],
	1:  _ObjectTypeName[7:12],
	2:  _ObjectTypeName[12:23],
	3:  _ObjectTypeName[23:30],
	4:  _ObjectTypeName[30:40],
	5:  _ObjectTypeName[40:51],
	6:  _ObjectTypeName[51:55],
	7:  _ObjectTypeName[55:63],
	8:  _ObjectTypeName[63:70],
	9:  _ObjectTypeName[70:81],
	10: _ObjectTypeName[81:87],
	11: _ObjectTypeName[87:91],
	12: _ObjectTypeName[91:95],
	13: _ObjectTypeName[95:98],
	14: _ObjectTypeName[98:114],
	15: _ObjectTypeName[114:133],
	16: _ObjectTypeName[133:150],
	17: _ObjectTypeName[150:160],
	18: _ObjectTypeName[160:168],
}

// String implements the Stringer interface.
func (x ObjectType) String() string {
	if str, ok := _ObjectTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ObjectType(%d)", x)
}

var _ObjectTypeKinds = map[ObjectType]string{
	ObjectTypeUnknown:            `core.ObjectTypeUnknown`,
	ObjectTypeBuild:              `core.ObjectTypeBuild`,
	ObjectTypeCompetition:        `core.ObjectTypeCompetition`,
	ObjectTypeCommand:            `core.ObjectTypeCommand`,
	ObjectTypeDNSRecord:          `core.ObjectTypeDNSRecord`,
	ObjectTypeEnvironment:        `core.ObjectTypeEnvironment`,
	ObjectTypeHost:               `core.ObjectTypeHost`,
	ObjectTypeIdentity:           `core.ObjectTypeIdentity`,
	ObjectTypeNetwork:            `core.ObjectTypeNetwork`,
	ObjectTypeRemoteFile:         `core.ObjectTypeRemoteFile`,
	ObjectTypeScript:             `core.ObjectTypeScript`,
	ObjectTypeTeam:               `core.ObjectTypeTeam`,
	ObjectTypeUser:               `core.ObjectTypeUser`,
	ObjectTypeAMI:                `core.ObjectTypeAMI`,
	ObjectTypeProvisionedHost:    `core.ObjectTypeProvisionedHost`,
	ObjectTypeProvisionedNetwork: `core.ObjectTypeProvisionedNetwork`,
	ObjectTypeProvisioningStep:   `core.ObjectTypeProvisioningStep`,
	ObjectTypeConnection:         `core.ObjectTypeConnection`,
	ObjectTypeIncluded:           `core.ObjectTypeIncluded`,
}

// Kind returns a string of the Go type for the given message.
func (x ObjectType) Kind() string {
	if str, ok := _ObjectTypeKinds[x]; ok {
		return str
	}

	if str, ok := _ObjectTypeKinds[ObjectTypeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("ObjectType(%d)", x)
}

var _ObjectTypeSources = map[ObjectType]string{
	ObjectTypeUnknown:            `github.com/gen0cide/laforge/core.ObjectTypeUnknown`,
	ObjectTypeBuild:              `github.com/gen0cide/laforge/core.ObjectTypeBuild`,
	ObjectTypeCompetition:        `github.com/gen0cide/laforge/core.ObjectTypeCompetition`,
	ObjectTypeCommand:            `github.com/gen0cide/laforge/core.ObjectTypeCommand`,
	ObjectTypeDNSRecord:          `github.com/gen0cide/laforge/core.ObjectTypeDNSRecord`,
	ObjectTypeEnvironment:        `github.com/gen0cide/laforge/core.ObjectTypeEnvironment`,
	ObjectTypeHost:               `github.com/gen0cide/laforge/core.ObjectTypeHost`,
	ObjectTypeIdentity:           `github.com/gen0cide/laforge/core.ObjectTypeIdentity`,
	ObjectTypeNetwork:            `github.com/gen0cide/laforge/core.ObjectTypeNetwork`,
	ObjectTypeRemoteFile:         `github.com/gen0cide/laforge/core.ObjectTypeRemoteFile`,
	ObjectTypeScript:             `github.com/gen0cide/laforge/core.ObjectTypeScript`,
	ObjectTypeTeam:               `github.com/gen0cide/laforge/core.ObjectTypeTeam`,
	ObjectTypeUser:               `github.com/gen0cide/laforge/core.ObjectTypeUser`,
	ObjectTypeAMI:                `github.com/gen0cide/laforge/core.ObjectTypeAMI`,
	ObjectTypeProvisionedHost:    `github.com/gen0cide/laforge/core.ObjectTypeProvisionedHost`,
	ObjectTypeProvisionedNetwork: `github.com/gen0cide/laforge/core.ObjectTypeProvisionedNetwork`,
	ObjectTypeProvisioningStep:   `github.com/gen0cide/laforge/core.ObjectTypeProvisioningStep`,
	ObjectTypeConnection:         `github.com/gen0cide/laforge/core.ObjectTypeConnection`,
	ObjectTypeIncluded:           `github.com/gen0cide/laforge/core.ObjectTypeIncluded`,
}

// Source returns an import path directly to the type.
func (x ObjectType) Source() string {
	if str, ok := _ObjectTypeSources[x]; ok {
		return str
	}

	if str, ok := _ObjectTypeSources[ObjectTypeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("ObjectType(%d)", x)
}

var _ObjectTypePaths = map[ObjectType]string{
	ObjectTypeUnknown:            `github.com.gen0cide.laforge.core.object_type_unknown`,
	ObjectTypeBuild:              `github.com.gen0cide.laforge.core.object_type_build`,
	ObjectTypeCompetition:        `github.com.gen0cide.laforge.core.object_type_competition`,
	ObjectTypeCommand:            `github.com.gen0cide.laforge.core.object_type_command`,
	ObjectTypeDNSRecord:          `github.com.gen0cide.laforge.core.object_type_dns_record`,
	ObjectTypeEnvironment:        `github.com.gen0cide.laforge.core.object_type_environment`,
	ObjectTypeHost:               `github.com.gen0cide.laforge.core.object_type_host`,
	ObjectTypeIdentity:           `github.com.gen0cide.laforge.core.object_type_identity`,
	ObjectTypeNetwork:            `github.com.gen0cide.laforge.core.object_type_network`,
	ObjectTypeRemoteFile:         `github.com.gen0cide.laforge.core.object_type_remote_file`,
	ObjectTypeScript:             `github.com.gen0cide.laforge.core.object_type_script`,
	ObjectTypeTeam:               `github.com.gen0cide.laforge.core.object_type_team`,
	ObjectTypeUser:               `github.com.gen0cide.laforge.core.object_type_user`,
	ObjectTypeAMI:                `github.com.gen0cide.laforge.core.object_type_ami`,
	ObjectTypeProvisionedHost:    `github.com.gen0cide.laforge.core.object_type_provisioned_host`,
	ObjectTypeProvisionedNetwork: `github.com.gen0cide.laforge.core.object_type_provisioned_network`,
	ObjectTypeProvisioningStep:   `github.com.gen0cide.laforge.core.object_type_provisioning_step`,
	ObjectTypeConnection:         `github.com.gen0cide.laforge.core.object_type_connection`,
	ObjectTypeIncluded:           `github.com.gen0cide.laforge.core.object_type_included`,
}

// Source returns an import path directly to the type.
func (x ObjectType) Path() string {
	if str, ok := _ObjectTypePaths[x]; ok {
		return str
	}

	if str, ok := _ObjectTypePaths[ObjectTypeUnknown]; ok {
		return str
	}

	return fmt.Sprintf("github.com.gen0cide.laforge.core.object_type_out_of_bounds_enum_%d", x)
}

// PackageName returns the name of the parent package for this type.
func (x ObjectType) PackageName() string {
	return _ObjectTypePkgName
}

// ImportPath returns the full import path of the parent package
func (x ObjectType) ImportPath() string {
	return _ObjectTypePkgPath
}

// Namespace implements the emitter.Namespaced interface.
func (x ObjectType) Namespace() string {
	return _ObjectTypeNamespace
}

var _ObjectTypeValue = map[string]ObjectType{
	_ObjectTypeName[0:7]:     0,
	_ObjectTypeName[7:12]:    1,
	_ObjectTypeName[12:23]:   2,
	_ObjectTypeName[23:30]:   3,
	_ObjectTypeName[30:40]:   4,
	_ObjectTypeName[40:51]:   5,
	_ObjectTypeName[51:55]:   6,
	_ObjectTypeName[55:63]:   7,
	_ObjectTypeName[63:70]:   8,
	_ObjectTypeName[70:81]:   9,
	_ObjectTypeName[81:87]:   10,
	_ObjectTypeName[87:91]:   11,
	_ObjectTypeName[91:95]:   12,
	_ObjectTypeName[95:98]:   13,
	_ObjectTypeName[98:114]:  14,
	_ObjectTypeName[114:133]: 15,
	_ObjectTypeName[133:150]: 16,
	_ObjectTypeName[150:160]: 17,
	_ObjectTypeName[160:168]: 18,
}

// ParseObjectType attempts to convert a string to a ObjectType
func ParseObjectType(name string) (ObjectType, error) {
	if x, ok := _ObjectTypeValue[name]; ok {
		return x, nil
	}
	return ObjectType(0), fmt.Errorf("%s is not a valid ObjectType, try [%s]", name, strings.Join(_ObjectTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x *ObjectType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ObjectType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseObjectType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Scan implements the Scanner interface.
func (x *ObjectType) Scan(value interface{}) error {
	var name string

	switch v := value.(type) {
	case string:
		name = v
	case []byte:
		name = string(v)
	case nil:
		*x = ObjectType(0)
		return nil
	}

	tmp, err := ParseObjectType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Value implements the driver Valuer interface.
func (x ObjectType) Value() (driver.Value, error) {
	return x.String(), nil
}

// LookupObjectType attempts to convert a int to it's equivelent ObjectType value.
func LookupObjectType(id int) (ObjectType, error) {
	if _, ok := _ObjectTypeMap[ObjectType(id)]; ok {
		return ObjectType(id), nil
	}
	return ObjectType(0), fmt.Errorf("%T(%v) is not a valid ObjectType, try [%s]", id, id, strings.Join(_ObjectTypeNames, ", "))
}

// Code implements the Coder interface.
func (x ObjectType) Code() int {
	return int(x)
}

// MarshalJSON implements the json.Marshaler interface.
func (x *ObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (x *ObjectType) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return fmt.Errorf("error unmarshaling JSON value: %v", err)
	}
	tmp, err := ParseObjectType(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface.
func (x *ObjectType) MarshalYAML() (interface{}, error) {
	return x.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface.
func (x *ObjectType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return fmt.Errorf("error unmarshaling YAML value: %v", err)
	}

	tmp, err := ParseObjectType(s)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
