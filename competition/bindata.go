// Code generated by go-bindata.
// sources:
// templates/config.yml
// templates/env.yml
// DO NOT EDIT!

package competition

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\xf8\xa1\x7a\x0b\x30\xa3\x5b\x50\x0c\xed\x9b\x91\xd8\x8e\x86\xc4\x32\x6c\x65\x05\xf6\x22\xd0\xd2\x59\x62\x43\x93\xc2\x1d\x19\xcf\xfb\xf4\xc3\xc9\xea\x9a\xa1\xe8\x4b\x2d\x40\x00\xff\xdc\x1d\xef\xf7\x87\xcc\x7f\xf6\xcb\xf2\x1c\x8f\x66\x19\xb8\x23\x3c\x2e\xeb\x87\xf2\x69\x81\xbb\xe0\x0f\xb6\xd3\x1d\xfd\xab\xde\x0a\x0e\xd6\x11\xac\xa0\x73\x61\x6f\x1c\x62\xc0\x39\x24\x46\x13\x8e\x03\x45\x1b\x6d\xf0\x33\x8d\x9d\x3b\x07\xf2\xaf\x96\x83\x3f\x92\x8f\x02\xeb\x7b\x62\x1b\x11\x7b\xb2\x8c\x81\xc3\x40\x1c\x2d\x09\x0e\x1c\x8e\xe8\x89\x49\xf3\x34\xf5\xe6\x06\xf7\x25\xd6\x65\x85\x79\x55\x2d\x9e\x36\x15\xaa\x12\xdb\xe7\x35\x1e\xe7\xcb\x72\xbb\x5a\xe0\x73\x51\x3d\x94\xcf\x15\xee\xca\xf5\xb2\x58\x3d\x6f\x8b\xf5\x4a\xf3\x00\x54\x0f\xc5\x0e\xcb\xe2\x71\x81\x9b\x9b\xec\xe7\x99\xb8\x22\x35\xc7\xfc\xf3\x6e\xe2\x2d\xb1\x51\x3e\xb2\x1c\x1b\x0e\xaf\xb6\xa5\x0b\x55\x1a\x30\xdf\x14\x68\x98\x5a\xf2\xd1\x1a\x27\x23\xfe\xcc\x9c\xa4\xd6\x45\xf9\x94\x01\x66\xb0\xf5\x0b\x9d\x3f\xe1\xdd\xbb\x69\x26\xd4\x30\xc5\x71\xe1\xaa\x06\x57\x21\x74\x8e\x70\xe7\x42\x6a\xbf\xeb\x74\x45\x9e\xd8\x44\x82\xc1\x1f\xbb\x72\xfd\xa6\xc9\x8b\xf2\x87\xc0\x58\xdd\x6d\x14\xc0\x2c\xcb\xb1\x4b\xc3\xe0\xce\x2a\x2a\xcc\x5e\x82\x4b\x91\x30\x98\xd8\xab\x2f\xe2\x57\xbb\x68\xe0\xdc\x49\x80\x7c\x8b\x1e\x38\x7c\xa1\x26\xc2\xfa\xb1\x9c\x96\xd5\xe5\xff\xd9\xa8\x6b\x86\x6f\x7c\xe8\x40\x8b\x4d\x84\x4c\xf9\xd7\xb3\xb1\x0d\x29\xd2\x87\x5b\x2c\xfe\x8e\xc4\xde\xb8\x1f\x6a\x67\xfe\x0b\xfd\x2b\x78\x42\x71\x9f\x4d\x37\x62\x9c\x9e\xac\x73\xd8\x13\x92\x50\xab\xe0\x1b\x26\x65\x91\xa9\x09\xdc\x0a\x8c\x73\xe1\x64\x7d\x97\xe5\x23\x54\x32\x72\x86\x69\x1a\x12\xd1\xe0\x3f\xef\x0b\x7c\x49\xc7\x01\x7d\x90\x28\x19\x4d\xad\xd4\xfc\xe1\xb6\xfe\x27\x78\xaa\x6d\x7b\x3d\xd0\xdd\xed\x77\xd0\xbe\x5e\xf7\x24\x24\xba\x1f\x03\x24\x06\x26\x48\x1c\x2d\xe0\x5b\x84\xd8\x13\x8f\x73\xdb\xc0\x88\x50\x14\x95\xf3\xc9\xbc\x10\x24\x31\x5d\x54\xde\xa7\xe6\x85\xa2\x3e\x0b\xc6\x31\x99\xf6\x3c\xe1\x6f\x67\x99\xdc\xd6\xcd\x78\xac\x8a\xc8\xd4\xd9\xe0\x27\x09\x2f\x49\xd7\x03\x9b\xb7\x47\xeb\x51\x6c\x44\xc7\xfe\xac\x23\x38\x2b\x91\xda\xf1\x5a\x5d\xa4\xe9\xcd\x2b\xe1\x90\x9c\x7b\x43\xbb\x1a\x4e\xbd\xcd\x94\xe5\x6f\x9d\x07\xeb\x0f\x6c\x24\x72\x6a\x62\x62\x9a\x8d\x8f\xd9\xc1\x32\x9d\x8c\x73\x32\xd2\x22\xd4\x24\xb6\xf1\x9c\xe5\xe8\x38\xa4\x41\x2e\xa7\x9c\x7a\x1b\x49\xcf\xd6\xda\x42\x63\x2b\xaa\xb7\x71\x0e\x43\x60\xe5\xce\x68\xb7\xb5\x1d\x46\x53\xff\x82\x5f\x7f\xfb\x7d\xf6\x7e\xf6\x7e\xf6\xf1\xe3\xbf\x01\x00\x00\xff\xff\xdc\x48\x3c\xc4\xb9\x05\x00\x00")

func configYmlBytes() ([]byte, error) {
	return bindataRead(
		_configYml,
		"config.yml",
	)
}

func configYml() (*asset, error) {
	bytes, err := configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _envYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xdf\x4f\xf2\x48\x14\x7d\xef\x5f\x71\xf2\x91\xec\x03\x09\x5d\xf8\x92\x6f\x37\xe9\x9b\x51\x40\x36\x08\x44\xab\x3e\x6c\x36\xcd\x30\xbd\xc0\xd5\x76\xa6\x3b\x33\xa5\xfe\x88\xff\xfb\x66\xa0\x62\x45\x7d\x50\x37\x01\xd2\x64\xee\x99\xfb\xeb\x9c\x7b\xd3\xb6\xbe\xfa\x0b\x5a\x2d\x8c\xc5\x40\x9b\x25\x61\x3c\x48\xfa\x93\x2b\x1c\x6b\xb5\xe0\xa5\xbf\xf0\x4f\xbc\x62\x8b\x05\x67\x04\xb6\x28\x15\xff\x5b\x12\x9c\xc6\xbd\x2e\x0d\xa4\xce\x0b\x72\xec\x58\x2b\x90\x5a\xb3\xd1\x2a\x27\xe5\xc2\x6d\x1c\x59\xc2\x5a\x64\x25\x59\x54\x9c\x65\xd0\x2a\xbb\x07\x2d\x16\x24\x1d\xf4\xfc\x86\xa4\xb3\x60\x05\xe7\x0b\x34\xa3\x7d\xb8\xcf\xd0\x6e\xe3\x64\x8a\xc9\x34\xc6\x51\x1c\xf7\xcf\x66\x31\xe2\x29\xce\x2f\x27\x18\x1f\x0d\xa6\xe7\xc3\x3e\xae\x47\xf1\xe9\xf4\x32\xc6\xf1\x74\x32\x18\x0d\x2f\xcf\x47\x93\xa1\x8f\x03\x10\x9f\x8e\x2e\x30\x18\x8d\xfb\x68\xb7\x83\xaf\x6b\xf3\x8d\xd0\x16\xfa\x2f\x94\x6a\x49\x4b\x23\xbc\x54\x81\x12\x39\x45\x78\x7c\x44\x38\x11\x39\xe1\xe9\x29\x28\x0c\x2d\xf8\x6e\x8b\xcd\x36\x67\x8f\x1e\xa8\xf1\xd1\x6c\xaf\x5f\x2e\x92\x6a\xc5\x8e\x32\xb6\x2e\x0a\x3a\xe8\xfd\xfc\x33\xfc\xe5\xff\x87\xea\xf0\xe8\xfa\x62\xaf\x45\x51\xd9\x44\x6e\x90\x28\x00\x24\xa7\x26\x42\xaf\x1b\xfe\x0a\xbb\x61\xf7\xf7\xde\x1f\x01\x60\x68\xc9\x5a\x45\x28\x6d\xa7\x22\xeb\x3a\x3f\x03\xe0\x41\x2b\x6a\x20\xe2\x50\x7c\x86\x5a\x2f\x33\xc2\x71\xa6\xcb\x74\x8f\xd8\x52\x16\x9f\x23\xd6\xdb\xe7\xd5\xeb\x1c\x8c\xd7\x19\x5b\x19\xe2\x4a\x18\x16\xf3\x8c\x6c\xb0\x7e\x3e\x79\x2e\x74\x27\xf2\x22\xa3\x08\xcf\xe8\xa1\xba\x9c\x69\x2f\x7a\xa9\x5c\x50\xe8\x34\x91\xfe\x14\xa1\x7b\xd8\x6e\x9a\x2b\x50\xe8\x34\x0a\x02\xe0\xab\x39\x81\x6d\xd6\x13\x9d\x0b\x56\x01\x90\x6e\x0e\x11\x96\x46\xa8\x54\xae\x84\xcd\x43\xa9\xf3\xef\x96\xf8\xab\xcc\x0b\x9c\x6a\xeb\x6c\x00\xdc\x94\x79\x91\xac\xbc\xe1\x47\x0d\x54\xac\x52\x5d\xd5\x06\x20\x72\x8e\xf0\xe3\x47\x6d\xed\x24\xdf\x9a\x96\x1f\x68\x77\x7b\x2b\x32\xfe\x7c\x54\xaa\x3e\x28\xb5\xf3\xfa\x1f\xf4\x7c\xd9\x6b\xe0\xd5\x66\xbf\xb7\xdb\xdf\xac\x37\x21\x57\x69\x73\x6b\xf1\xdb\x56\x62\x04\x80\xaa\x31\x5f\xb2\x53\xbf\x1a\x6a\xa2\xdb\x2f\x4c\x6d\xd8\x72\xfe\x3c\xf1\x1a\x29\x8c\x5e\x73\x4a\x2f\xfe\x7b\xed\xbf\x47\xc0\xa3\x8d\x81\x76\x36\xc6\xab\x3a\x40\x26\xac\x4b\xb4\x74\xd4\x98\x0b\x2b\x47\x46\x89\x2c\x91\xde\xd9\x46\xf8\xfb\x9f\xfa\x66\x25\x6c\x52\x94\xf3\x8c\x65\xc2\x45\x84\x85\xc8\x2c\xed\xca\x7f\x14\xc4\xca\x3a\xa1\x24\x25\xaf\xe6\x0d\x58\x69\xb8\x70\x4d\x4f\x4b\xb2\x34\xec\xee\x93\xa5\xd1\x65\xd1\xbc\x11\x69\xce\x2a\x29\x84\xb5\x95\x36\x69\x23\x49\x69\xc9\xbc\x75\x7f\x23\xce\x7b\xf2\xfc\x17\x00\x00\xff\xff\xd2\x35\x11\xf2\x81\x09\x00\x00")

func envYmlBytes() ([]byte, error) {
	return bindataRead(
		_envYml,
		"env.yml",
	)
}

func envYml() (*asset, error) {
	bytes, err := envYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "env.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yml": configYml,
	"env.yml": envYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yml": &bintree{configYml, map[string]*bintree{}},
	"env.yml": &bintree{envYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

