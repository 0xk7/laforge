###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

terraform {
  backend "etcdv3" {
    prefix = "state/{{ $.Build.ID }}/{{ $.Team.TeamNumber }}/terraform.tfstate"
    endpoints = [
      "https://{{ index $.Build.Config "etcd_master" }}",
      "https://{{ index $.Build.Config "etcd_slave" }}",
    ]
    username = "{{ index $.Build.Config "etcd_username" }}"
    password = "{{ index $.Build.Config "etcd_password" }}"
  }
}

variable "vmsize" {
  type = "map"
  default = {
    "small" = "n1-standard-1"
    "medium" = "n1-standard-2"
    "large" = "n1-standard-4"
    "xlarge" = "n1-standard-32"
  }
}

variable "vmos" {
  type = "map"
  default = {
    "ubuntu16" = "ubuntu-os-cloud/ubuntu-1604-lts"
    "ubuntu18" = "ubuntu-os-cloud/ubuntu-1604-lts"
    "centos7" = "centos-cloud/centos-7"
    "centos6" = "centos-cloud/centos-6"
    "debian8" = "ubuntu-os-cloud/ubuntu-minimal-1804-lts"
    "debian9" = "debian-cloud/debian-9"
    "w2k3" = "windows-cloud/windows-2016-core"
    "w2k8" = "windows-cloud/windows-2008-r2"
    "w2k12" = "windows-cloud/windows-2012-r2"
    "w2k16" = "windows-cloud/windows-2016"
  }
}

provider "google" {
  credentials = "${file("{{ index $.Build.Config "gcp_cred_file" }}")}"
  project = "{{ index $.Build.Config "gcp_project" }}"
  region = "{{ index $.Build.Config "gcp_region" }}"
}

resource "google_compute_network" "vpc" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-vpc"
  auto_create_subnetworks = false
}

resource "google_compute_firewall" "allow_icmp" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-allow-icmp"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  source_ranges = [
    "{{ index $.Build.Config "vpc_cidr" }}",
  ]
}

resource "google_compute_firewall" "allow_admin" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-allow-admin"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_ranges = [
    "{{ index $.Build.Config "admin_ip" }}/32",
  ]
}

resource "google_compute_firewall" "allow_vdi_ext" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-allow-vdi-ext"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "tcp"
    ports = [
      "22",
      "3389",
    ]
  }

  source_ranges = [
    "{{ index $.Build.Config "admin_ip" }}/32",
  ]

  target_tags = [
    "vdi",
  ]
}

resource "google_compute_firewall" "allow_vdi_int" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-allow-vdi-int"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_ranges = [
    "{{ index $.Build.Config "vpc_cidr" }}",
  ]

  target_tags = [
    "vdi",
  ]
}

{{ range $netname, $net := $.Environment.IncludedNetworks }}
resource "google_compute_subnetwork" "{{ $netname }}" {
  name = "{{ $net.ID }}"
  ip_cidr_range = "{{ $net.CIDR }}"
  region = "{{ index $.Build.Config "gcp_region" }}"
  network = "${google_compute_network.vpc.self_link}"
}

resource "google_compute_firewall" "allow_{{ $netname }}" {
  name = "{{ $.Environment.ID }}-t{{ $.Team.TeamNumber }}-{{ $netname }}-allow-inbound"
  network = "${google_compute_network.vpc.self_link}"

  allow {
    protocol = "icmp"
  }

  allow {
    protocol = "tcp"
  }

  allow {
    protocol = "udp"
  }

  source_tags = [
    "vdi",
  ]

  target_tags = [
    "{{ $netname }}",
  ]
}
{{ end }}

{{ range $net, $hosts := $.Environment.HostByNetwork }}
  {{ range $hostidx, $host := $hosts }}
    {{ $resource_name := printf "t%d-%s-%s" $.Team.TeamNumber $net $host.Hostname }}
    resource "google_compute_instance" "{{ $resource_name }}" {
      name = "{{ $resource_name }}"
      machine_type = "${var.vmsize["{{ $host.InstanceSize }}"]}"
      zone = "{{ index $.Build.Config "gcp_zone" }}"

      boot_disk {
        initialize_params {
          size = "{{ $host.Disk.Size }}"
          type = "pd-ssd"
          image = "${var.vmos["{{ $host.OS }}"]}"
        }
      }

      network_interface {
        subnetwork = "${google_compute_subnetwork.{{ $net }}.self_link}"
        address = "${cidrhost("{{ (index $.Environment.IncludedNetworks $net).CIDR }}", {{ $host.LastOctet }})}"

        access_config {
          // Ephemeral IP
        }
      }

      {{ $uds := (index $host.Scripts (index $host.Vars "user_data_script_id")) }}

      metadata {
        {{ if $host.IsWindows }}
        windows-startup-script-ps1 = "net user administrator /active:yes"
        sysprep-specialize-script-ps1 = "${file("{{ $.Build.RelAssetForTeam $.Team.TeamNumber (printf "%s_%s" $host.Hostname $uds.Base) }}")}"
        {{ else }}
        sshKeys = "root:${file("{{ index $.Build.Config "rel_ssh_public_key_file" }}")}"
        {{ end }}
      }


      {{ if ne $host.IsWindows true }}
      metadata_startup_script = "${file("{{ $.Build.RelAssetForTeam $.Team.TeamNumber (printf "%s_%s" $host.Hostname $uds.Base) }}")}"
      {{ end }}

      tags = [
        "{{ $net }}",
        "{{ $host.ID }}",
      ]

      depends_on = [
        {{ if ne $host.ID "root-dns" }}
        "null_resource.dns_provisioned",
        {{ if ne $net "vdi" }}
        {{ if ne (index $.Build.Config "skip_ad") "true" }}
        {{ if ne (index $host.Tags "domain-controller") "true" }}
        "null_resource.ad_provisioned",
        {{ end }}
        {{ end }}
        {{ end }}
        {{ end }}
      ]
    }

    output "{{ $host.Hostname }}.private_ip" {
      value = "${google_compute_instance.{{ $resource_name }}.network_interface.0.address}"
    }

    output "{{ $host.Hostname }}.public_ip" {
      value = "${google_compute_instance.{{ $resource_name }}.network_interface.0.access_config.0.assigned_nat_ip}"
    }

    {{ if gt (len $host.Provisioners) 0 }}
      {{ range $step_number, $prov := $host.Provisioners }}
        {{ $subcontext := $.Clone }}
        {{ if eq $step_number 0 }}
          {{ $_ := $subcontext.Set "depends_on" (printf "google_compute_instance.%s" $resource_name) }}
        {{ else }}
          {{ $_ := $subcontext.Set "depends_on" (printf "null_resource.provision_%s_step%d" $resource_name (Decr $step_number)) }}
        {{ end }}
        {{ if eq $prov.Kind "dns_record" }}
          {{ $_ := $subcontext.Set "resource_name" $resource_name }}
          {{ $_ := $subcontext.Set "dns_server_resource" (index $.Build.Config "root_dns_ip") }}
          {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
          {{ $_ := $subcontext.Attach $prov $host }}
          {{ template "dns_record" $subcontext }}
        {{ end }}
        {{ if eq $prov.Kind "remote_file" }}
          {{ $_ := $subcontext.Set "resource_name" $resource_name }}
          {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
          {{ $_ := $subcontext.Attach $prov $host }}
          {{ template "remote_file" $subcontext }}
        {{ end }}
        {{ if eq $prov.Kind "command" }}
          {{ $_ := $subcontext.Set "resource_name" $resource_name }}
          {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
          {{ $_ := $subcontext.Attach $prov $host }}
          {{ template "command" $subcontext }}
        {{ end }}
        {{ if eq $prov.Kind "script" }}
          {{ $_ := $subcontext.Set "resource_name" $resource_name }}
          {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
          {{ $_ := $subcontext.Attach $prov $host }}
          {{ template "script" $subcontext }}
        {{ end }}
      {{ end }}
    {{ end }}

    {{ if eq (index $host.Tags "domain-controller") "true" }}
      {{ $last_step_num := Decr (len $host.Provisioners) }}
      resource "null_resource" "ad_provisioned" {
        depends_on = [
          "null_resource.provision_{{ $resource_name }}_step{{ $last_step_num }}",
        ]

        provisioner "local-exec" {
          command = "say 'Root Domain Controller successfully provisioned!' || true"
        }
      }
    {{ end }}
  {{ end }}
{{ end }}

