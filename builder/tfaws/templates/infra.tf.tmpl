###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

terraform {
  backend "etcdv3" {
    prefix = "{{ $.Team.ID }}/terraform.tfstate"
    endpoints = [
      "https://{{ index $.Build.Config "etcd_master" }}",
      "https://{{ index $.Build.Config "etcd_slave" }}",
    ]
    username = "{{ index $.Build.Config "etcd_username" }}"
    password = "{{ index $.Build.Config "etcd_password" }}"
  }
}

variable "vmsize" {
  type = "map"
  default = {
    "nano" = "t3.nano"
    "micro" = "t3.micro"
    "small" = "t3.small"
    "medium" = "t3.medium"
    "large" = "t3.large"
    "xlarge" = "t3.xlarge"
  }
}

data "aws_ami" "ubuntu16" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["099720109477"] # Canonical AWS ID
}

data "aws_ami" "ubuntu18" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["099720109477"] # Canonical AWS ID
}

data "aws_ami" "ubuntu20" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-arm64-servers-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["099720109477"] # Canonical AWS ID
}

data "aws_ami" "centos7" {
  most_recent = true

  filter {
    name   = "name"
    values = ["CentOS 7.*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["125523088429"] # CentOS AWS ID
}

data "aws_ami" "centos8" {
  most_recent = true

  filter {
    name   = "name"
    values = ["CentOS 8.*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["125523088429"] # CentOS AWS ID
}

data "aws_ami" "debian8" {
  most_recent = true

  filter {
    name   = "name"
    values = ["debian-jessie-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["379101102735"] # Debian AWS ID
}

data "aws_ami" "debian9" {
  most_recent = true

  filter {
    name   = "name"
    values = ["debian-stretch-hvm-x86_64-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["379101102735"] # Debian AWS ID
}

data "aws_ami" "debian10" {
  most_recent = true

  filter {
    name   = "name"
    values = ["debian-10-amd64-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  owners = ["379101102735"] # Debian AWS ID
}

variable "vmos" {
  type = "map"
  default = {
    "ubuntu16" = data.aws_ami.ubuntu16.id
    "ubuntu18" = data.aws_ami.ubuntu18.id
    "ubuntu20" = data.aws_ami.ubuntu20.id
    "centos7" = data.aws_ami.centos7.id
    "centos8" = data.aws_ami.centos8.id
    "debian8" = data.aws_ami.debian8.id
    "debian9" = data.aws_ami.debian9.id
    "debian10" = data.aws_ami.debian10.id
    "w2k12" = "windows-cloud/windows-2012-r2"
    "w2k16" = "windows-cloud/windows-2016"
    "w2k19" = "windows-cloud/windows-2019"
    "w2k12-sql" = "windows-sql-cloud/sql-ent-2012-win-2012-r2"
    "w2k16-sql" = "windows-sql-cloud/sql-ent-2014-win-2016"
    "w2k19-sql" = "windows-sql-cloud/sql-ent-2016-win-2019"
  }
}

provider "aws" {
  region = "{{ index $.Build.Config "aws_region" }}"
  shared_credentials_file = "{{ index $.Build.Config "aws_cred_file" }}"
  profile                 = "{{ index $.Build.Config "aws_cred_profile" }}"
}

{{ $dnsz := index $.Build.Config "aws_dns_zone_id" }}

resource "aws_route53_zone" "{{ $dnsz }}" {
  name = "{{ $dnsz }}"
}

{{ $team_vpc_name := printf "%s-t%d-vpc" $.Environment.Base $.Team.TeamNumber }}

resource "aws_vpc" "vpc" {
  cidr_block       = "{{ index $.Build.Config "vpc_cidr" }}"
  enable_dns_hostnames = true
  enable_dns_support = true

  tags = {
    Name = "{{ $team_vpc_name }}"
  }
}

resource "aws_internet_gateway" "vpc_default" {
  vpc_id = aws_vpc.vpc.id
}

resource "aws_route" "vpc_internet_access" {
  route_table_id         = aws_vpc.vpc.main_route_table_id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.vpc_default.id
}

{{ $teamrev := (index $.Laforge.StateManager.NewRevs $.Team.Path) }}
{{ $teamrev = $teamrev.Touch }}


resource "local_file" "team_lf_revision" {
  content = {{ $teamrev.ToJSONString | hclstring }}
  filename = "./.team.lfrevision"

  depends_on = [
    "aws_vpc.vpc",
  ]
}

// aws_network_acl
resource "aws_network_acl" "vpc_acl" {
  vpc_id = aws_vpc.vpc.id
}

resource "aws_network_acl_rule" "{{ $team_vpc_name }}-allow-vdi-int" {
  network_acl_id = aws_network_acl.vpc_acl.id
  rule_number    = 100
  egress         = false
  protocol       = "all"
  rule_action    = "allow"
  cidr_block     = "{{ index $.Build.Config "vpc_cidr" }}"
  icmp_type      = -1
  icmp_code      = -1
}

{{ if ne (index $.Build.Config "admin_ip") "" }}
resource "aws_network_acl_rule" "{{ $team_vpc_name }}-allow-admin" {
  network_acl_id = aws_network_acl.vpc_acl.id
  rule_number    = 101
  egress         = true
  protocol       = "all"
  rule_action    = "allow"
  cidr_block     = "{{ index $.Build.Config "admin_ip" }}/32"
  icmp_type      = -1
  icmp_code      = -1
}
{{ end }}

{{ $current_rule_number := 200 }}

{{ range $cidr_pos, $cidr := $.Environment.AdminCIDRs }}
{{ $current_rule_number = Incr $current_rule_number }}
resource "aws_network_acl_rule" "{{ $team_vpc_name }}-allow-admin-{{ $cidr_pos }}" {
  network_acl_id = aws_network_acl.vpc_acl.id
  rule_number    = {{ $current_rule_number }}
  egress         = true
  protocol       = "all"
  rule_action    = "allow"
  cidr_block     = "{{ $cidr }}"
  icmp_type      = -1
  icmp_code      = -1
}
{{ end }}

{{ range $_, $port := $.Environment.ExposedVDIPorts }}
{{ $current_rule_number = Incr $current_rule_number }}
resource "aws_network_acl_rule" "{{ $team_vpc_name }}-allow-vdi-ext-{{ {{ $port }} }}" {
  network_acl_id = aws_network_acl.vpc_acl.id
  rule_number    = {{ $current_rule_number }}
  egress         = true
  protocol       = "tcp"
  rule_action    = "allow"
  cidr_block     = "{{ index $.Build.Config "vdi_whitelist" }}"
  from_port      = {{ $port }}
  to_port        = {{ $port }}
}
{{ end }}

resource "aws_network_acl_rule" "{{ $team_vpc_name }}-deny-mgmt-int" {
  network_acl_id = aws_network_acl.vpc_acl.id
  rule_number    = 99
  egress         = true
  protocol       = "tcp"
  rule_action    = "deny"
  cidr_block     = "{{ index $.Build.Config "vpc_cidr" }}"
  from_port      = 9971
  to_port        = 9971
}


{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
{{ $net := $pnet.Network }}
{{ $netname := $net.Path }}
// network = {{ $netname }}

{{ $network_subnet_name := printf "%s-t%d-%s" $.Environment.Base $.Team.TeamNumber $net.Base }}

resource "aws_subnet" "{{ $network_subnet_name }}" {
  vpc_id     = aws_vpc.vpc.id
  cidr_block = "{{ $net.CIDR }}"

  tags = {
    Name = "{{ $netname }}"
  }
}

{{ $pnetrev := (index $.Laforge.StateManager.NewRevs $pnetid) }}
{{ $pnetrev = $pnetrev.Touch }}

resource "local_file" "lfrev-{{ $pnet.Base }}" {
  content = {{ $pnetrev.ToJSONString | hclstring }}
  filename = "./networks/{{ $pnet.Base }}/.provisioned_network.lfrevision"

  depends_on = [
    "aws_subnet.{{ $network_subnet_name }}",
  ]
}
{{ end }}

{{ $dns_resource_name := "" }}

{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ if eq $host.Base "ns01" }}
      {{ $dns_resource_name = printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}
    {{ end }}
  {{ end }}
{{ end }}

resource "aws_key_pair" "laforge" {
  key_name   = "laforge-key"
  public_key = "${chomp(file("{{ index $.Build.Config "rel_ssh_public_key_file" }}"))} root@laforge"
}

resource "aws_key_pair" "cptc" {
  key_name   = "cptc-key"
  public_key = "{{ index $.Build.Config "aws_project_ssh_pubkey" }} root@admin.cptc.network"
}

{{ range $pnetid, $pnet := $.Team.ProvisionedNetworks }}
  {{ $netobj := $pnet.Network }}
  {{ range $phostid, $phost := $pnet.ProvisionedHosts }}
    {{ $host := $phost.Host }}
    {{ $resource_name := printf "%s-t%d-%s-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base $host.Base }}

    {{ $network_subnet_name := printf "%s-t%d-%s" $.Environment.Base $.Team.TeamNumber $netobj.Base }}

    resource "aws_network_interface" "{{ $resource_name }}-pmi" {
      subnet_id   = aws_subnet.{{ $network_subnet_name }}.id
      private_ips = ["${cidrhost("{{ $netobj.CIDR }}", {{ $host.LastOctet }})}"]
      private_dns_name = "{{ $host.Hostname }}.{{ $netobj.Name }}.{{ $.Competition.DNS.RootDomain }}"

      tags = {
        Name = "{{ $resource_name }}-primary-network-interface"
      }
    }

    resource "aws_instance" "{{ $resource_name }}" {
      ami           = ${var.vmos["{{ $host.OS }}"]}
      instance_type = "${var.vmsize["{{ $host.InstanceSize }}"]}"
      associate_public_ip_address = true
      key_name = aws_key_pair.laforge.key_name

      network_interface {
        network_interface_id = aws_network_interface.{{ $resource_name }}-pmi.id
        device_index         = 0
      }

      root_block_device {
        volume_type = "gp2"
        volume_size = {{ $host.Disk.Size }}
      }

      {{ $uds := (index $host.Scripts (index $host.Vars "user_data_script_id")) }}
      user_data = "file("{{ $.Build.RelAssetForTeam $netobj.Base $host.Base $uds.SourceBase }}")"

      {{ if $host.AllowMACChanges }}
      source_dest_check = false
      {{ end }}

      tags = {
        EnvironmentNetwork = "{{ $.Environment.Base }}-t{{ $.Team.TeamNumber }}-{{ $netobj.Base }}",
        NetworkBase = "{{ $netobj.Base }}",
        Hostname = "{{ $host.Hostname }}",
        Team = "t{{ $.Team.TeamNumber }}",
        Environment = "{{ $.Environment.Base }}",
        Competition = "{{ $.Competition.ID }}",
        ResourceName = "{{ $resource_name }}",
      }

    }
    
    provisioner "file" {
        {{ if $host.IsWindows }}
          connection {
            host     = "${aws_instance.{{ $resource_name }}.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $phost.ActualPassword }}"
          }
        {{ else }}
          connection {
            agent       = "false"
            host        = "${aws_instance.{{ $resource_name }}.public_ip}"
            type        = "ssh"
            user        = "root"
            timeout     = "60m"
            private_key = "${file("{{ index $.Build.Config "rel_ssh_private_key_file" }}")}"
          }
        {{ end }}

        source = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/agent"
        {{ if $host.IsWindows }}
          destination = "C:\\laforge-agent"
        {{ else }}
          destination = "/opt/laforge-agent"
        {{ end }}
      }
      
####
    {{ $phostrev := (index $.Laforge.StateManager.NewRevs $phostid) }}
    {{ $phostrev = $phostrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-host" {
      content = {{ $phostrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.provisioned_host.lfrevision"

      depends_on = [
        "aws_instance.{{ $resource_name }}",
      ]
    }

    output "{{ $host.Base }}-private_ip" {
      value = "${aws_instance.{{ $resource_name }}.private_ip}"
    }

    output "{{ $host.Base }}-public_ip" {
      value = "${aws_instance.{{ $resource_name }}.public_ip}"
    }

    {{ if $host.TagEquals "vdi" "true" }}
    resource "aws_route53_record" "{{ $resource_name }}" {
      managed_zone = aws_route53_zone.{{ $dnsz }}.zone_id

      name = "{{ $host.Hostname }}.{{ $netobj.Name }}.t{{ $.Team.TeamNumber }}.{{ $.Environment.Base }}.${data.google_dns_managed_zone.{{ $dnsz }}.dns_name}"
      type = "A"
      ttl = "300"
      records = [aws_instance.{{ $resource_name }}.public_ip]
    }
    {{ end }}

    data "template_file" "{{ $resource_name }}" {
      template = "${file("{{ $.Build.RelAssetForTeam $netobj.Base $host.Base "provisioned_host.tpl" }}")}"

      vars = {
        remote_addr = "${aws_instance.{{ $resource_name }}.public_ip}"
        local_addr = "${aws_instance.{{ $resource_name }}.private_ip}"
        host_active = "true"
        resource_name = "aws_instance.{{ $resource_name }}"
        {{ if $host.IsWindows }}
        password = "{{ $phost.ActualPassword }}"
        {{ else }}
        identity_file = "{{ index $.Build.Config "rel_ssh_private_key_file" }}"
        {{ end }}
      }

      depends_on = [
        "aws_instance.{{ $resource_name }}",
      ]
    }

    resource "local_file" "{{ $resource_name }}_provisioning_file" {
      content = "${data.template_file.{{ $resource_name }}.rendered}"
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/conn.laforge"

      depends_on = [
        "aws_instance.{{ $resource_name }}",
      ]
    }

    {{ $phostconnrev := (index $.Laforge.StateManager.NewRevs $phost.Conn.Path) }}
    {{ $phostconnrev = $phostconnrev.TouchWithID $resource_name }}

    resource "local_file" "lfrev-{{ $resource_name }}-conn" {
      content = {{ $phostconnrev.ToJSONString | hclstring }}
      filename = "./networks/{{ $netobj.Base }}/hosts/{{ $host.Base }}/.connection.lfrevision"

      depends_on = [
        "aws_instance.{{ $resource_name }}",
      ]
    }
  {{ end }}
{{ end }}

