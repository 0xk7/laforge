###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

provider "aws" {
  access_key = "{{ index $.Build.Config "aws_access_key" }}"
  secret_key = "{{ index $.Build.Config "aws_secret_key" }}"
  region = "{{ index $.Build.Config "aws_region" }}"
  profile = ""
}

resource "aws_key_pair" "{{ $.Build.ID }}_ssh_keypair" {
  key_name = "{{ $.Build.ID }}_ssh_keypair"
  public_key = "{{ index $.Build.Config "ssh_public_key" | html }}"
}

resource "aws_vpc" "{{ $.Team.Name }}_vpc" {
  cidr_block = "{{ index $.Build.Config "vpc_cidr" }}"
  enable_dns_hostnames = true

  tags {
    Name = "{{ $.Team.Name }}_vpc"
    Environment = "{{ $.Environment.ID }}"
    Team = "{{ $.Team.Name }}"
  }
}

resource "aws_internet_gateway" "{{ $.Team.Name }}_igw" {
  vpc_id = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"
}

resource "aws_route_table" "{{ $.Team.Name }}_default_gateway" {
  vpc_id = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.{{ $.Team.Name }}_igw.id}"
  }

  tags {
    Name = "{{ $.Team.Name }}_igw_route"
    Environment = "{{ $.Environment.ID }}"
    Team = "{{ $.Team.Name }}"
  }
}

resource "aws_subnet" "{{ $.Team.Name }}_vdi_subnet" {
  vpc_id     = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"
  cidr_block = "{{ index $.Build.Config "vdi_network_cidr" }}"
  map_public_ip_on_launch = true

  tags {
    Name = "{{ $.Team.Name }}_vdi_subnet"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $.Team.Name }}"
  }
}

resource "aws_vpc_dhcp_options" "{{ $.Team.Name }}_dhcp" {
  domain_name = "{{ $.DNS.RootDomain }}"
  domain_name_servers = [
    {{ range $_, $nameserver := $.DNS.DNSServers }}
      "{{ $nameserver }}",
    {{ end }}
  ]
  ntp_servers = [
    {{ range $_, $ntpserver := $.DNS.NTPServers }}
      "{{ $ntpserver }}",
    {{ end }}
  ]

  tags {
    Name = "{{ $.Team.Name }}_dhcp"
    Environment = "{{ $.Environment.ID }}"
    Team = "{{ $.Team.Name }}"
  }
}

resource "aws_vpc_dhcp_options_association" "{{ $.Team.Name }}_dhcp_assoc" {
  vpc_id          = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"
  dhcp_options_id = "${aws_vpc_dhcp_options.{{ $.Team.Name }}_dhcp.id}"
}

resource "aws_security_group" "{{ $.Team.Name }}_base" {
  name = "{{ $.Team.Name }}_base"
  description = "Laforge - {{ $.Team.Name }}_base SG"
  vpc_id = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = [
        "{{ index $.Build.Config "admin_ip" }}/32",
    ]
  }

  ingress {
    from_port = 8
    to_port = 0
    protocol = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "{{ $.Team.Name }}_base"
    Environment = "{{ $.Environment.ID }}"
    Team = "{{ $.Team.Name }}"
  }
}

resource "aws_security_group" "{{ $.Team.Name }}_vdi" {
  name = "{{ $.Team.Name }}_vdi"
  description = "Laforge - {{ $.Team.Name }}_vdi SG"
  vpc_id = "${aws_vpc.{{ $.Team.Name }}_vpc.id}"

  ingress {
    from_port         = 22
    to_port           = 22
    protocol          = "tcp"
    cidr_blocks       = [
      "0.0.0.0/0",
    ]
  }

  ingress {
    from_port         = 3389
    to_port           = 3389
    protocol          = "tcp"
    cidr_blocks       = [
      "0.0.0.0/0",
    ]
  }

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    security_groups = [
      "${aws_security_group.{{ $.Team.Name }}_base.id}",
    ]
  }

  tags {
    Name = "{{ $.Team.Name }}_vdi"
    Environment = "{{ $.Environment.ID }}"
    Team = "{{ $.Team.Name }}"
  }
}

{{ range $hostid, $host := $.Environment.IncludedHosts }}

resource "aws_eip" "{{ $.Team.Name }}_{{ $hostid }}_eip" {
  instance = "${aws_instance.{{ $.Team.Name }}_{{ $hostid }}.id}"
  depends_on = ["aws_instance.{{ $.Team.Name }}_{{ $hostid }}"]
  vpc      = true
}

resource "aws_instance" "{{ $.Team.Name }}_{{ $hostid }}" {

  ami = "{{ index $host.Vars "ami_id" }}"
  instance_type = "{{ $host.InstanceSize }}"
  key_name = "${aws_key_pair.{{ $.Team.Name }}_ssh_keypair.key_name}"
  subnet_id = "${aws_subnet.{{ $.Team.Name }}_vdi_subnet.id}"
  ebs_optimized = true

  private_ip = "{{ index $host.Vars "ip_override" }}"

  vpc_security_group_ids = [
    "${aws_security_group.{{ $.Team.Name }}_base.id}",
    "${aws_security_group.{{ $.Team.Name }}_vdi.id}",
  ]

  tags {
    Name = "{{ $.Team.Name }}_{{ $hostid }}"
    Environment = "{{ $.Environment.ID }}"
    Network = "{{ $.Team.Name }}-vdi"
    Team = "{{ $.Team.Name }}"
  }

}

resource "null_resource" "configure_{{ $.Team.Name }}_{{ $hostid }}" {
  triggers {
    instance = "${aws_instance.{{ $.Team.Name }}_{{ $hostid }}.id}"
  }

  provisioner "remote-exec" {
    connection {
      host     = "${aws_eip.{{ $.Team.Name }}_{{ $hostid }}_eip.public_ip}"
      type     = "ssh"
      user     = "ubuntu"
      timeout  = "60m"
      private_key = "${file("{{ index $.Build.Config "ssh_private_key_file" }}")}"
    }

    inline = [
      "sudo sed -i 's/^.*ssh-/ssh-/;' /root/.ssh/authorized_keys",
    ]
  }

  {{ range $fileid, $remotefile := $host.Files }}
    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $.Team.Name }}_{{ $hostid }}_eip.public_ip}"
        type     = "ssh"
        user     = "root"
        timeout  = "60m"
        private_key = "${file("{{ index $.Build.Config "ssh_private_key_file" }}")}"
      }

      source      = "{{ $remotefile.Source }}"
      destination = "{{ $remotefile.Destination }}"
    }
  {{ end }}

  {{ range $scriptid, $script := $host.Scripts }}

    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $.Team.Name }}_{{ $hostid }}_eip.public_ip}"
        type     = "ssh"
        user     = "root"
        timeout  = "60m"
        private_key = "${file("{{ index $.Build.Config "ssh_private_key_file" }}")}"
      }
      source      = "{{ $script.Source }}"
      destination = "/tmp/{{ $scriptid }}"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $.Team.Name }}_{{ $hostid }}_eip.public_ip}"
        type     = "ssh"
        user     = "root"
        timeout  = "60m"
        private_key = "${file("{{ index $.Build.Config "ssh_private_key_file" }}")}"
      }

      inline = [
        "chmod +x /tmp/{{ $scriptid }}",
        "/tmp/{{ $scriptid }}",
        "rm -f /tmp/{{ $scriptid }}",
      ]
    }

  {{ end }}
}

output "public_ips.{{ $.Team.Name }}_{{ $hostid }}" {
  value = "${aws_eip.{{ $.Team.Name }}_{{ $hostid }}_eip.public_ip}"
}

{{ end }}