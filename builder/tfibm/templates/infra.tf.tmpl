###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

terraform {
  backend "etcdv3" {
    prefix = "state/{{ $.Build.ID }}/{{ $.Team.TeamNumber }}/terraform.tfstate"
    endpoints = [
      "https://{{ index $.Build.Config "etcd_master" }}",
      "https://{{ index $.Build.Config "etcd_slave" }}",
    ]
    username = "{{ index $.Build.Config "etcd_username" }}"
    password = "{{ index $.Build.Config "etcd_password" }}"
  }
}

variable "vmsize" {
  type = "map"
  default = {
    "small" = "BL2_2X4X100"
    "medium" = "BL2_4X16X100"
    "large" = "BL2_8X16X100"
    "xlarge" = "BL2_16X32X100"
  }
}

variable "vmos" {
  type = "map"
  default = {
    "ubuntu16" = "UBUNTU_16_64"
    "ubuntu18" = "UBUNTU_18_64"
    "centos7" = "CENTOS_7_64"
    "centos6" = "CENTOS_6_64"
    "debian8" = "DEBIAN_8_64"
    "debian9" = "DEBIAN_9_64"
    "w2k3" = "WIN_2003-STD-SP2-5_64"
    "w2k8" = "WIN_2008-STD-R2-SP1_64"
    "w2k12" = "WIN_2012-STD_64"
    "w2k16" = "WIN_2016-STD_64"
  }
}

provider "ibm" {
  softlayer_username = "{{ index $.Build.Config "softlayer_api_user" }}"
  softlayer_api_key = "{{ index $.Build.Config "softlayer_api_key" }}"
}

resource "ibm_compute_ssh_key" "{{ $.Build.ID }}_{{ $.Team.TeamNumber }}" {
  label = "{{ $.Build.ID }}_ssh_key"
  notes = "env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }}"
  public_key = "${file("{{ index $.Build.Config "rel_ssh_public_key_file" }}")}"
}

resource "ibm_security_group" "ext_base" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_ext_base"
  description = "External security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=ext_base"
}

resource "ibm_security_group" "ext_vdi" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_ext_vdi"
  description = "External security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=ext_vdi"
}

resource "ibm_security_group" "int_base" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_int_base"
  description = "Internal security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=int_base"
}

resource "ibm_security_group" "int_egress" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_int_egress"
  description = "Internal security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=int_egress"
}

resource "ibm_security_group" "int_vdi" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_int_vdi"
  description = "Internal security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=int_vdi"
}

{{ range $netname, $net := $.Environment.IncludedNetworks }}
{{ if ne $net.ID "vdi" }}
resource "ibm_security_group" "int_{{ $net.ID }}" {
  name = "{{ $.Environment.ID }}_t{{ $.Team.TeamNumber }}_int_{{ $net.ID }}"
  description = "Internal security group for env={{ $.Environment.ID }} team={{ $.Team.TeamNumber }} name=int_{{ $net.ID }}"
}
{{ end }}
{{ end }}



resource "ibm_security_group_rule" "ext_base_0" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "tcp"
  remote_ip = "{{ index $.Build.Config "admin_ip" }}/32"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_base_1" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "udp"
  remote_ip = "{{ index $.Build.Config "admin_ip" }}/32"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_base_2" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 0
  port_range_max = 254
  protocol = "icmp"
  remote_ip = "{{ index $.Build.Config "admin_ip" }}/32"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_base_3" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "tcp"
  remote_ip = "0.0.0.0/0"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_base_4" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "udp"
  remote_ip = "0.0.0.0/0"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_base_5" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 0
  port_range_max = 254
  protocol = "icmp"
  remote_ip = "0.0.0.0/0"
  security_group_id = "${ibm_security_group.ext_base.id}"
}

resource "ibm_security_group_rule" "ext_vdi_0" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 22
  port_range_max = 22
  protocol = "icmp"
  remote_ip = "0.0.0.0/0"
  security_group_id = "${ibm_security_group.ext_vdi.id}"
}

resource "ibm_security_group_rule" "ext_vdi_1" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 3389
  port_range_max = 3389
  protocol = "tcp"
  remote_ip = "0.0.0.0/0"
  security_group_id = "${ibm_security_group.ext_vdi.id}"
}

resource "ibm_security_group_rule" "int_egress_0" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "tcp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_egress.id}"
}

resource "ibm_security_group_rule" "int_egress_1" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "udp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_egress.id}"
}

resource "ibm_security_group_rule" "int_egress_2" {
  direction = "egress"
  ether_type = "IPv4"
  port_range_min = 0
  port_range_max = 254
  protocol = "icmp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_egress.id}"
}

resource "ibm_security_group_rule" "int_egress_3" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 0
  port_range_max = 254
  protocol = "icmp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_egress.id}"
}

resource "ibm_security_group_rule" "int_vdi_0" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "tcp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_vdi.id}"
}

resource "ibm_security_group_rule" "int_vdi_1" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "udp"
  remote_group_id = "${ibm_security_group.int_base.id}"
  security_group_id = "${ibm_security_group.int_vdi.id}"
}

{{ range $netname, $net := $.Environment.IncludedNetworks }}
{{ if ne $net.ID "vdi" }}
resource "ibm_security_group_rule" "int_{{ $net.ID }}_0" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "tcp"
  remote_group_id = "${ibm_security_group.int_vdi.id}"
  security_group_id = "${ibm_security_group.int_{{ $net.ID }}.id}"
}

resource "ibm_security_group_rule" "int_{{ $net.ID }}_1" {
  direction = "ingress"
  ether_type = "IPv4"
  port_range_min = 1
  port_range_max = 65535
  protocol = "udp"
  remote_group_id = "${ibm_security_group.int_vdi.id}"
  security_group_id = "${ibm_security_group.int_{{ $net.ID }}.id}"
}

{{ end }}
{{ end }}

{{ range $net, $hosts := $.Environment.HostByNetwork }}
  {{ if eq $net "vdi" }}
    {{ range $id, $host := $hosts }}
      {{ $resource_name := printf "t%d-%s-%s" $.Team.TeamNumber $net $host.Hostname }}
      resource "ibm_compute_vm_instance" "{{ $resource_name }}" {
        hostname = "{{ $resource_name }}"
        domain = "vdi.nationalcptc.org"
        os_reference_code = "${var.vmos["{{ $host.OS }}"]}"
        datacenter = "{{ index $.Build.Config "datacenter" }}"
        network_speed = 1000
        hourly_billing = true
        flavor_key_name = "${var.vmsize["{{ $host.InstanceSize }}"]}"
        ssh_key_ids = [
          "${ibm_compute_ssh_key.{{ $.Build.ID }}_{{ $.Team.TeamNumber }}.id}",
        ]

        public_security_group_ids = [
          "${ibm_security_group.ext_base.id}",
          "${ibm_security_group.ext_vdi.id}",
        ]

        private_security_group_ids = [
          "${ibm_security_group.int_base.id}",
          "${ibm_security_group.int_egress.id}",
          "${ibm_security_group.int_vdi.id}",
        ]

        {{ $uds := (index $host.Scripts (index $host.Vars "user_data_script_id")) }}
        user_metadata = "${file("{{ $.Build.RelAssetForTeam $.Team.TeamNumber (printf "%s_%s" $host.Hostname $uds.Base) }}")}"
      }

      output "{{ $host.Hostname }}.private_ip" {
        value = "${ibm_compute_vm_instance.{{ $resource_name }}.ipv4_address_private}"
      }

      output "{{ $host.Hostname }}.public_ip" {
        value = "${ibm_compute_vm_instance.{{ $resource_name }}.ipv4_address}"
      }

      {{ if gt (len $host.Provisioners) 0 }}
        {{ range $step_number, $prov := $host.Provisioners }}
          {{ $subcontext := $.Clone }}
          {{ if eq $step_number 0 }}
            {{ $_ := $subcontext.Set "depends_on" (printf "ibm_compute_vm_instance.%s" $resource_name) }}
          {{ else }}
            {{ $_ := $subcontext.Set "depends_on" (printf "null_resource.provision_%s_step%d" $resource_name (Decr $step_number)) }}
          {{ end }}
          {{ if eq $prov.Kind "dns_record" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "dns_server_resource" "127.0.0.1" }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "dns_record" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "remote_file" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "remote_file" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "command" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "command" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "script" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "script" $subcontext }}
          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ else }}
    {{ range $id, $host := $hosts }}
      {{ $resource_name := printf "t%d-%s-%s" $.Team.TeamNumber $net $host.Hostname }}
      resource "ibm_compute_vm_instance" "{{ $resource_name }}" {
        hostname = "{{ $host.Hostname }}"
        domain = "{{ $net }}.t{{ $.Team.TeamNumber }}.nationalcptc.org"
        os_reference_code = "${var.vmos["{{ $host.OS }}"]}"
        datacenter = "{{ index $.Build.Config "datacenter" }}"
        network_speed = 1000
        hourly_billing = true
        flavor_key_name = "${var.vmsize["{{ $host.InstanceSize }}"]}"
        ssh_key_ids = [
          "${ibm_compute_ssh_key.{{ $.Build.ID }}_{{ $.Team.TeamNumber }}.id}",
        ]

        public_security_group_ids = [
          "${ibm_security_group.ext_base.id}",
        ]

        private_security_group_ids = [
          "${ibm_security_group.int_base.id}",
          "${ibm_security_group.int_egress.id}",
          "${ibm_security_group.int_{{ $net }}.id}",
        ]

        {{ $uds := (index $host.Scripts (index $host.Vars "user_data_script_id")) }}
        user_metadata = "${file("{{ $.Build.RelAssetForTeam $.Team.TeamNumber (printf "%s_%s" $host.Hostname $uds.Base) }}")}"
      }

      output "{{ $host.Hostname }}.private_ip" {
        value = "${ibm_compute_vm_instance.{{ $resource_name }}.ipv4_address_private}"
      }

      output "{{ $host.Hostname }}.public_ip" {
        value = "${ibm_compute_vm_instance.{{ $resource_name }}.ipv4_address}"
      }

      {{ if gt (len $host.Provisioners) 0 }}
        {{ range $step_number, $prov := $host.Provisioners }}
          {{ $subcontext := $.Clone }}
          {{ if eq $step_number 0 }}
            {{ $_ := $subcontext.Set "depends_on" (printf "ibm_compute_vm_instance.%s" $resource_name) }}
          {{ else }}
            {{ $_ := $subcontext.Set "depends_on" (printf "null_resource.provision_%s_step%d" $resource_name (Decr $step_number)) }}
          {{ end }}
          {{ if eq $prov.Kind "dns_record" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "dns_server_resource" "127.0.0.1" }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "dns_record" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "remote_file" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "remote_file" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "command" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "command" $subcontext }}
          {{ end }}
          {{ if eq $prov.Kind "script" }}
            {{ $_ := $subcontext.Set "resource_name" $resource_name }}
            {{ $_ := $subcontext.Set "step_number" (printf "%d" $step_number) }}
            {{ $_ := $subcontext.Attach $prov $host }}
            {{ template "script" $subcontext }}
          {{ end }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

