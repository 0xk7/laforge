###########################################################
# LAFORGE GENERATED TERRAFORM CONFIGURATION
# -- WARNING --
# This file is automatically generated. Do not edit it's
# contents directly. Use Laforge and re build this file.
###########################################################

# AWS Configuration
provider "aws" {
  access_key = "{{ .Competition.AWS.APIKey }}"
  secret_key = "{{ .Competition.AWS.APISecret }}"
  region = "{{ .Competition.AWS.Region }}"
  profile = ""
}

{{ $id := printf "%s%d" $.Environment.Prefix $.PodID }}

# Key Pair
resource "aws_key_pair" "{{ $id }}_ssh_keypair" {
  key_name = "{{ $id }}_ssh_keypair"
  public_key = "{{ .Competition.SSHPublicKey | html }}"
}

# vpc:{{ $id }}
resource "aws_vpc" "{{ $id }}_vpc" {
  cidr_block = "{{ $.Competition.AWS.CIDR }}"
  enable_dns_hostnames = true

  tags {
    Name = "{{ $id }}_vpc"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

# igw:{{ $id }}
resource "aws_internet_gateway" "{{ $id }}_igw" {
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"
}

# route_table:{{ $id }}
resource "aws_route_table" "{{ $id }}_default_gateway" {
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.{{ $id }}_igw.id}"
  }

  tags {
    Name = "{{ $id }}_igw_route"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

# vdi_subnet:{{ $id }}
resource "aws_subnet" "{{ $id }}_vdi_subnet" {
  vpc_id     = "${aws_vpc.{{ $id }}_vpc.id}"
  cidr_block = "{{ $.Environment.JumpHosts.CIDR }}"
  map_public_ip_on_launch = true

  tags {
    Name = "{{ $id }}_vdi_subnet"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

# vdi_route:{{ $id }}
resource "aws_route_table_association" "{{ $id }}_rt_assoc" {
  subnet_id      = "${aws_subnet.{{ $id }}_vdi_subnet.id}"
  route_table_id = "${aws_route_table.{{ $id }}_default_gateway.id}"
}

# dhcp:{{ $id }}
resource "aws_vpc_dhcp_options" "{{ $id }}_dhcp" {
  domain_name = "{{ $.Competition.AWS.DHCPOptions.DNSName }}"
  domain_name_servers = [
    {{ range $_, $nameserver := $.Competition.AWS.DHCPOptions.Nameservers }}
      "{{ $nameserver }}",
    {{ end }}
  ]
  ntp_servers = [
    {{ range $_, $ntpserver := $.Competition.AWS.DHCPOptions.NTPServers }}
      "{{ $ntpserver }}",
    {{ end }}
  ]  

  tags {
    Name = "{{ $id }}_dhcp"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

# dhcp_assoc:{{ $id }}
resource "aws_vpc_dhcp_options_association" "{{ $id }}_dhcp_assoc" {
  vpc_id          = "${aws_vpc.{{ $id }}_vpc.id}"
  dhcp_options_id = "${aws_vpc_dhcp_options.{{ $id }}_dhcp.id}"
}

# sg_base:{{ $id }}
resource "aws_security_group" "{{ $id }}_base" {
  name = "{{ $id }}_base"
  description = "Laforge - {{ $id }}_base SG"
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = [
      {{ range $_, $AdminIP := $.Competition.AdminIPs }}
        "{{ $AdminIP }}",
      {{ end }}
    ]
  }

  ingress {
    from_port = 8
    to_port = 0
    protocol = "icmp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "{{ $id }}_base"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

# sg_vdi:{{ $id }}
resource "aws_security_group" "{{ $id }}_vdi" {
  name = "{{ $id }}_vdi"
  description = "Laforge - {{ $id }}_vdi SG"
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  ingress {
    from_port         = 22
    to_port           = 22
    protocol          = "tcp"
    cidr_blocks       = [
      "0.0.0.0/0",
    ]
  }

  ingress {
    from_port         = 3389
    to_port           = 3389
    protocol          = "tcp"
    cidr_blocks       = [
      "0.0.0.0/0",
    ]
  }

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    security_groups = [
      "${aws_security_group.{{ $id }}_base.id}",
    ]
  }

  tags {
    Name = "{{ $id }}_vdi"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

{{ $genesis_hostname := printf "%s-%s" $.Environment.GenesisHost.Hostname $id }}

resource "aws_eip" "{{ $genesis_hostname }}_eip" {
  instance = "${aws_instance.{{ $genesis_hostname }}.id}"
  depends_on = ["aws_instance.{{ $genesis_hostname }}"]
  vpc      = true
}

resource "aws_instance" "{{ $genesis_hostname }}" {

  ami = "{{ $.Environment.GenesisHost.GetAMI $.Competition.AWS.Region }}"
  instance_type = "{{ $.Environment.GenesisHost.InstanceSize }}"
  key_name = "${aws_key_pair.{{ $id }}_ssh_keypair.key_name}"
  subnet_id = "${aws_subnet.{{ $id }}_vdi_subnet.id}"
  ebs_optimized = true

  {{ $customIP := CustomIP $.Environment.JumpHosts.CIDR 0 $.Environment.GenesisHost.LastOctet }}

  {{ $scriptPath := ScriptRender "genesis_ubuntu_uds.sh" $.Competition $.Environment $.PodID nil nil $genesis_hostname }}

  user_data = "${file("{{ $scriptPath }}")}"

  private_ip = "{{ $customIP }}"

  vpc_security_group_ids = [
    "${aws_security_group.{{ $id }}_base.id}",
    "${aws_security_group.{{ $id }}_vdi.id}",
    {{ range $_, $port := $.Environment.GenesisHost.ValidTCPPorts }}
      "${aws_security_group.{{ $id }}_public_sg_tcp_{{ $port }}.id}",
    {{ end }}
    {{ range $_, $port := $.Environment.GenesisHost.ValidUDPPorts }}
      "${aws_security_group.{{ $id }}_public_sg_udp_{{ $port }}.id}",
    {{ end }}
  ]

  tags {
    Name = "{{ $genesis_hostname }}"
    Environment = "{{ $.Environment.Name }}"
    Network = "{{ $id }}-vdi"
    Team = "{{ $id }}"
  }

}

resource "null_resource" "configure_{{ $genesis_hostname }}" {
  triggers {
    instance = "${aws_instance.{{ $genesis_hostname }}.id}"
  }

  provisioner "remote-exec" {
    connection {
      host     = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
      type     = "ssh"
      user     = "ubuntu"
      timeout  = "60m"
      private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
    }

    inline = [
      "sudo sed -i 's/^.*ssh-/ssh-/;' /root/.ssh/authorized_keys",
    ]
  }

  {{ $fileUploads := $.Environment.GenesisHost.UploadFiles }}
  {{ $fileUploadCount := len $fileUploads }}
  {{ if gt $fileUploadCount 0 }}
    {{ range $localFile, $remoteFile := $fileUploads }}
      provisioner "file" {
        connection {
          host     = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
          type     = "ssh"
          user     = "root"
          timeout  = "60m"
          private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
        }

        source      = "{{ $localFile }}"
        destination = "{{ $remoteFile }}"
      }
    {{ end }}    
  {{ end }}

  {{ $scriptCount := len $.Environment.GenesisHost.Scripts }}
  {{ if gt $scriptCount 0 }}

    {{ range $_, $sname := $.Environment.GenesisHost.Scripts }}
      {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID nil $.Environment.GenesisHost $genesis_hostname }}
      {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
            type     = "ssh"
            user     = "root"
            timeout  = "60m"
            private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
          }
          source      = "{{ $scriptPath }}"
          destination = "/tmp/{{ $sname }}"
        }

        provisioner "remote-exec" {
          connection {
            host     = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
            type     = "ssh"
            user     = "root"
            timeout  = "60m"
            private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
          }

          inline = [
            "chmod +x /tmp/{{ $sname }}",
            "/tmp/{{ $sname }}",
            "rm -f /tmp/{{ $sname }}",
          ]
        }
      {{ end }}
    {{ end }}      
  {{ end }}
}

output "public_ips.{{ $genesis_hostname }}" {
  value = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
}

# Configure the DNS Provider
provider "dns" {
  update {
    server = "${aws_eip.{{ $genesis_hostname }}_eip.public_ip}"
  }
}

{{/* TODO: VDI Network Creation */}}

{{ range $wjh, $_ := N $.Environment.JumpHosts.Windows.Count }}

{{ $hostname := printf "windowsvdi0%d-%s" $wjh $id }}

{{ $fqdn := printf "%s.%s" $hostname $.Environment.Name }}

resource "aws_eip" "{{ $hostname }}_eip" {
  instance = "${aws_instance.{{ $hostname }}.id}"
  depends_on = ["aws_instance.{{ $hostname }}"]
  vpc      = true
}

resource "aws_instance" "{{ $hostname }}" {

  ami = "{{ $.Environment.WindowsJumpAMI }}"
  instance_type = "{{ $.Environment.JumpHosts.Windows.Size }}"
  key_name = "${aws_key_pair.{{ $id }}_ssh_keypair.key_name}"
  subnet_id = "${aws_subnet.{{ $id }}_vdi_subnet.id}"
  ebs_optimized = true

  {{ $customIP := CustomIP $.Environment.JumpHosts.CIDR 20 $wjh }}

  {{ $scriptPath := ScriptRender "jump_windows_uds.xml" $.Competition $.Environment $.PodID nil nil $hostname }}

  user_data = "${file("{{ $scriptPath }}")}"

  private_ip = "{{ $customIP }}"

  vpc_security_group_ids = [
    "${aws_security_group.{{ $id }}_base.id}",
    "${aws_security_group.{{ $id }}_vdi.id}",
  ]

  tags {
    Name = "{{ $hostname }}"
    Environment = "{{ $.Environment.Name }}"
    Network = "{{ $id }}-vdi"
    Team = "{{ $id }}"
  }

  depends_on = [
    {{ range $_, $network := $.Environment.ResolvedNetworks }}
      {{ range $hostname, $host := $network.ResolvedHosts }}
        "aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}",
      {{ end }}
    {{ end }}    
  ]
}

resource "null_resource" "configure_{{ $hostname }}" {
  triggers {
    instance = "${aws_instance.{{ $hostname }}.id}"
  }

  {{ $scriptCount := len $.Environment.JumpHosts.Windows.Scripts }}
  {{ if gt $scriptCount 0 }}
    {{ range $_, $sname := $.Environment.JumpHosts.Windows.Scripts }}
      {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID nil nil $hostname }}
      {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Environment.PodPassword $.PodID }}"
          }

          source      = "{{ $scriptPath }}"
          destination = "C:/laforge/{{ $sname }}"
        }

        provisioner "remote-exec" {
          connection {
            host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Environment.PodPassword $.PodID }}"
          }

          inline = [
            "powershell -NoProfile -ExecutionPolicy Bypass C:/laforge/{{ $sname }}",
          ]
        }
      {{ end }}
    {{ end }}

    {{ if gt $scriptCount 0 }}
      provisioner "remote-exec" {
        connection {
          host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
          type     = "winrm"
          user     = "Administrator"
          timeout  = "60m"
          password = "{{ $.Environment.PodPassword $.PodID }}"
        }
        
        inline = [       
          "rmdir /s /q \"C:/laforge\" || ver1>nul",
        ]
      }
    {{ end }}
  {{ end }}
}

resource "aws_route53_record" "{{ $id }}_vdi_ecname_{{ $hostname }}" {
  zone_id = "{{ $.Competition.AWS.R53ZoneID }}"
  name    = "{{ $fqdn }}"
  type    = "A"
  ttl     = "60"
  records = [
    "${aws_eip.{{ $hostname }}_eip.public_ip}",
  ]
}

output "public_ips.{{ $hostname }}" {
  value = "${aws_eip.{{ $hostname }}_eip.public_ip}"
}

{{ end }}

{{ range $wjh, $_ := N $.Environment.JumpHosts.Kali.Count }}

{{ $hostname := printf "kalivdi0%d-%s" $wjh $id }}

{{ $fqdn := printf "%s.%s" $hostname $.Environment.Name }}

resource "aws_eip" "{{ $hostname }}_eip" {
  instance = "${aws_instance.{{ $hostname }}.id}"
  depends_on = ["aws_instance.{{ $hostname }}"]
  vpc      = true
}

resource "aws_instance" "{{ $hostname }}" {

  ami = "{{ $.Environment.KaliJumpAMI }}"
  instance_type = "{{ $.Environment.JumpHosts.Windows.Size }}"
  key_name = "${aws_key_pair.{{ $id }}_ssh_keypair.key_name}"
  subnet_id = "${aws_subnet.{{ $id }}_vdi_subnet.id}"
  ebs_optimized = true

  {{ $customIP := CustomIP $.Environment.JumpHosts.CIDR 30 $wjh }}

  {{ $scriptPath := ScriptRender "jump_ubuntu_uds.sh" $.Competition $.Environment $.PodID nil nil $hostname }}

  user_data = "${file("{{ $scriptPath }}")}"

  private_ip = "{{ $customIP }}"

  vpc_security_group_ids = [
    "${aws_security_group.{{ $id }}_base.id}",
    "${aws_security_group.{{ $id }}_vdi.id}",
  ]

  tags {
    Name = "{{ $hostname }}"
    Environment = "{{ $.Environment.Name }}"
    Network = "{{ $id }}-vdi"
    Team = "{{ $id }}"
  }

  depends_on = [
    {{ range $_, $network := $.Environment.ResolvedNetworks }}
      {{ range $hostname, $host := $network.ResolvedHosts }}
        "aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}",
      {{ end }}
    {{ end }}    
  ]
}

resource "null_resource" "configure_{{ $hostname }}" {
  triggers {
    instance = "${aws_instance.{{ $hostname }}.id}"
  }

  provisioner "remote-exec" {
    connection {
      host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
      type     = "ssh"  
      user     = "ec2-user"
      timeout  = "60m"
      private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
    }
    inline = [
      "curl -sL -o /tmp/userdata.sh 'http://169.254.169.254/latest/user-data'",
      "sudo bash /tmp/userdata.sh",
      "rm -f /tmp/userdata.sh",
    ]
  }

  {{ range $_, $sname := $.Environment.JumpHosts.Kali.Scripts }}
    {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID nil nil $hostname }}
    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
        type     = "ssh"  
        user     = "root"
        timeout  = "60m"
        private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
      }
      source      = "{{ $scriptPath }}"
      destination = "/tmp/{{ $sname }}"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $hostname }}_eip.public_ip}"
        type     = "ssh"  
        user     = "root"
        timeout  = "60m"
        private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
      }
      inline = [
        "chmod +x /tmp/{{ $sname }}",
        "/tmp/{{ $sname }}",
        "rm -f /tmp/{{ $sname }}",
      ]
    }
  {{ end }}
}

resource "aws_route53_record" "{{ $id }}_vdi_ecname_{{ $hostname }}" {
  zone_id = "{{ $.Competition.AWS.R53ZoneID }}"
  name    = "{{ $fqdn }}"
  type    = "A"
  ttl     = "60"
  records = [
    "${aws_eip.{{ $hostname }}_eip.public_ip}",
  ]
}

output "public_ips.{{ $hostname }}" {
  value = "${aws_eip.{{ $hostname }}_eip.public_ip}"
}

{{ end }}


{{ range $port, $securityGroup := $.Environment.ResolvePublicTCP }}

resource "aws_security_group" "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}" {
  name = "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}"
  description = "Laforge - {{ $id }}_public {{ $securityGroup.Protocol }}/{{ $port }} SG"
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  ingress {
    from_port = {{ $securityGroup.FromPort }}
    to_port = {{ $securityGroup.ToPort }}
    protocol = "{{ $securityGroup.Protocol }}"
    security_groups = [
      "${aws_security_group.{{ $id }}_base.id}",
    ]
  }

  tags {
    Name = "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

{{ end }}

{{ range $port, $securityGroup := $.Environment.ResolvePublicUDP }}

resource "aws_security_group" "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}" {
  name = "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}"
  description = "Laforge - {{ $id }}_public {{ $securityGroup.Protocol }}/{{ $port }} SG"
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  ingress {
    from_port = {{ $securityGroup.FromPort }}
    to_port = {{ $securityGroup.ToPort }}
    protocol = "{{ $securityGroup.Protocol }}"
    security_groups = [
      "${aws_security_group.{{ $id }}_base.id}",
    ]
  }

  tags {
    Name = "{{ $id }}_public_sg_{{ $securityGroup.Protocol }}_{{ $port }}"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}


{{ end }}


{{ range $_, $network := $.Environment.ResolvedNetworks }}

# subnet:{{ $network.Name }}:{{ $id }}
resource "aws_subnet" "{{ $id }}_{{ $network.Name }}" {
  vpc_id     = "${aws_vpc.{{ $id }}_vpc.id}"
  cidr_block = "{{ $network.CIDR }}"
  map_public_ip_on_launch = true

  tags {
    Name = "{{ $id }}_{{ $network.Name }}"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}


# rt_assoc:{{ $network.Name }}:{{ $id }}
resource "aws_route_table_association" "{{ $id }}_{{ $network.Name }}_rt_assoc" {
  subnet_id      = "${aws_subnet.{{ $id }}_{{ $network.Name }}.id}"
  route_table_id = "${aws_route_table.{{ $id }}_default_gateway.id}"
}

# sg:{{ $network.Name }}:{{ $id }}
resource "aws_security_group" "{{ $id }}_{{ $network.Name }}" {
  name = "{{ $id }}_{{ $network.Name }}"
  description = "Laforge - {{ $id }}_{{ $network.Name }} SG"
  vpc_id = "${aws_vpc.{{ $id }}_vpc.id}"

  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    self = true
  }

  {{ if $network.VDIVisible }}
  ingress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    security_groups = [
      "${aws_security_group.{{ $id }}_vdi.id}"
    ]
  }
  {{ end }}

  tags {
    Name = "{{ $id }}_{{ $network.Name }}"
    Environment = "{{ $.Environment.Name }}"
    Team = "{{ $id }}"
  }
}

{{ range $hostname, $host := $network.ResolvedHosts }}

{{ $hostIP := CustomIP $network.CIDR 0 $host.LastOctet }}


resource "aws_eip" "{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip" {
  instance   = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
  depends_on = ["aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}"]
  vpc        = true
}

resource "aws_instance" "{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {

  ami = "{{ $host.GetAMI $.Competition.AWS.Region }}"
  instance_type = "{{ $host.InstanceSize }}"
  key_name = "${aws_key_pair.{{ $id }}_ssh_keypair.key_name}"
  subnet_id = "${aws_subnet.{{ $id }}_{{ $network.Name }}.id}"
  ebs_optimized = true

  private_ip = "{{ $hostIP }}"

  vpc_security_group_ids = [
    "${aws_security_group.{{ $id }}_base.id}",
    "${aws_security_group.{{ $id }}_{{ $network.Name }}.id}",
    {{ range $_, $port := $host.ValidTCPPorts }}
      "${aws_security_group.{{ $id }}_public_sg_tcp_{{ $port }}.id}",
    {{ end }}
    {{ range $_, $port := $host.ValidUDPPorts }}
      "${aws_security_group.{{ $id }}_public_sg_udp_{{ $port }}.id}",
    {{ end }}
  ]

  tags {
    Name = "{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}"
    Hostname = "{{ $hostname }}"
    Environment = "{{ $.Environment.Name }}"
    Network = "{{ $network.Name }}"
    Team = "{{ $id }}"
  }

  root_block_device {
    delete_on_termination = true
    volume_size = {{ $host.GetDiskSize }}
  }

  {{ if eq $host.OS "w2k16" }}
    {{ $scriptPath := ScriptRender "windows_uds.xml" $.Competition $.Environment $.PodID $network $host $hostname }}
    user_data = "${file("{{ $scriptPath }}")}"
  {{ end }}

  {{ if eq $host.OS "w2k16sql" }}
    {{ $scriptPath := ScriptRender "windows_uds.xml" $.Competition $.Environment $.PodID $network $host $hostname }}
    user_data = "${file("{{ $scriptPath }}")}"
  {{ end }}

  {{ if eq $host.OS "w2k12" }}
    {{ $scriptPath := ScriptRender "windows_uds.xml" $.Competition $.Environment $.PodID $network $host $hostname }}
    user_data = "${file("{{ $scriptPath }}")}"
  {{ end }}

  {{ if eq $host.OS "ubuntu" }}
    {{ $scriptPath := ScriptRender "ubuntu_uds.sh" $.Competition $.Environment $.PodID $network $host $hostname }}
    user_data = "${file("{{ $scriptPath }}")}"
  {{ end }}

  {{ if eq $host.OS "centos" }}
    {{ $scriptPath := ScriptRender "centos_uds.sh" $.Competition $.Environment $.PodID $network $host $hostname }}
    user_data = "${file("{{ $scriptPath }}")}"
  {{ end }}

  depends_on = [
    "null_resource.configure_{{ $genesis_hostname }}",
    {{ range $_, $dependency := $host.Dependencies }}
      "null_resource.configure_{{ $id }}_{{ $dependency.Network }}_{{ $dependency.Host }}"
    {{ end }}
  ]
}

{{ if eq $host.OS "w2k16" }}
  {{ $pwScriptPath := ScriptRender "windows_pw.ps1" $.Competition $.Environment $.PodID $network $host $hostname }}
  resource "null_resource" "configure_{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {
    triggers {
      instance = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
    }

    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      source = "{{ $pwScriptPath }}"
      destination = "C:/pw.ps1"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      inline = [
        "powershell -NoProfile -ExecutionPolicy Bypass C:/pw.ps1",
        "del \"C:/pw.ps1\" || ver1>nul",
      ]
    }

    {{ $fileUploads := $host.UploadFiles }}
    {{ $fileUploadCount := len $fileUploads }}
    {{ if gt $fileUploadCount 0 }}
      {{ range $localFile, $remoteFile := $fileUploads }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          source      = "{{ $localFile }}"
          destination = "{{ $remoteFile }}"
        }
      {{ end }}    
    {{ end }}


    {{ $scriptCount := len $host.Scripts }}
    {{ if gt $scriptCount 0 }}

      {{ range $_, $sname := $host.Scripts }}
        {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID $network $host $hostname }}
        {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
          provisioner "file" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            source      = "{{ $scriptPath }}"
            destination = "C:/laforge/{{ $sname }}"
          }

          provisioner "remote-exec" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            inline = [
              "powershell -NoProfile -ExecutionPolicy Bypass C:/laforge/{{ $sname }}",
            ]
          }
        {{ end }}
      {{ end }}

      {{ if gt $scriptCount 0 }}
        provisioner "remote-exec" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          inline = [       
            "rmdir /s /q \"C:/laforge\" || ver1>nul",
          ]
        }
      {{ end }}
    {{ end }}

    {{ if gt (len $host.OverridePassword) 0 }}
      provisioner "remote-exec" {
        connection {
          host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
          type     = "winrm"
          user     = "Administrator"
          timeout  = "60m"
          password = "{{ $.Competition.RootPassword }}"
        }
        
        inline = [       
          "net user Administrator {{ $host.OverridePassword }}",
        ]
      }
    {{ end }}
  }
{{ end }}

{{ if eq $host.OS "w2k16sql" }}
  {{ $pwScriptPath := ScriptRender "windows_pw.ps1" $.Competition $.Environment $.PodID $network $host $hostname }}
  resource "null_resource" "configure_{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {
    triggers {
      instance = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
    }

    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      source = "{{ $pwScriptPath }}"
      destination = "C:/pw.ps1"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      inline = [
        "powershell -NoProfile -ExecutionPolicy Bypass C:/pw.ps1",
        "del \"C:/pw.ps1\" || ver1>nul",
      ]
    }

    {{ $fileUploads := $host.UploadFiles }}
    {{ $fileUploadCount := len $fileUploads }}
    {{ if gt $fileUploadCount 0 }}
      {{ range $localFile, $remoteFile := $fileUploads }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          source      = "{{ $localFile }}"
          destination = "{{ $remoteFile }}"
        }
      {{ end }}    
    {{ end }}


    {{ $scriptCount := len $host.Scripts }}
    {{ if gt $scriptCount 0 }}

      {{ range $_, $sname := $host.Scripts }}
        {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID $network $host $hostname }}
        {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
          provisioner "file" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            source      = "{{ $scriptPath }}"
            destination = "C:/laforge/{{ $sname }}"
          }

          provisioner "remote-exec" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            inline = [
              "powershell -NoProfile -ExecutionPolicy Bypass C:/laforge/{{ $sname }}",
            ]
          }
        {{ end }}
      {{ end }}

      {{ if gt $scriptCount 0 }}
        provisioner "remote-exec" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          inline = [       
            "rmdir /s /q \"C:/laforge\" || ver1>nul",
          ]
        }
      {{ end }}
    {{ end }}

    {{ if gt (len $host.OverridePassword) 0 }}
      provisioner "remote-exec" {
        connection {
          host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
          type     = "winrm"
          user     = "Administrator"
          timeout  = "60m"
          password = "{{ $.Competition.RootPassword }}"
        }
        
        inline = [       
          "net user Administrator {{ $host.OverridePassword }}",
        ]
      }
    {{ end }}
  }
{{ end }}

{{ if eq $host.OS "w2k12" }}
  {{ $pwScriptPath := ScriptRender "windows_pw.ps1" $.Competition $.Environment $.PodID $network $host $hostname }}
  resource "null_resource" "configure_{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {
    triggers {
      instance = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
    }

    provisioner "file" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      source = "{{ $pwScriptPath }}"
      destination = "C:/pw.ps1"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "winrm"
        user     = "Administrator"
        timeout  = "60m"
        password = "LaForgeTempPassword!12345"
      }

      inline = [
        "powershell -NoProfile -ExecutionPolicy Bypass C:/pw.ps1",
        "del \"C:/pw.ps1\" || ver1>nul",
      ]
    }

    {{ $fileUploads := $host.UploadFiles }}
    {{ $fileUploadCount := len $fileUploads }}
    {{ if gt $fileUploadCount 0 }}
      {{ range $localFile, $remoteFile := $fileUploads }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          source      = "{{ $localFile }}"
          destination = "{{ $remoteFile }}"
        }
      {{ end }}    
    {{ end }}


    {{ $scriptCount := len $host.Scripts }}
    {{ if gt $scriptCount 0 }}

      {{ range $_, $sname := $host.Scripts }}
        {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID $network $host $hostname }}
        {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
          provisioner "file" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            source      = "{{ $scriptPath }}"
            destination = "C:/laforge/{{ $sname }}"
          }

          provisioner "remote-exec" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "winrm"
              user     = "Administrator"
              timeout  = "60m"
              password = "{{ $.Competition.RootPassword }}"
            }

            inline = [
              "powershell -NoProfile -ExecutionPolicy Bypass C:/laforge/{{ $sname }}",
            ]
          }
        {{ end }}
      {{ end }}

      {{ if gt $scriptCount 0 }}
        provisioner "remote-exec" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "winrm"
            user     = "Administrator"
            timeout  = "60m"
            password = "{{ $.Competition.RootPassword }}"
          }

          inline = [       
            "rmdir /s /q \"C:/laforge\" || ver1>nul",
          ]
        }
      {{ end }}
    {{ end }}

    {{ if gt (len $host.OverridePassword) 0 }}
      provisioner "remote-exec" {
        connection {
          host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
          type     = "winrm"
          user     = "Administrator"
          timeout  = "60m"
          password = "{{ $.Competition.RootPassword }}"
        }
        
        inline = [       
          "net user Administrator {{ $host.OverridePassword }}",
        ]
      }
    {{ end }}
  }
{{ end }}

{{ if eq $host.OS "ubuntu" }}
  resource "null_resource" "configure_{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {
    triggers {
      instance = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
    }

    provisioner "remote-exec" {
      connection {
        host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
        type     = "ssh"
        user     = "ubuntu"
        timeout  = "60m"
        private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
      }

      inline = [
        "sudo sed -i 's/^.*ssh-/ssh-/;' /root/.ssh/authorized_keys",
      ]
    }

    {{ $fileUploads := $host.UploadFiles }}
    {{ $fileUploadCount := len $fileUploads }}
    {{ if gt $fileUploadCount 0 }}
      {{ range $localFile, $remoteFile := $fileUploads }}
        provisioner "file" {
          connection {
            host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
            type     = "ssh"
            user     = "root"
            timeout  = "60m"
            private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
          }

          source      = "{{ $localFile }}"
          destination = "{{ $remoteFile }}"
        }
      {{ end }}    
    {{ end }}

    {{ $scriptCount := len $host.Scripts }}
    {{ if gt $scriptCount 0 }}

      {{ range $_, $sname := $host.Scripts }}
        {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID $network $host $hostname }}
        {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
          provisioner "file" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "ssh"
              user     = "root"
              timeout  = "60m"
              private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
            }
            source      = "{{ $scriptPath }}"
            destination = "/tmp/{{ $sname }}"
          }

          provisioner "remote-exec" {
            connection {
              host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
              type     = "ssh"
              user     = "root"
              timeout  = "60m"
              private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
            }

            inline = [
              "chmod +x /tmp/{{ $sname }}",
              "/tmp/{{ $sname }}",
              "rm -f /tmp/{{ $sname }}",
            ]
          }
        {{ end }}
      {{ end }}      
    {{ end }}
  }
{{ end }}

{{ if eq $host.OS "centos" }}
  {{ $scriptPath := ScriptRender "centos_uds.sh" $.Competition $.Environment $.PodID $network $host $hostname }}
  resource "null_resource" "configure_{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}" {
    triggers {
      instance = "${aws_instance.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}.id}"
    }

    connection {
      host     = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
      type     = "ssh"
      user     = "root"
      timeout  = "60m"
      private_key = "${file("{{ $.Competition.SSHPrivateKeyPath }}")}"
    }

    {{ $fileUploads := $host.UploadFiles }}
    {{ $fileUploadCount := len $fileUploads }}
    {{ if gt $fileUploadCount 0 }}
      {{ range $localFile, $remoteFile := $fileUploads }}
        provisioner "file" {
          source      = "{{ $localFile }}"
          destination = "{{ $remoteFile }}"
        }
      {{ end }}    
    {{ end }}

    {{ $scriptCount := len $host.Scripts }}
    {{ if gt $scriptCount 0 }}      

      {{ range $_, $sname := $host.Scripts }}
        {{ $scriptPath := DScript $sname $.Competition $.Environment $.PodID $network $host $hostname }}
        {{ if ne $scriptPath "SCRIPT_PARSING_ERROR" }}
          provisioner "file" {
            source      = "{{ $scriptPath }}"
            destination = "/tmp/{{ $sname }}"
          }

          provisioner "remote-exec" {
            inline = [
              "chmod +x /tmp/{{ $sname }}",
              "/tmp/{{ $sname }}",
              "rm -f /tmp/{{ $sname }}",
            ]
          }
        {{ end }}
      {{ end }}
    {{ end }}
  }
{{ end }}

{{ $fullHostname := printf "%s-%s" $hostname $id }}

output "public_ips.{{ $fullHostname }}" {
  value = "${aws_eip.{{ $id }}_{{ $network.Subdomain }}_{{ $hostname }}_eip.public_ip}"
}

{{ end }} {{/* End Host Iterator */}}
{{ end }} {{/* End Network Iterator */}}