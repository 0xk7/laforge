// Code generated by fileb0x at "2020-12-22 11:59:31.453210798 -0500 EST m=+0.002415033" from config file "assets.toml" DO NOT EDIT.
// modification hash(ced782a52f87743c3e3116a165d5b2a3.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\x95\xb9\x0e\xbb\x4a\xd2\xc5\x73\x9e\xe2\xcb\xd1\x27\xb3\x1a\x13\xdc\xa0\x69\x9a\xc5\xd0\xec\x60\x43\xc6\x8e\xc1\x36\x66\x5f\x9e\x7e\x74\xff\x93\xcc\xd5\xcc\x49\x4a\xfa\x1d\xe9\x54\x25\xa5\xf3\xff\x7f\x4b\x42\xaa\x6e\xfd\x1f\x44\x5e\xa0\x2b\x3a\x04\x01\xfa\x43\x09\xac\xeb\x8a\xd9\x42\x08\xf6\xb4\x06\x9b\x2e\x81\x5a\x0f\x8b\x56\xed\x8d\x43\x79\x04\xdc\xd4\xb7\x0e\x06\xe5\x18\x7b\x2e\x25\xe4\x88\xdd\x36\xd9\x8d\xef\x46\x9f\xe8\xcd\x9a\x5b\xc0\x45\x26\x21\xb9\x60\x33\x03\x64\x62\xd0\xa9\x80\x0e\x91\xd4\x60\x18\x45\x78\x87\x27\xb8\x4b\xb5\x15\x49\xa0\xc6\xa0\xe3\x0d\xec\xa1\x4d\xde\x62\x39\x72\x5d\x43\x06\x8d\xec\xfa\x5b\xed\x3f\xf8\x96\x30\x5b\x50\x2a\x1b\x75\x60\x19\x1d\xb8\xd5\x77\xab\x0d\x79\x1c\x28\xe9\x1f\x16\xfc\x93\x61\xf4\x9f\xc1\x71\x00\xde\x51\x40\x60\x77\xda\xa0\xfb\x27\x59\x97\xc1\xdd\xf6\x5b\x14\x60\x09\xfd\xb9\x06\xd6\x9b\x11\xa9\xd1\x59\xc0\x7f\x6f\x33\x5b\xe4\x63\x09\xfc\xf1\xc0\xb6\xdd\x33\x55\x6c\x89\xf8\xb1\xf7\x19\x6b\x51\x58\xd7\xa1\xde\x02\x4b\xaa\xbb\xa1\xe9\x5e\xaa\xb8\x51\x12\x70\x91\x02\x80\x0d\x41\x7d\x03\x7f\xfb\xb0\x36\x20\xa8\x11\x58\x87\x32\x82\x1c\x39\x3e\x59\x2e\x20\xee\x19\x27\x7c\x2d\x3d\xb6\x3b\x6e\x1b\xc7\xd9\x7c\x2e\xc1\xac\x2d\xa9\x46\x95\x76\xe2\xe6\xbb\x11\x38\x6b\xec\x2f\x4f\x4f\x88\x83\x38\x94\xbc\xe2\x08\x5e\x50\x88\xad\xd2\xe3\xa6\x1f\x26\xc5\x90\xa0\x7f\x2d\xff\x3e\x8e\x00\xae\x17\x27\x22\xdf\x42\xf6\xad\xeb\x2d\x96\xc7\x79\x52\x32\x6d\x0d\xfa\xac\x7f\xde\x71\x61\x37\xe3\xfe\x35\xd4\xe3\xee\x38\x9d\xc6\xa0\xb3\x9e\x13\xea\xa1\x3e\xec\x7b\x41\x78\xf7\x48\x4f\x98\xec\x87\x48\x17\x8a\x02\xa7\x09\x31\x98\x3d\xbc\xe4\x63\x7e\x7c\xe1\x45\xe5\x70\xd2\xec\xe7\xd1\x5c\xb5\x5b\x42\xbf\x56\xc6\x79\x79\xb7\x44\x9c\x13\xf2\x05\x81\xe7\xef\x83\x4d\x64\xca\x01\x7f\xbf\xea\x92\x7b\x3f\xfa\xfc\x5a\x29\xc3\x6b\x66\x3c\x3d\xa9\x59\x1e\xee\x2c\x57\x5f\x10\x4a\x77\x38\x2a\xf7\xdd\x42\x02\xb2\xbf\x69\xf3\x88\xcc\x5b\x51\x89\x47\x27\xc9\x4a\xc9\x6f\x44\x89\xc9\x8f\x90\x27\x7b\x27\xea\xd8\x46\xc3\xe7\x09\x9e\xf6\x39\xbc\x85\x3c\x77\x9a\x65\xeb\xb1\xf3\xd3\x92\x4a\x45\x52\x57\xb9\xc3\x6a\x53\xa8\xbd\xc5\x93\x85\x14\x31\x77\xa3\xac\xc8\x05\x93\x38\xc4\x85\x67\x1f\x9d\x46\x0b\xc2\xed\x72\xda\xd7\x05\xf7\xbb\x59\x8d\x64\xb7\x78\xf4\xf5\x76\x7b\x9b\x65\x45\x92\x48\x7e\x90\x14\x33\xd2\x43\x56\xe8\xc7\xc9\x53\xad\xf7\x9e\x0d\xaf\x3b\xd8\x7e\x22\xf6\x86\x57\xdf\x61\x5e\x94\x9a\xef\x37\xf6\x3e\x64\x56\x78\x51\xc8\x96\xc9\xcd\xdc\x8a\xc3\xe3\x8e\xe5\x79\x1e\x9c\x39\xca\x0d\xb5\x63\x71\x9a\xdb\xea\x63\x0d\x14\xa6\x79\x6c\x64\xf8\xb4\xde\x3e\x71\xf5\xfc\x77\x22\xd2\x87\xc1\x1c\xb9\x18\x3d\xc9\xcc\xe6\x67\xa8\x65\xe6\x61\x5e\xf1\x67\xc9\x48\x17\xed\x74\x64\x05\x45\x77\x3b\xec\xb2\x76\xb1\xc1\x82\x64\x51\x40\x12\xf9\xdc\xd3\xfd\x54\x29\x51\x73\x52\x76\x8f\x45\xf2\x0a\x85\x21\xfc\xb5\xd2\xcd\x9c\x3e\x9f\x54\x30\xaf\x82\xfa\xa0\xcb\xd6\xd1\x4b\x54\xb1\xf4\xcc\x34\xd1\x06\xeb\xf1\x0d\x79\x83\xc9\x81\xa7\x2c\xd4\x75\x57\x96\x7a\xa1\x89\xaf\x33\x49\xb3\xb8\x56\x54\xf6\x33\x26\x67\x22\x33\xd2\xe8\x0d\x14\x96\xfd\x97\x1d\x6b\xb8\x9a\xda\xbb\x11\x17\x7d\xca\x35\x9d\x2f\x27\x0a\x76\xb2\xbd\xdf\xfd\xc5\x6b\x0f\xab\xd5\x7e\x30\xd3\x89\xfd\x04\x60\x09\x3f\x46\x24\x02\x66\xeb\x37\xc7\xa2\xa1\xd1\x4c\x5e\x3d\x2a\x9d\x34\x9e\x08\x82\x0d\x01\x90\xe2\x0d\x43\x6e\x33\x41\x2c\x47\x1e\xe5\x49\x30\xdc\x74\x4e\xff\xe7\x2f\x34\x3b\xf8\x5f\x92\x9a\xcd\xbb\xfc\x3d\x31\xa0\x54\xe8\x0f\xaa\xaf\x67\xac\xec\x22\x09\x6e\x21\x00\x9c\x0e\x09\xe0\xca\xba\x38\x39\xec\xc6\xed\x4c\x7d\x19\x9c\x57\x22\xf8\xed\x3a\x0e\x61\xe4\xbc\xd3\xd9\x5f\xe3\x43\xfc\x72\x17\xcd\xfb\x4a\x1b\x4c\x3f\xd2\xa5\xcc\xc4\xa4\x08\x31\xf9\x75\xfa\x04\xbe\x82\x8d\xe0\x33\xa6\x5a\x82\x79\x7a\xf1\x65\x1f\x72\xef\x8b\xce\x5c\x3b\xe9\xbb\x48\x8c\xf3\xfa\xd1\x3d\x2c\x74\x6f\xbd\x1e\x2c\xa7\xf6\xf7\xfb\x08\xfd\x89\x52\x7b\xf2\xa2\xac\xc0\xd1\xe3\xb5\xe0\x1b\xc4\x11\x18\x4b\xbd\xe4\x91\xd7\x31\x6d\xaf\x5b\xb6\xbf\xef\xbf\xc1\x38\x53\x8f\x4d\x54\xd5\xce\x34\x26\x50\xba\x2c\xa2\xc7\x1b\x8e\xeb\xa4\x9a\xe2\xc6\xfe\xb0\xde\x4f\xd1\x97\x35\x88\x9b\xf6\x63\x3a\x80\x08\xe3\xe5\xd6\x0a\x6f\x18\xf1\xde\x18\x9c\xc1\xa5\x9a\x9a\x67\xcf\xa9\xe1\x47\xf2\xad\xb9\xde\x7e\x8f\x93\x97\xe0\x8d\xc3\xbe\x94\xa2\xb9\x51\xc5\xdc\x16\x6b\x3b\x65\x70\x25\xdb\xa1\xdb\x87\x1e\xa1\x89\x6d\x36\xdd\x68\x93\x0f\x1a\x4f\x41\xc3\x88\x6b\x8a\x35\xb4\xf5\x94\x18\xa0\xd2\x4f\xf6\xa5\xed\x42\x45\x8f\xb2\x36\x2d\x1d\x7b\x71\x9b\xa3\xbd\x2a\x4b\xec\x0c\x34\x59\xc6\xe9\xd7\xbb\xae\x44\x9e\x54\xc9\x25\xb5\x83\x52\x86\xa7\x59\x29\x0d\x33\xb2\x05\x19\x5f\x0e\x0d\xbc\x1c\xf0\xfb\x35\xe9\x5a\xad\xad\xc9\xed\xcc\xe2\x71\xf1\x96\xd9\x95\xce\x9b\xcc\x70\x7f\xde\x9e\xbc\x15\x37\xef\x81\xd0\x4e\x81\xa6\x90\x73\x8b\x8c\x8e\x4c\x6d\x56\x15\x7c\xbe\xe2\x65\xa1\x62\x51\xe6\x5b\x9c\x73\xbe\x93\x2b\x59\xe6\xc6\xae\x47\xb9\x6c\x6a\xd7\x8c\xba\x4e\x0c\x47\x8b\x57\xe0\x7b\x0a\x4f\xb7\x90\xc0\xa1\xb5\xf6\xc0\x62\x5e\xce\xbb\x33\x85\xc6\x90\xd7\x51\xb9\x70\x4a\xb5\xdf\xe2\x84\xf6\xe6\x64\xf4\x45\x8f\x0b\xc9\x37\xb5\x46\x1c\x74\xfc\xf5\x33\x97\xba\x35\xdc\xcc\xa6\xaf\xbe\xe2\x9d\xc5\x84\xe6\x17\xc6\x23\xcd\x59\xb7\x20\x31\xf8\x38\xc1\xf7\xcb\x0e\xc9\xdb\x2f\x8a\x90\x64\x98\x5c\xda\x75\x7e\x8e\x7f\x60\x44\xe5\x84\xc4\xdb\x49\x3f\x1d\x1b\x35\xb4\x50\x9c\xac\x78\x70\xf6\xd8\xdf\x89\x94\x92\x1e\xe0\x69\xc8\xd5\x1e\xae\xce\xf5\x68\xbb\x60\xa7\x04\xd5\x7a\x5e\x40\xdb\xa4\x8f\xfc\xdc\xfb\x9a\xf5\xd4\x62\xe2\x07\xb1\x6c\x1c\x37\x79\xe1\x27\xfb\x95\xb2\x24\x8c\x95\x2a\xda\x72\x9b\x58\x5e\xea\xed\xa5\x99\xab\x3d\x0d\xe3\xcc\x86\xe3\x94\x35\xe2\xa6\xfb\xac\xfe\x91\x22\x60\x65\x8f\xe1\x3b\x8a\xe0\x22\x46\xc5\x21\xd3\xd0\xfd\xeb\x2f\xe2\x4f\x23\x22\x4b\xfe\xef\x96\xfc\x57\x00\x00\x00\xff\xff\x60\x7c\x94\xa5\x42\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
