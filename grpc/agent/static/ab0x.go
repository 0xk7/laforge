// Code generated by fileb0x at "2020-12-22 13:50:06.691948736 -0500 EST m=+0.001122151" from config file "assets.toml" DO NOT EDIT.
// modification hash(8d496a166e19f8b24e151ab97f3d8f05.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\x95\xb9\xce\xbb\x4a\x12\xc5\x73\x9e\x62\x72\x6b\x04\x98\x3d\xb8\x41\x37\x34\x7c\x2c\x0d\xc6\xec\xce\xd8\x77\x1b\x0c\x06\xcc\xd3\x8f\xfe\xdf\x24\x73\x35\xf7\x24\x25\xfd\x8e\x74\xaa\x92\xd2\xf9\xf7\x1f\x41\xa4\xe9\xf6\xbf\x64\x74\xf7\x75\x55\x97\x81\x8f\x7e\x29\x81\x75\x5d\xb5\x3a\x59\x06\x47\x5a\x83\x5d\x87\xa0\xd6\x03\xad\x0f\x82\x80\x8c\xed\xb9\xe9\xac\xd1\xaf\xb4\x75\x17\xb4\x28\x97\x9e\xf5\xd9\xef\x8a\x9b\x18\xe6\xeb\xa1\x37\x5b\x6e\x03\x17\x59\x04\x74\xc1\x6e\xf9\xc8\xc2\xa0\xd7\x00\x1d\x20\xd8\x60\x39\x0c\xf1\x21\x9f\xc0\x80\xb5\x1d\x42\x50\x63\xd0\x73\x26\xbe\xa3\x5d\xd9\x13\x25\x74\x5d\x53\x01\x8d\xe2\x7a\x7b\xed\x45\x5c\x47\x58\x1d\x28\xd5\x9d\xfa\x62\x05\x7d\x71\xa7\x1f\x8e\xe2\xb2\x58\x29\xd2\x5f\xe6\xff\x9d\x61\xf4\xbf\xc1\x89\x0f\x86\xd0\x27\xb0\xbb\xec\xb2\xfb\x9b\xac\x2b\xc0\x70\xbc\x0e\xf9\x18\xa2\xdf\x6b\xe4\x7a\x37\x43\x2d\x3c\x0b\xf9\xbf\xdb\xac\x0e\x79\x18\x82\x5f\x0f\xec\xbb\x91\x69\x52\x47\x24\xd1\xf1\xca\x18\x9b\xc2\xba\x2e\xeb\x1d\xb0\x61\xdd\xcf\x4d\xdf\x6a\xd2\x4e\x41\xe0\x22\x15\x00\x47\x06\xb5\x08\xfe\xf8\x72\x6d\xca\xa0\x46\x60\xa2\x95\x62\x98\x8a\x90\x15\x1f\x0f\xc2\xf7\xfd\xfa\xa1\xa5\xb6\xe4\x71\x2c\x6b\x19\xb3\x95\x57\xbd\x15\xa4\x23\xf7\x74\x8e\x9b\xce\x28\xb1\xa3\x7a\xa0\x4a\x5e\x12\xc2\x29\xe5\xce\x94\x6c\xab\x0f\xd7\xd8\x9b\x80\x54\xa6\x38\xbf\x98\xc4\xa9\x88\x3b\xb9\x3d\xe2\xe1\x4c\xf4\x04\x4e\x68\x2b\xbe\xfc\xb3\xea\xfc\x72\xbe\x73\x19\x63\x9e\x2e\x29\x48\x0e\xe4\xe1\x7b\x5d\x1a\x43\xe0\xaa\xf8\xdb\xc5\xd2\x00\x04\x66\x25\x79\x74\x63\x0d\xc2\x48\xb1\xfd\x52\x23\xca\xae\xa5\xa0\xf2\x63\x6d\x1e\x45\x1a\xfe\xcc\x61\x64\x0b\x4b\x87\x9e\x69\x5d\x57\x93\x8f\xfb\xaf\xc9\x1f\x0f\xa3\x8d\xed\x3d\x58\xde\xf7\xa1\x44\x71\xff\x76\xbb\x17\xf9\x21\xc4\xa2\x6f\xb8\x76\x4a\x15\x93\xdc\xf8\xe3\x7c\xb1\xd4\x7a\xa4\x10\x4e\xa1\xeb\xf0\xad\x67\x36\xc6\x75\x88\x35\xda\x6f\x4e\x5e\x69\x77\x51\x92\xf5\x19\x08\xef\xb2\xa6\x2d\x5b\xb1\xd7\x9b\x34\x11\x22\xe5\x86\xfb\x91\x6c\xdb\x45\xfa\xfc\x9c\x5b\x22\xff\x7c\x1c\xf0\x86\xd1\x13\xb5\xd3\xa4\x90\xa7\xfb\x95\x24\x6e\x7a\xf8\x29\x7d\xd9\x66\x43\x0d\x4d\x6d\x09\xce\xcb\x77\x6a\x84\xab\xdf\x1a\x46\x45\xdc\x22\xd6\x44\x2e\xea\x3b\x41\xa2\xc3\xc5\xbc\xc8\xc3\x8e\x3b\x0b\x8f\xbc\xa6\xdd\x03\x65\x4d\x52\x05\x08\xc9\x73\xcb\xaf\x3d\xfb\x75\x5c\xa0\x65\xcd\x2e\xa4\x36\x6b\xbd\x6e\x74\x28\x2d\x09\x26\xd2\x65\x7d\x03\x57\x28\xcd\x4b\x75\x38\x81\xf4\x65\x3a\x72\x6d\x0e\x49\x53\x7d\x32\x78\x87\x94\x7c\x31\x73\x0b\x53\x5e\x16\xda\xbc\xa5\x24\x90\xb2\xf4\xd8\x99\x2f\x42\x53\x1f\x11\x8e\x75\x08\x88\xb7\x04\xb5\x16\x4b\x26\x73\x1b\x5b\x65\xd6\xa3\x1f\x67\xed\xe4\x13\xea\x35\x75\x17\x43\x9f\x13\x83\x44\x5b\x24\x4a\x79\xca\xe8\x62\x1b\x66\xc3\x7b\x78\xde\xf6\x81\xda\x3e\xd9\x87\xb9\x00\xae\x22\xc6\xd8\xa3\x3e\xbd\xe4\x9b\xe7\x58\x0d\x64\x15\x95\x45\xb9\x7c\x26\xc7\x78\xd3\xf5\x5b\xbd\x89\xb8\xa8\xd3\xcf\x46\xc1\xa9\xbc\x8e\x22\x7b\x15\xe9\xb9\x7e\x0d\x00\x93\x80\x5a\xce\xcb\xe3\xe7\xb0\x08\x90\x14\x46\x9f\x87\xb5\x9f\x69\xce\x5a\x88\x32\x74\x39\x24\x33\xfe\x38\x2d\x29\x77\xa3\x5b\x04\x69\xef\xe1\xf3\x25\x85\xb4\x68\xbc\xfb\xcf\xea\x2b\x40\x5e\x90\xcd\xc3\xe6\xc7\xa5\xa6\x7f\x38\x42\x5d\x92\x9f\x40\xff\xc4\x79\xe8\x17\x5e\x87\x62\xf2\x15\x34\xa5\x73\x56\xec\xfd\xeb\x3b\x22\x96\xc1\x8e\x00\x48\xf1\x8e\x65\x76\xb7\x40\xa2\x84\x77\xea\x0e\xe5\x60\xd7\x59\xfd\xef\xbf\xd0\x1c\xe0\x9f\x04\x9b\xfd\x4e\xfe\x99\x18\x50\x9a\xec\xcd\x9a\xa7\x67\x8c\xe2\x22\x28\xef\x01\x00\xac\x2e\x13\xc0\x95\x13\x6e\x55\x43\xe7\x76\x7d\x8c\xb1\x6c\x47\xac\xb4\x27\xed\xfa\x83\x42\x1b\x65\x89\x7f\xb5\xba\xb3\x19\xd6\xa2\xf7\xd3\x2f\xbc\xde\xc7\x6c\x9a\x5e\xfe\x18\x39\x02\x1c\xb6\x4b\xaf\xf5\x13\x21\x39\x27\x9f\xf4\x7c\xd9\xf1\xec\xa8\xf2\x00\xfe\x94\x96\x1d\x6d\x4c\xf4\x39\xf7\x61\xae\x9f\x5b\x89\x23\x37\xf1\x99\x0d\xcd\xcb\xc6\x26\x6a\xee\xdb\x4a\x12\x1b\x55\xba\xdc\xd0\xce\x6d\xe3\x4e\x30\x01\x6a\x11\x6d\xe5\x57\x36\x50\x0d\xf3\xad\xa3\x5b\x73\xfb\x81\x15\xbb\xd1\x93\xde\xdd\xea\xb6\x30\x52\xaa\x54\xeb\x2c\x91\xb8\xc5\x69\x1d\xbc\x42\xf5\x1d\x86\x0c\xf0\x40\x98\x50\x61\x51\x11\xaf\xb4\x0b\x46\x0e\x1b\x61\xbd\x42\x5c\x8b\x64\xac\x18\x38\xb0\x27\xd6\xe6\x8d\x60\xb0\xab\x53\x85\xb4\xf8\xbd\xe7\xc8\x49\x84\xf7\x57\xf9\x64\xa6\x19\x07\x9f\x2c\x8d\xe6\xa2\x96\x5b\xe6\x55\x10\xeb\x93\x56\x9a\x30\xe8\x92\xbb\xd1\xe6\x0f\x31\x5c\x2e\x51\x21\x2b\xdc\x65\x6f\xf3\xcd\x98\xfa\x07\x47\x5f\x2e\x53\x72\xf6\x26\x97\xae\x53\x93\x31\xe0\xf9\x9e\x31\xb3\x93\xdd\xe0\xc6\x42\xe3\x7b\xc4\xaa\x4c\x98\x3a\x5e\x03\xa2\xa4\xf9\x11\x87\xd8\x15\xc8\x61\x3f\xac\xb9\x2c\xdd\xb7\x63\x46\x72\xa7\x17\xea\x9d\xbf\x3d\xf2\x70\x4d\xb5\xfc\x31\x84\x0a\x78\xe4\xc1\x8d\x53\x5a\x66\xae\xc1\xaa\x12\xd5\x2c\xea\x8e\x2e\x79\x73\x1c\x29\xd9\xb4\x36\xfa\xed\x76\xe7\x37\x71\xf6\x04\x4d\xf3\xe9\x34\x43\x26\x4d\x0a\xd7\x83\x9e\x0d\x83\xdb\x3c\xa6\x8b\xf3\x6b\x5a\x1e\x27\x98\x79\xbf\x4c\x4b\x27\x24\x7e\xf6\x76\x9c\xca\x08\x1e\xeb\x7b\x3c\xc4\x16\xc0\x49\xd0\x96\x54\x3a\xd5\xb9\xcd\x2a\x5d\xe8\x4a\xea\xd6\xf0\x9d\x7d\x70\x12\xb3\x66\xa7\xba\x90\x6c\x74\xa5\x32\xf0\x94\xe3\xf6\x72\x99\xc5\x82\xd0\x8b\x3d\x9b\xcc\x94\xa4\x6f\x16\xa9\x68\x49\xdf\xcf\x48\x7b\xe6\xfc\x26\xe0\xc7\xec\x49\xbe\x7e\xdc\xbd\x8c\xa5\x51\xd9\xc4\x37\xea\xfa\xd6\xc2\xe2\xc2\xce\x6a\x44\x07\xca\x6e\x4e\x02\xa0\x15\xc2\x5d\x8e\xba\x8f\x9e\x70\x67\xa4\xef\xeb\x0b\x99\xd4\x7a\xaa\x27\xfd\xd5\xed\x92\x9d\x98\x7a\x49\xb8\xb9\x41\xf6\x5a\x34\xfd\xf1\xad\x4d\x4d\xb1\x16\x21\xe1\xd3\xf8\x1d\x5c\x93\xe6\xb3\x8d\x5c\x40\xe8\xb2\xb3\xd6\xa4\x9e\x7f\xf8\x74\x00\xbd\x43\x33\x12\xb8\x92\x9b\x2f\x33\x65\xe6\x30\xf9\x58\x1c\x9a\xaa\x0f\xae\x56\x1f\x99\x5f\x0f\xee\x5f\x7f\x11\xbf\x8d\x88\x6c\xe5\xff\x5b\xf2\x3f\x01\x00\x00\xff\xff\xd7\x2c\x08\xa1\x42\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
