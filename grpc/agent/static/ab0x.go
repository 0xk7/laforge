// Code generated by fileb0x at "2021-05-13 20:49:21.42924526 -0400 EDT m=+0.005732074" from config file "assets.toml" DO NOT EDIT.
// modification hash(26e84c17280f5aa245a8c7b082f686fb.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileGitignore is ".gitignore"
var FileGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xd2\x2b\x48\xcd\x05\x04\x00\x00\xff\xff\xe2\xf2\xc6\x72\x05\x00\x00\x00")

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\x95\xb9\x0e\xbb\x4a\xd2\xc5\x73\x9e\xe2\xcb\xd1\x27\x83\x31\x36\x04\x37\x68\xf6\x66\x33\xcd\x66\x43\x86\xd9\x31\x3b\x86\x06\x9e\x7e\x74\xff\x93\xcc\xd5\xcc\x49\x4a\xfa\x1d\xe9\x54\x25\xa5\xf3\xff\x7f\x4b\x90\x55\x68\xff\x9f\x28\xbb\x3e\x54\xa0\x08\x7c\xf9\x0f\x25\x2c\x08\x15\xb3\x11\x45\xb0\x27\x25\xc0\x50\x00\x25\x0c\xe2\xc5\xfd\xfd\x76\x1e\xf4\x6f\x1e\x2d\xcf\x57\xcf\x78\x54\xbe\xf0\x74\xe2\xf3\x10\x4b\x28\xd2\x8d\x21\x86\xd5\x96\xda\x00\xc9\x26\x21\x20\x80\x4d\x5f\x36\x2d\xf0\x55\x01\x1d\xc8\x42\x65\x89\x61\x68\xed\xe2\x09\x74\xa1\xb4\x43\x01\x94\x16\xf8\xb2\x86\xe5\xca\x58\xc2\x91\x14\x22\x64\x48\xa0\x92\x90\x87\x4b\xef\xc5\x36\x84\xd9\x80\x5c\xc1\xd4\x61\xf9\x80\xb6\x7c\x84\x2d\x09\x5e\x2d\x3f\x4e\xfe\xb0\xe6\x9f\xcc\x92\xff\x33\x38\xf2\x41\x1b\xfa\x84\x85\x16\x2c\xa2\x3f\xc9\x50\x02\xfa\xd3\x6b\x64\xdf\x12\xe4\x3f\xd7\x88\x25\x36\x42\x35\x3c\x33\xf1\xdf\xdb\xcc\x46\xf6\x2c\x01\xfc\xf1\x00\xc6\xfa\x47\xe5\x1b\x22\x7a\xed\xc3\x87\xb1\x29\x0b\x42\x11\x36\xc0\x16\xca\xef\x54\x7d\x6b\x95\xc7\x94\x00\x90\xac\x00\xf0\x14\x41\xc9\x81\xbf\x7d\xb1\x34\x44\x50\xca\x80\x39\x12\x9f\x71\x2f\xe4\x02\x72\x8e\xd0\xe7\x37\xd6\xe7\x85\x6d\xeb\x5d\xbe\x2a\xd3\xfd\xd3\xcc\xb6\x73\x05\x43\x56\x7e\xbb\xec\x31\xe9\x51\x57\xaa\x4a\xc2\xe1\xe2\xad\x46\x3e\x4e\x8f\x1f\x67\xb4\x1d\x0b\xfc\x01\x8f\x73\x3a\xf2\x2f\x22\xd7\xb5\x0a\x15\xf4\x43\x4d\xd7\x11\x8a\x22\x1a\xdd\x57\x3b\x47\xfc\x95\x46\x1d\xb8\x76\x86\xeb\x99\xd5\xc0\xa2\xe8\x39\xd7\xf6\xa5\x12\x3c\x4e\x48\x6f\x6d\xd6\x99\xcc\xef\xcd\x1f\xe6\xd3\x61\x88\x7a\x0e\xc4\x63\xd8\x7c\xf4\x0e\xd7\xd7\xa5\x65\x2d\xdc\x2a\xe3\xfe\x99\xfa\x1a\x3c\xbd\xdb\x43\x6d\x1e\xba\xd4\x2a\xe6\xf0\x13\x40\xe1\xc9\x07\xbf\x87\x9b\x93\x17\x1f\xa9\x41\x8f\x27\xe3\xf0\x15\x41\x05\x7c\x7c\x23\x49\xde\x7f\xaa\x79\x62\x71\x4b\xdb\x5a\xc7\x6f\x1d\x51\xa3\x92\x9d\x9f\x36\xd9\x93\xc6\xa2\x26\x39\x5d\x7f\xb9\x7e\x98\x65\xf3\x2e\x6d\x73\xb3\x2f\x46\xd9\xc4\x0c\x2a\xf5\xa6\x23\xe4\x65\xbf\x63\x0a\x60\x88\x38\x59\xd3\x2e\x0d\xc7\x96\x61\x43\x1f\x6d\xf6\xcb\x7e\x6a\x48\xba\x07\xc4\x6f\x8b\xe4\xaa\xf2\xa4\xe3\xd5\xbc\xbc\xc8\x6b\xed\xfa\x1a\x22\xcd\xda\xf8\x90\x29\xbb\x12\x9c\x90\x64\xb5\x79\x87\x4d\xf3\xb9\x1e\x18\x4f\x62\xff\x7c\x7a\x6c\x85\xe3\xef\xf7\xab\x0d\xc5\xa1\x2a\xe2\x1d\x62\x2b\x64\xfb\xeb\x9b\x23\x49\x51\x90\x0c\xa8\x04\x95\xf6\x8e\x93\xa6\xeb\x6d\x83\xa0\xfb\xf3\x2b\x6f\xf9\x8b\xac\xe6\xc1\x29\xa7\x6c\x36\x27\x58\x0e\x30\x5b\x7a\xd6\xa7\x6e\x46\x39\xd3\xda\xba\x1f\xc5\x4b\xdf\xb4\x37\x1a\x64\x9c\x33\x46\x64\x31\xfd\x11\xa9\xc1\xdb\x5a\xc7\x82\x18\xa8\x03\x92\xe7\x23\x4f\x7e\xd7\x27\x4d\x3d\x9a\x1c\xde\x98\xfd\x2b\x5a\x2d\x9f\x55\xb4\x9a\xa4\x8a\xf0\x32\x96\x31\xac\xaa\x6e\x74\xc6\xe6\x14\xde\xea\x8b\xa1\xbc\x29\xee\x85\xad\x3d\x3d\xef\x41\x8c\x8c\x71\xef\x48\x7f\x4b\xca\x92\xe4\x25\xe4\xf6\x4f\x28\x75\x2a\xef\xd6\x85\xb0\x6a\x92\xd7\x85\xd9\xd7\x7e\x74\x5b\x08\xba\xb4\xd9\x7f\xfa\x25\x25\x5b\xd9\x74\x69\x78\xda\x97\x47\x14\x49\x19\xb1\xb3\x03\xb2\xb9\x35\x44\x90\x0b\x3d\xaf\x28\x3d\x5f\x23\x75\xb1\xec\xbb\x49\x39\x8b\xa4\x2e\x13\x88\x9e\x7a\xf1\x32\x7a\xe9\x48\x3b\xa7\x0c\x6b\x88\xfc\x1b\x75\x7e\x84\x69\x2f\x1c\x4e\x7c\x13\xde\x59\xdb\x73\xbf\x99\x3a\x79\x41\xce\x74\x0d\xea\x63\xf5\xf2\xeb\x92\x1a\xfb\xde\x0a\x35\x27\x02\x2c\x03\x90\x58\xd8\x12\x6f\xd8\x04\x91\x14\xba\x94\x2b\x88\x01\x86\x37\xf8\xcf\x5f\xa8\x76\xf0\xbf\x24\x54\xd8\xbd\xfc\x3d\x2d\x40\xa9\xa2\x37\xa9\x1e\xfc\x30\x12\x92\x05\x11\x07\x00\xdc\xa0\x48\x00\x04\xac\x60\xc5\x1d\x16\xda\x53\x83\xa9\xe3\x00\xb7\x19\xd1\x5a\x3e\x6f\xdf\x47\x89\xba\xad\x1b\x2e\x54\xa6\x59\x77\x41\x0a\x7c\xd2\xb4\xa7\x58\x95\x99\xc5\x78\x54\xda\x00\x2c\x4a\x2c\x06\x22\x98\xa7\xa0\x48\x96\xb7\x98\x9e\x23\xe2\x83\xe4\xe3\xc7\xc8\xca\xf0\x3a\x2e\x85\xfc\x1c\x2a\x90\xab\x55\x22\x5c\xee\xe8\x01\xe2\xb2\x5f\x31\x43\x1f\xb9\x30\x2f\x16\x6d\x48\x14\x55\x24\x20\x27\x24\x72\x97\xe5\xc9\x0c\xe0\xad\x2d\x3e\xb7\x73\x2d\x9a\xe2\x52\x5e\x92\x05\xd7\x51\xfb\xfe\x6d\x4e\x93\xdb\x09\x2d\xd7\x45\x90\x2a\x25\xa4\x8d\x2f\x4b\x6e\xac\x79\xa3\x84\xd2\xbf\x6b\x1c\xa5\xdc\x08\xd5\xaa\xdf\xbd\xbe\x56\xe1\xb1\x46\xe2\x74\x34\x8f\xdc\x8c\xa6\x1b\xeb\x1e\x5e\xfa\x08\xd9\x9f\x90\xd0\x7b\x88\x53\x2b\xcd\x40\x62\x26\xa7\x06\x28\xfd\x6e\xf9\xf0\xb0\xe1\x2f\x61\xe2\x19\x0c\x44\x96\x73\x23\x26\x65\xe5\x7c\x1b\x03\x3f\x9f\x6f\x5d\x79\x66\xc3\xc3\x7f\x19\xf1\x1d\x6a\x38\xca\x16\xad\xaa\x52\xd7\x14\x4e\xbe\xc6\x21\xe2\xb7\x6b\x5f\x3b\xc2\xd7\x3c\x84\x00\x7c\xe7\x89\x6e\x89\x89\x12\x7c\xfa\xd2\x53\x81\xc9\xe8\x5b\xd3\x52\x13\x4f\x3f\x14\x30\xed\xb2\x53\x79\xdf\xdf\xc6\x0c\x13\x36\xb2\xe4\x27\xc6\x77\xe6\xf5\xe1\x81\xae\x44\xa5\x06\xc7\x5f\xc9\xdf\xae\x0e\x53\xec\x11\xb1\xc8\x2e\x1d\x3b\xf8\xcb\x36\x33\x73\x74\x5e\x27\xcb\x52\x33\xa9\xc3\x95\xfd\x9e\xfd\x30\xfb\x7c\xbc\x74\xd3\xc1\xf0\xc6\x5b\xe5\xbb\x66\xfa\x76\x33\xbc\x8a\xad\xfd\xeb\xd5\x18\x5d\xe3\x72\xd8\x08\xca\x14\x56\xf0\xea\x63\xf3\x58\x99\x2c\xf1\xa4\x60\x3f\xc5\xa0\x93\x8f\xab\xac\x2f\x9d\xad\xa7\x20\x3f\xd2\x4b\xfb\x42\xb5\xab\x9b\xe2\xab\xd6\x14\xcf\x1b\x19\xbe\xd6\xdc\x75\xb0\x6b\xec\xd1\x44\x1d\x4e\xae\xf9\xcb\xf8\x7c\x95\x03\x9d\x63\x54\x77\xe6\x0a\x8b\x9f\xdd\x0b\xda\x6d\xd2\x09\x2d\x3b\x0e\x1c\x25\xd5\x3d\x6b\xec\x9b\xfb\x15\xd3\x18\x62\x93\xae\xa6\xf9\xa3\x6d\x54\xf0\x98\x27\xc2\x32\x9e\x3c\x1c\x83\x1f\x58\x77\x65\xfe\xc8\x0d\xbb\xd2\x8b\x9b\xb1\xe2\x88\x1f\x9b\x03\x36\x99\xdf\x65\x40\x03\x75\x9e\x77\x14\x2a\x5e\xeb\x93\x01\x1f\xb5\x09\xbb\x70\xa1\x2c\x38\x9b\xc8\x12\x48\xbf\xd3\x64\x9e\x6c\x95\x74\x49\x55\x9d\x57\xfc\x4e\x48\x7e\x26\x8c\x7c\x23\xb0\xf3\x77\xc9\x25\xce\x1e\xd1\x62\x70\xad\xf4\x56\x1c\xc1\x5f\x7f\x11\x7f\x1a\x51\xb6\xa5\xff\x6e\xc9\x7f\x05\x00\x00\xff\xff\xb5\xbc\xe7\xb1\x42\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileGitignore)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, ".gitignore", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
