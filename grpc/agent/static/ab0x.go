// Code generated by fileb0x at "2022-04-01 19:12:00.581086957 -0400 EDT m=+0.001763051" from config file "assets.toml" DO NOT EDIT.
// modification hash(265137a622c7967a4dc608760104a04c.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileGitignore is ".gitignore"
var FileGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xd2\x2b\x48\xcd\x05\x04\x00\x00\xff\xff\xe2\xf2\xc6\x72\x05\x00\x00\x00")

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x64\x95\xb7\x0e\xab\x4e\x1e\x85\x7b\x9e\x62\x7b\xb4\xb2\xb1\x01\x43\x39\x30\x43\xb0\x09\x26\x87\x0e\x93\x33\x26\x9a\x79\xfa\xd5\xbd\xdb\xec\xea\x3f\xe5\x77\xa4\x33\xbf\xe6\xd3\xf9\xf7\x9f\x27\x20\x59\x35\xfe\x25\x22\xdb\x55\x25\x55\x04\x2e\xfa\x4b\x09\x5d\x55\x25\xa5\x11\x45\x70\x24\x25\x38\x54\x01\x94\xaa\x27\x6b\x7b\x98\xf6\x23\x5f\xe6\xb6\x04\xe3\xe3\x6b\xc6\xf0\x47\x9f\x8f\x4b\xbd\xe9\x07\xb4\xa2\xe7\x6b\x8c\xd5\x6a\x4f\x0d\x60\x21\x8d\x10\x2c\x70\x68\x2e\xd2\x74\xd0\xca\x80\xf2\x90\x50\xe9\xa2\xef\xeb\x3f\x11\x83\xa7\x50\x1a\xbe\x00\x4a\x1d\xb4\xcc\x4b\xb7\xd1\x01\x8f\x08\xfa\x96\xf5\x82\xa0\x82\x96\x73\x94\x4e\xc0\x34\x84\xd6\x80\x5c\x3a\xae\xa7\xde\x80\xab\x0e\xd1\xa9\x63\x74\xe8\x8d\x91\xfc\x65\xf8\xff\x99\x8e\xbc\xff\x29\x8e\x5c\xd0\xf9\x2e\xa1\x5b\xcb\x21\x5a\x7f\x9b\x55\x08\x9e\xa6\xd3\x20\x57\x17\xd0\xdf\x6b\xc4\xf2\x78\xf9\xb2\x8f\x33\xf1\xbf\xbf\x69\x0d\xf2\x74\x41\xfd\x9b\x81\xe3\xd0\x3e\xb2\xd4\x13\x9f\xfb\x73\x88\x1d\xaa\x8d\xc3\xe8\x28\x4b\xb5\xd6\xc1\x55\x16\x9d\xaf\xec\xa8\x9f\x3b\xb4\x90\x00\x2c\x0f\x00\x5a\x15\xe1\x01\xfe\xe4\x2f\x30\xaa\x22\xb0\x60\x09\x14\x67\x0b\x15\x43\x20\xc4\x2d\x5c\x27\xf1\x11\x1d\xd6\x1d\xb6\xb1\x19\x6b\xec\x16\x38\xf0\x5d\x73\xf6\x98\xd9\x7c\x5c\xd7\x24\x39\x4a\xdd\x2b\xdf\x21\xa3\xfa\x20\x95\xde\x85\xd2\xfc\xd8\xf3\x16\x16\xf3\xe7\x48\x6c\x81\x98\x4f\x46\x67\x17\x6b\x94\x20\xf0\x1f\x18\x5e\x12\x46\x73\xdb\xac\x4a\xd1\xa5\x1c\x0c\x48\x4a\x56\x65\x18\x2e\xfe\xb0\xd5\x1a\xe5\xf3\xe1\x67\x35\x7f\xf3\x81\x26\xeb\xc2\x69\xc5\xf4\xd5\xe7\x88\x8a\x1f\xe4\x20\x51\xc7\xfa\x49\x1d\x79\x69\x63\xff\x16\xaa\x24\x23\x0f\x73\xab\xf6\x87\xa6\x31\xed\x03\x97\xd1\x34\x72\xee\x11\x56\xa7\x19\x31\x74\xbd\x5e\xa7\xe7\xba\x32\xcf\xe2\x07\x40\xbe\x12\xd3\x14\xb9\xbf\xf1\x22\x79\x6e\xb9\x87\xcd\x60\x46\x97\x61\x99\xaa\x74\xef\x6e\x8c\xce\xfe\x8c\x6e\xfd\x8d\xbc\x6d\x7e\xd9\x79\xa4\x98\x91\x2a\x9e\x5a\xe7\x17\xea\x10\xd0\x57\x65\xbe\xb4\xdf\x80\x22\x4c\xb5\xfe\x36\x82\xa7\xe9\x37\xaf\x4a\xfb\x4d\x06\x5f\xaf\xff\xca\xcb\x22\xd4\x30\xa9\x99\xc1\x52\xdd\x06\xc7\x51\xbb\x3f\x7c\xb5\xbd\xbf\xdb\x6f\xb8\x4b\x52\x5c\x61\xbd\x93\xc3\x78\x1a\x69\x9a\xf0\x23\x5f\xa9\xef\x59\xa0\x0b\x1f\x6c\xfb\x34\xa3\xe1\xec\xfe\xa0\x16\x7a\xbf\x8b\xd6\x92\xd4\xab\xd1\x1f\x14\x2a\xb0\x1c\x33\x8f\xbd\x65\xb5\xb4\xed\x64\x0d\x31\xfa\x2c\xb9\x25\xc7\xae\xf5\x49\x8c\x3b\x20\x73\xb5\x1b\xaf\xa5\x39\x83\x6b\xfc\x89\x26\x37\xe9\xf1\xe2\xad\x78\x5a\xcc\x37\x43\x66\x90\x1f\xaf\xda\xb6\x7f\x02\x8e\xf5\x68\x4c\xa5\x5f\x28\xc1\x2d\xb2\xd9\xe3\x0d\x34\x18\x64\xc4\x4b\xcb\x9a\x86\x16\xbb\x4f\x85\xa9\xe4\xad\x9f\x0d\xef\x30\xc9\xd1\xb5\x9c\xf3\xba\x1a\xed\x85\xf6\x7a\x54\x60\x2f\xe4\x07\xea\x61\xe7\x60\xc5\xd9\x37\xa0\x7e\x30\x66\x22\x18\xd0\xbd\x8b\x2b\x22\xd0\x66\xf3\xe1\xec\x40\x19\x58\xf5\xb1\x6d\xd8\x64\x3b\x9d\xef\xb3\x73\x33\xf5\x74\x7c\x04\xc1\xbd\xf5\x6f\x3a\xe4\x8e\x44\x45\x33\xda\x95\x2b\xa2\x6c\x26\xbb\xfc\x7e\x21\x35\x50\x85\x73\x59\x89\x66\x09\x45\x53\xf0\x63\x6f\x6d\x7e\x9b\xe8\x8c\xae\x97\xeb\x37\x23\xbc\xae\x6d\x41\x2a\x35\x0e\xcb\x2d\xdb\x70\x72\x8d\x83\x7d\xf4\xa4\x2c\xa4\x67\x2e\x3d\x37\x8b\x5c\x8a\xa6\x2a\x0b\xc3\x29\x88\x64\xc9\xeb\xa4\x34\xde\xfe\xbb\xcb\xa4\xaa\x01\x4a\xde\xd3\x73\xcb\x22\xbe\x7f\xf1\xec\xea\x53\xf8\x8f\x22\x16\x10\xc6\x1f\x7d\x28\x10\x24\x7f\x44\x52\x6c\x84\x10\x06\x76\x59\x76\x0b\xf1\xb9\x19\xd5\x47\xae\xf6\xf4\xee\x28\x82\xc2\x01\x00\xd0\x3f\x9c\x17\x2c\x00\xcb\x52\x15\x80\xa8\x7e\x02\xfe\xba\x73\x68\x9f\x3f\xd1\x90\x85\xd6\xf1\x23\xde\x49\xe3\xb8\x65\xd3\x85\x86\x89\xf2\xe7\xf4\x32\x2c\x4a\x49\xe5\xf9\x1e\x04\x8b\x7d\xb7\x3d\xa5\x58\x20\x6c\x5c\x4d\xe7\x44\xbc\x0c\x24\x3d\x71\xf0\x95\x6c\xe3\xd9\x81\x5e\x57\xb7\x47\xbc\x13\xb7\x9e\xae\x8a\xc7\x74\xf7\xf8\x24\xc3\x9a\x3b\xef\xb8\x3f\xa0\x14\xf7\x0b\xd9\xad\xd7\xc7\x3d\xcd\xfd\x8b\xe1\xc0\x5b\xe2\x23\x96\x1b\xdf\x9e\xde\xd7\x4d\x32\x19\x56\x07\x76\xfe\xf7\x0e\x85\x83\x60\x27\xbe\x58\xdf\xda\x32\x5f\x56\xa9\xd5\x4f\x46\x0d\x5c\x90\xd6\x62\x71\xdf\xd4\x33\xd3\x5a\xa8\x3b\xdd\xd2\x06\x82\x85\x39\xea\xf8\xc1\x29\x1d\xc7\x21\xe7\x5b\x05\xbd\xe6\x86\xd3\xca\xf7\x49\x1c\xcd\xb2\x5e\x7e\xca\x35\x83\x0d\xdd\xa8\xd2\x38\xa3\x8f\x36\x0d\x21\xb9\x4b\x98\x9e\x73\x27\x49\xe9\xa7\x56\x8d\x72\x18\x4a\x52\x61\x90\xc5\xb9\x25\x52\xd4\x75\x58\x9f\x26\x41\x61\xa8\x4b\x4c\xd4\xaf\x96\x26\xbb\xa3\x1b\xb5\x42\xbc\x5a\x53\x2c\xf3\xfb\xa0\x5a\x06\x85\x02\xeb\x77\xd1\xf8\x99\xe1\xc9\xcc\xe8\x9e\x62\xbc\x4c\xd1\xf0\x51\x4e\x2d\x7b\x78\xbd\x6a\xd6\x79\x9b\xad\xb2\x60\x85\x04\x29\x71\x61\x49\x1a\x93\xca\xeb\x8f\xd5\x67\xbf\x5f\xd2\x8c\x6f\xf8\xcb\x15\x14\x9f\xa4\xc3\x7d\xdc\x8b\xa7\xee\x8d\x73\xde\xf4\xd2\x91\x5e\x32\x17\x3f\x53\xea\x9b\x23\x24\xa0\x08\x29\xbf\x08\x13\xe6\xbc\xe0\xee\x9e\xda\x63\x05\x9c\xbe\x78\x16\x76\xe4\x86\x4e\xa5\xef\xaa\xd9\xcb\xf9\xe3\xc9\xa6\x0f\xa3\x0b\x56\x72\x63\x77\x52\x28\xb6\xb8\xba\xb8\x72\xed\x4c\x12\x17\x56\x70\x30\x8c\x0b\x47\xc8\x26\x6b\xde\xee\x92\x6f\x18\xb0\x5f\xc9\xa9\x34\x49\x66\xfe\x32\x9d\x66\xd2\x74\xbc\x4d\x70\xe3\xd6\xb1\xcd\x1d\x7f\x4f\xec\xa7\x74\x39\x8c\xdf\x76\xad\x6e\xc2\xf1\x76\xe3\x96\xb4\x2d\x9b\x25\x09\x63\x43\x68\xb3\xfc\x45\xc6\x2c\xf2\x39\xdb\x9d\x1e\xc2\x5c\x62\x8c\x25\x4e\x2f\xe2\x13\xe1\xfe\xc4\xd1\xb0\x05\xda\xda\xdb\x8a\x35\x25\xf3\x9a\xaa\x1b\xed\x84\xc1\xf2\x45\x57\x3f\xe6\x03\x82\xf7\x76\x77\x7d\x0d\xf1\x38\xb6\x8c\x58\x37\x09\x96\x8d\xa9\x76\xac\x20\xbf\xff\x34\x2c\x17\xc1\xec\x1c\xae\xfd\x59\xc2\x2c\x1b\xa9\xcc\xd1\xc0\xe4\xad\xcf\xe2\x7e\x8b\x2e\xe0\xc1\x87\xf1\xad\x22\x2c\x3b\x38\x59\x6a\x62\x9a\xa2\x3d\x3f\xcf\x65\x79\xee\xe1\x86\xd2\x1a\x10\x7f\x97\x0f\x19\xf0\x9f\x6b\xf8\x9f\x00\x00\x00\xff\xff\xe1\xa5\x55\x11\x2a\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileGitignore)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, ".gitignore", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
