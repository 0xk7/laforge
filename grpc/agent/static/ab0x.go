// Code generated by fileb0x at "2020-12-22 12:53:03.934022802 -0500 EST m=+0.004511905" from config file "assets.toml" DO NOT EDIT.
// modification hash(af4ad5b8d4163ad7cf6d0966572300b8.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\x95\xb9\x0e\xbb\x4a\xd2\xc5\x73\x9e\xe2\xcb\xd1\x27\x83\x59\x0c\xc1\x0d\x1a\x68\xf6\xd5\x40\xdb\x90\x01\x36\x9b\x59\x8d\xa1\x81\xa7\x1f\xdd\xff\x24\x73\x35\x73\x92\x92\x7e\x47\x3a\x55\x49\xe9\xfc\xff\xdf\x92\xa0\x66\xb8\xff\x27\xc3\x7b\x64\xa8\x86\x0c\x22\xf8\x87\x12\x8e\x61\xa8\x76\x2b\xcb\x60\xcf\x2a\x80\x0d\x09\x54\x46\xec\x49\x6f\xec\x00\xe8\x20\xc3\x2a\xbc\xb2\x89\x7e\xdb\x47\xb4\xab\x01\x09\x18\x62\x25\x48\x4c\x6b\x4c\x8d\x7a\x2b\x5c\x10\x40\x9b\x90\x02\x80\xed\x08\xda\x0e\xf8\x68\x80\x8e\xa1\x54\x3b\x32\x42\xce\x2e\x9f\xc0\x94\x2a\x17\x49\xa0\x72\xc0\x87\xb3\x9c\x3b\xc4\x0a\x4e\x14\x14\x04\x96\x02\x6a\x25\x08\x71\x15\x3e\xb8\x96\xb0\x5b\xf0\x56\x31\x75\x38\x0a\x3c\x9c\xd6\xd8\xdd\x33\xde\x9d\x33\xcd\xfe\xb0\xe8\x9f\xcc\x81\xff\x19\x9c\x44\xa0\x43\x11\xe1\x04\x0b\x96\x83\x3f\xc9\x86\x02\x4c\x2f\x6c\x61\xe4\x48\xf0\xcf\x35\x72\x85\x2d\xa4\xa1\xf3\x25\xff\x7b\x9b\xdd\xc2\xd0\x91\xc0\x1f\x0f\x60\x6c\xe6\x9a\xd8\x12\xc9\x63\x1f\x73\xc6\xa5\x1c\xc3\x90\x8d\x16\xb8\x52\xf5\x99\xeb\x4f\xa3\x89\x98\x92\x40\x00\x55\x00\x3c\x19\x54\x02\xf8\xdb\x97\x2b\x4b\x06\x15\x04\x5c\x97\xe6\x1a\xce\xe0\xca\xf6\x80\x18\x07\x9e\x6d\x8e\x9f\x6e\x79\x0c\x4a\xd0\xd2\x17\xa9\x67\x9c\xec\xe7\x06\xbc\x6e\x5e\x80\xf3\xb8\xf3\xf3\x1b\x93\x9b\x22\x5d\xbe\x12\x5e\x7d\xe3\x55\x6c\x93\x63\xdc\xba\xfd\x51\x9b\x96\x9d\x1d\x84\x80\xde\x67\xa7\xcb\xb8\xb8\xb2\xf0\xb6\x7a\x36\xaf\x84\xd8\xee\xc9\xab\x7c\xbe\x98\xed\x55\x29\xf9\x5a\xbe\x7f\x13\xf6\x18\x44\xf2\x09\x1f\x17\x59\x3c\x93\xbb\x3f\x7d\x92\xcb\xb6\x36\x5a\x48\x13\xcb\x66\xea\x79\x2b\x1f\x31\x8b\x1e\x0b\xec\xd4\x7e\x2d\xf3\xf5\x45\x97\x32\x7d\x34\x5c\xfa\xe0\x84\x28\xbd\xe4\xeb\x78\xb3\xce\xb7\x71\x4e\x08\xf8\x97\xc7\x47\x5b\xd6\xbb\x59\xfb\x71\x19\xad\x36\x21\x6f\xae\x98\x85\xf0\x5b\x71\x68\x7e\xbb\x4d\x7c\xfb\xdc\x5b\x85\x45\x26\x97\x49\x05\x8f\xa9\xbc\x38\xc5\x58\xcc\xa0\x2d\xa4\xe7\x15\x6b\x8a\xf3\x74\x3e\xe3\x55\x4c\xed\xa6\x9c\xb8\xe5\x18\x53\xe2\x90\x3b\xd8\xfb\x98\xe9\x6c\x0b\xf8\xe5\x57\x91\x26\x74\x7b\x78\xd6\x19\xfb\xd9\xbe\xf0\xbd\x3f\x62\x7f\xcc\x45\xbe\x17\x54\x9a\xb1\xf7\x74\xd1\x6e\x4b\xbf\x49\x31\xbe\xe3\x14\x19\xb7\xa7\x47\xd4\xdf\x97\xb5\xe6\x72\xf9\x3a\x34\xd7\x2c\xa1\x57\x6b\x52\x39\xd0\xd7\xe7\x7c\xb7\x5b\x04\xd9\x97\xab\xe4\xa7\x14\x05\x6e\x70\xcf\x9a\x48\xaf\xfd\xb1\x31\xd2\x8e\x91\x55\xd1\xad\x11\x5a\x63\x9b\x18\x7c\x66\x23\x0b\xaf\x8b\x5a\x4a\xa7\xb0\x73\x9e\xf8\x16\x17\x36\x73\xd9\xd3\xad\x7e\xf1\xa4\xfe\x12\x05\x5d\x8b\xb2\x9b\x5a\x2c\x5d\xa6\x67\x93\x3a\xf7\xe5\x5d\x97\xe3\xf8\x98\x77\xf4\x53\x65\x42\xc9\xcc\x5f\x6a\x05\xfb\xad\x37\x38\x6b\xdc\xf2\x63\xba\xd8\xa2\xf8\x79\x6d\xe0\xf9\xee\x29\xce\x71\xcd\xd8\xce\xf4\x90\x1b\xc6\xab\x7f\xc5\x7b\x79\x9b\x56\xaa\x51\x19\x30\x98\x89\x92\xff\x7a\x89\x48\x67\xe7\x46\x0f\xb1\x74\x64\xbf\xd7\x33\xd8\xa7\x55\xc9\x5c\x9e\x53\x6a\xbd\x51\x98\xfe\x9e\x8e\x8d\xd9\xd2\x4f\xea\xe2\xd7\x8a\xb7\x4e\x75\x20\x74\x73\x25\x64\x64\xb8\x6b\x6f\x46\x5c\x4c\x4b\x26\x68\x44\x7e\x43\x7a\xa3\xcc\x17\x77\xb7\x12\x97\x8f\x3e\x43\xa8\xe5\x32\xfb\x7e\x5e\xee\x5f\x63\xf8\x45\xfe\x33\xf9\x8e\xf1\xf7\x4a\x3e\x95\xd7\x7a\x21\x8d\x3c\x78\x76\x03\x65\x52\x76\x33\x89\x67\x40\x13\x2a\xbb\xcf\xc6\xf4\xb4\x15\xc1\xe6\xbe\xea\x04\x9f\xf4\xce\x40\xda\xf9\xd0\xfe\x44\xde\x53\x41\x06\x18\x02\x90\x39\xd8\x91\x59\x6c\x83\x44\x41\x77\xea\x2e\xc9\x31\x36\x58\xe3\x9f\xbf\x50\xef\xe0\x7f\x49\xaa\xf1\xfd\xf2\xf7\x74\x00\xa5\xc9\xe1\xac\x85\x46\xce\x28\x01\x94\x64\x1c\x03\xc0\x1a\x32\x01\x02\x20\x6a\xf4\x08\x65\x63\xa8\x73\xf9\x12\x57\x7b\x16\xda\x0e\xa2\xde\x2b\x4c\x9b\xf5\xc6\x5c\x16\xd2\x9c\x7e\x5d\xf8\xfb\xd2\xe7\xa6\x69\x24\x64\x71\xad\xeb\xdc\xea\x6f\x75\x30\xff\xf8\x9a\xe8\x6c\xa1\xf8\x49\xd3\xe7\x5d\xeb\xdd\xd5\xa9\x97\x23\x8d\x4f\x4f\x02\xee\x4a\x3b\x8d\x0d\x9d\x0d\x24\xbc\xba\xd6\x57\xb4\xdf\x46\x3d\x2d\x96\x41\xff\xed\xd1\x92\xa5\x43\xc6\x9b\xc2\x57\x16\x1e\x04\x95\x3f\xf4\x3e\x6e\x2f\xee\x54\x51\x93\xd3\xb1\x23\x7b\xc1\x09\x24\xc5\x4f\xff\x1a\x85\xf4\xba\xb6\x71\xc6\x06\x75\x71\xc9\x5b\xcf\x5b\xd5\xa0\x7c\x97\x03\x07\x11\x4a\xea\x7a\x6f\x28\xc9\xf2\x88\x8f\xad\x16\x86\x2e\x7e\xe9\xf8\x10\x49\x9b\xc1\xbd\x5f\x36\xf4\x38\xc0\xe7\x48\xef\x42\xe8\x6f\xf2\x7e\x0a\x43\x34\x16\x54\xd8\x55\x1f\x33\x12\xcf\x20\xb0\xed\xe4\x33\xeb\x5d\x32\x01\xd3\x4c\x88\xa9\x70\xa8\xe7\xcf\xa8\x87\x3b\x97\xbe\x9e\xc8\x68\xa5\x2a\x99\x5d\xef\xed\x3d\x25\x97\x7a\x25\x83\xc6\xd0\x72\x87\xde\x30\x1d\xec\x07\xdb\xea\x4e\x2c\x56\x4f\x52\xd3\x67\xdb\xf0\xa4\xba\xda\x3a\xc2\xec\x5d\x4b\xe4\x3f\x62\x35\x47\x03\xb6\xcc\x43\xf7\x52\x76\x51\xfb\xc6\x55\x1e\xd0\x47\x65\x62\xcf\xd7\xd0\x15\xb8\x53\x67\x1d\x4c\x5b\xd4\xef\x7e\x20\x8a\xd6\x35\xa6\xc2\x9b\xe5\x73\x65\x45\x3c\x96\xa5\xbb\x5d\x81\x92\x4e\x95\xae\xba\xaa\xaa\xba\x5c\xbb\x52\xda\xb7\xbf\xc4\x0e\x8a\x5f\x67\x8d\x42\xc3\xac\x9e\x65\x22\x26\xb5\x52\x76\x46\x91\x25\xe0\xed\x36\x45\x8b\x66\x6b\x80\x07\x26\xaa\xc6\x30\x73\xfb\x8a\x86\x60\x5e\x5f\x05\xa9\x4e\x17\x9e\x03\xa9\x6d\x7e\x1e\xce\xdb\xcf\xfd\xf4\x0a\x93\x06\x94\x0f\x8b\x45\x6e\xd0\x5a\x53\xeb\xee\x4a\xba\x66\x5a\x89\xfb\x32\xaf\xd7\xe8\x49\xf4\xe8\x5a\x54\x19\x27\x59\xc5\x9c\x07\xb6\xf0\x60\xbf\x05\x2e\x0e\xef\x4e\x5a\x03\xf6\x4e\x3e\x08\x68\xce\xe0\xdb\x4b\x8c\x5a\xfe\x35\x1c\x11\xc9\x5c\x1e\x1d\x9f\xdf\xcb\xb8\x62\x5c\x61\x34\x49\x62\x9d\xe1\x57\x5b\x28\xf3\xfa\xd4\x2a\x4a\x0d\x01\x60\x84\xc6\x97\xc8\xaa\x37\xda\x02\x5d\x50\x02\xb9\xa9\xf0\x69\x91\xfe\x7a\xb3\x4b\x76\x0c\xcf\xde\xa0\xbf\x33\x62\x66\x42\xaf\xea\xa8\x65\x21\xca\x30\xcc\x58\x47\x06\x2d\x40\xea\x5b\x93\x81\xcd\x7a\xda\xe1\x5d\xc9\xfa\x34\x1e\xec\x79\x2d\xab\x87\xd5\x6e\x47\x3a\xb1\x2c\xad\x63\xf0\xd7\x5f\xc4\x9f\x46\x84\xae\xf2\xdf\x2d\xf9\xaf\x00\x00\x00\xff\xff\x9c\x7d\xf8\xc7\x42\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
