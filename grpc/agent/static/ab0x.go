// Code generated by fileb0x at "2021-07-09 16:01:55.473857177 +0000 UTC m=+0.022435821" from config file "assets.toml" DO NOT EDIT.
// modification hash(82c06dd73c44c049747786b39d7af6be.963594ba69d0273dac33db44d8c13043)

package static

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct {
	// Prefix allows to limit the path of all requests. F.e. a prefix "css" would allow only calls to /css/*
	Prefix string
}

// FileGitignore is ".gitignore"
var FileGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd2\xd2\x2b\x48\xcd\x05\x04\x00\x00\xff\xff\xe2\xf2\xc6\x72\x05\x00\x00\x00")

// FileServicePem is "service.pem"
var FileServicePem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x6c\x95\xb7\x12\xb3\xd0\x11\x85\x7b\x9e\xc2\xbd\xc6\x23\x82\x48\xe5\x25\x5f\xe0\x92\x93\xe8\x00\x91\xb3\x10\x02\xf1\xf4\x9e\xff\x77\x63\x8f\xbd\xe5\x77\x66\xce\x6e\x73\xf6\xfc\xf3\xcf\x08\xb2\x0a\xad\x7f\x88\xb2\x17\x40\x05\x8a\x20\x90\xff\x52\x0c\x41\xa8\xa0\x4b\x14\xc1\xb9\xd7\xe0\x80\x02\xa8\x61\x68\x76\x73\x49\x64\x3f\x1e\x72\x42\xc8\x8b\x88\xa6\xd3\xc7\xdb\x5e\x45\x1a\x3f\xdd\x43\x72\x9f\xba\x31\xa7\xb0\xf9\x16\x16\x70\x65\x13\x13\x5c\x70\x98\x81\x6c\x22\xd0\xab\x80\x08\x65\xa1\x41\x62\x14\xa1\x53\xbc\x80\x2e\xd4\x56\x24\x80\x1a\x81\x9e\x36\x90\x27\x1f\xd2\xf1\x94\x22\xd7\x35\x24\xd0\x48\xae\x7f\xd4\x7e\x4c\x77\x98\xd9\x81\x52\x39\xf0\x1f\x0a\x00\x85\xa4\xfe\xb4\x3a\x70\xa2\xc0\xcb\xfe\xb2\xee\xbf\x19\x92\xc3\xff\x30\x7e\x06\x60\x88\x02\x0c\xb9\xdb\x21\xba\x7f\x9d\xa1\x04\x74\xdb\xef\xe4\x00\x09\xf2\xdf\x6b\xc4\xfa\x30\x22\x35\xba\x5e\xe2\xbf\xb7\x99\x9d\x1c\x22\x01\xfe\xd5\xc0\x71\x98\xb9\xaa\x8c\x58\x4e\xe9\x53\xea\x13\x7d\x9a\x3c\x8f\xba\x86\x2d\x02\xb8\x2a\xfa\xab\xea\xc3\x9c\x92\x5c\x59\x00\x6e\x08\xc0\x03\x8a\xd2\x01\xfe\xe8\x06\x98\xa1\x08\x5c\x09\x7e\x69\x93\x2c\xb7\xfb\x8e\x85\x52\xc5\x7e\x28\xf5\xf3\x48\x32\xa3\xe4\xf7\x71\xf4\xdc\xa4\xeb\x80\xe1\xc7\x70\x2d\xc9\x72\xae\x62\x22\x6e\xa7\xa6\x8d\x03\x3b\x11\xbd\x2a\x94\xfa\x02\xc5\xd4\xf1\x56\x4d\xe7\x9d\x14\xfe\x13\x4b\x0f\x86\xb8\xaf\x56\x30\x45\x3f\xd6\xb1\x0e\x85\x05\xb7\x9b\x67\xb0\x23\x71\x9f\x5e\xec\x2e\xca\xb4\x63\xe4\x3a\x98\x74\x1d\x41\x2a\x89\x7f\x77\x21\xb1\x3b\xf9\x9d\x0a\xf2\xac\x3d\xe2\xdb\xf2\xc4\xd6\xee\x0e\xa3\xa0\x76\xf0\xc6\xdf\x16\x52\xcb\x88\x06\x6f\x56\xcf\x31\x36\xc9\xb5\xfa\xc9\xfc\x4c\x37\x76\x3f\xfc\xe3\x29\x3e\x77\x55\x58\xda\xe3\x64\x5f\xc3\xf1\x72\xb2\xaf\x3a\x10\x30\x39\x9f\xd8\x6b\x0d\x4e\xc2\x9d\x1a\x90\x50\x40\xf5\x12\x4b\xfa\x51\xb7\xc7\x7a\x55\x4e\x8c\xaf\xfa\x26\xab\x8f\xb6\xfb\xe8\x08\xe7\xed\x19\xc6\xf8\x3c\x17\x0e\x32\xc8\x41\xb7\xb2\x82\xed\xae\x43\xd6\x59\xec\x1b\x14\xdb\x11\x42\x15\x46\xed\x2a\x2e\x2d\x20\xb8\x01\xd0\x9e\xed\xad\x2c\xec\x5c\xbf\xa6\xdf\x7c\xc6\x9c\xb5\x24\x64\x9a\x70\x30\xe5\xce\xa4\x70\xf7\x7c\xa5\x83\x5d\x5e\x4d\xf0\x32\x55\x2c\x3c\xf8\xf5\xf5\x3d\x32\x6e\xa0\xba\x77\xee\x75\x47\x51\x12\xf5\x87\x85\x02\x89\xc7\xd6\xad\xc9\x7f\x8a\x33\xff\xe6\x4a\x6e\x84\x9b\x1d\x6d\xcf\xf6\x9d\x2b\xaf\x9e\x6e\x94\x94\x59\xa6\x31\xe8\x0a\xec\x67\xe6\x64\x22\x0b\x11\xc8\x48\x34\x1a\x8a\x52\x7c\x8c\x4f\x7d\xb6\x1f\x6d\x28\x0d\x01\x79\x27\x34\x87\x8a\x16\xe7\xf2\xde\x47\x0f\x11\x29\x37\x47\xe0\x7d\x99\xb0\x7f\x6f\xb1\x03\x1c\xd1\xd7\x18\x7d\x0b\xf5\x24\xa9\xc4\x8c\x9d\x4b\x6f\xbd\x04\xe6\x55\xdc\xb9\x3c\xde\xce\xa2\x6f\x82\xdb\xb2\x3d\x10\x25\x20\xb6\x1e\x1b\xa6\xa0\x42\x7f\x6d\x14\x2d\xf3\x42\x79\xb7\x09\xd8\xeb\xfb\x01\x2e\xec\x93\x71\xbf\xd2\xdf\x7e\x1b\x3c\x94\xf7\x5b\x5d\xbd\x36\x9b\xc8\x80\xcc\x9e\x37\xa5\xff\x9a\x00\x9c\x32\x11\xcd\x24\x20\xae\xe4\x6e\x50\x59\x9c\x3f\x65\xa6\xfb\x5a\x5d\x71\x20\x0d\xaa\x56\x65\x61\xb1\xac\xd8\xa8\x0c\xa7\xeb\x4c\x1f\x61\x83\xf4\xcf\x63\x98\x66\x83\xc1\x43\x91\xf0\xb4\x71\x3f\x13\x09\x95\xdd\x95\x55\x51\xfa\xf1\x42\x92\x1c\xd9\x3c\x77\x92\xcd\x6f\xbc\xb9\x0f\x29\xb3\x30\xb1\x7b\x36\x72\x74\xae\x14\x17\xb3\xd9\xe1\xd4\xe7\x09\x27\xd8\xc3\x8b\x22\x98\x98\xbb\xde\xca\xe0\xc0\x3f\x11\x71\x81\x30\x5f\xe8\x40\x01\xf8\xfe\x09\x92\xe6\xc9\xb2\x21\x81\xb1\x6e\xe8\x0d\x7b\xc6\xe9\xb7\x18\x5f\x83\x19\x7b\xc3\xab\xa5\xbb\x32\xd6\x87\x62\xd2\x9b\xfc\x0f\x9b\xf4\xe5\x25\xd2\x43\xaa\xc5\x9a\x00\xe5\xe8\xe6\xa1\xff\xfb\x0f\xa4\xba\x86\x02\x30\xf0\x2b\xae\xc8\xc8\xda\x32\xff\x34\x14\x0a\x37\x22\x63\x1a\x56\x90\x47\x32\xc5\x34\xa3\xcd\x14\xf6\x14\x04\xcb\xe5\x85\xef\xb6\xce\xba\x52\x73\x8e\xa9\x72\x6a\x0b\x6b\x1c\x71\x4d\x4c\xfe\xf8\xfd\x9c\x88\xca\x22\x0b\x04\x88\x5d\xbe\x32\x63\x3c\x68\xbb\x94\x62\x49\xe3\xa2\xa5\xae\x6e\xfe\xf4\xd3\xac\x30\x5a\x6e\xad\x1e\xfd\x72\xb3\x8f\x89\x23\x78\xbf\x48\xd9\xc5\x6a\xa7\x4e\x92\x18\x32\x83\xd7\x2f\xe5\xe7\x9c\x78\x5f\x13\x55\x75\x1b\x56\x72\x66\x00\x83\x28\xe1\x6d\x7b\x50\xab\xe3\x2c\x9e\x1f\x35\x63\xb7\x3f\xfd\x79\xbf\x84\x97\x6e\xc1\x8c\x82\xf1\x7e\x62\xbe\x52\x2f\xf7\xbb\xbe\xc3\x6e\x1e\xa7\xa5\x26\xb5\x44\x65\x50\x5b\x2c\x10\xb7\x37\x05\x97\x63\x73\xdf\xe9\xc9\x4f\xdb\xdc\x7e\x73\x03\xb1\x08\x4a\x04\x53\xdf\xf6\xe7\x55\xcd\xde\xa3\xff\xaa\xb1\xc9\x0d\xcd\x04\xaf\xa8\x98\x5f\x7e\xa8\x27\x03\x50\xd4\xe9\x2a\x7f\x5e\xb4\x1d\x67\x4c\x21\xee\xa7\x17\x9d\x79\x19\x92\x1c\x24\x55\xe0\x34\xb0\x0b\xe3\xe8\x76\x8f\xe9\x05\xdf\xa6\xa6\x7b\x09\xd8\xcd\x7c\xda\x44\x5a\xa5\xfc\x68\x24\x7d\x78\xaf\x64\x8a\x60\x6b\xa3\x08\x71\xee\xb1\x98\x8b\x32\x79\x9a\xf4\x70\xf4\x05\x77\xf1\x11\x95\xc1\xf4\x71\x4a\x21\xbd\x72\x17\xe7\xfb\x5a\x73\x8c\x72\xc6\xda\xbb\xf1\xe5\xfc\xe8\xf2\xbf\x55\x90\x72\x6a\xcd\xe7\x48\xd4\x55\xc0\x5c\xae\x79\xf2\x97\xae\xfc\x4a\x4e\x2a\x8f\x91\x7d\x1a\xc7\x73\xae\xaa\x47\x5a\xcc\xdd\xf0\x58\x35\x65\xa1\x8d\x2c\xab\x42\xac\xdd\x2f\xf2\x1e\x49\xd3\xc6\xd3\xaa\xfd\xdd\x47\x10\x03\xe5\x21\x23\x9a\x68\x4a\xfe\x1b\x1f\xb2\x19\xd2\x64\x58\xb2\xc4\x10\x30\x6b\x4a\xcc\x66\xd4\x58\x6e\x70\x2a\xc2\xae\xb1\x60\x66\x76\x1e\x33\x08\x36\xf8\x71\x1f\xd1\xb5\x12\x49\x90\xf8\xaf\x37\xaa\xd7\xa3\xdf\xd6\xe1\xc6\x9f\x1e\xbf\x68\x76\x5b\xa9\xdb\x36\x9f\x93\xe9\x48\xbb\xcc\xc4\x67\x5a\x40\xc2\xce\x2e\xbc\x1e\xed\xbd\xf0\x25\xec\xdd\x77\x69\xaa\xc9\xca\xc7\x9b\x63\x50\x45\x32\xc3\x71\x2f\xfa\x39\x85\xe5\xf9\x55\x6f\xda\x95\xeb\xe1\xf5\xe5\xa6\xc6\x43\xc7\x71\xbc\x1e\xa4\xe1\xe8\x48\xf8\x02\xe9\xb4\xcb\x2b\x88\xa2\x94\xc4\xb2\x51\x81\x3d\x29\xf4\xc3\xae\xc4\xdb\xac\xb2\x5a\xcb\x3d\x37\x75\x19\x1f\x1f\x7a\x5f\x9c\x22\x64\x19\x42\xa3\xa0\xe5\x7d\x03\x12\x91\x95\xa6\x2a\xcc\x3a\x63\x7f\x5b\x51\xb6\xa4\xff\x6d\xca\x7f\x05\x00\x00\xff\xff\x4c\xcc\xf9\x21\x46\x07\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileGitignore)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, ".gitignore", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileServicePem)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "service.pem", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {
	path = hfs.Prefix + path

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
