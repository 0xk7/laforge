// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
)

// Build is the model entity for the Build schema.
type Build struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildQuery when eager-loading is set.
	Edges BuildEdges `json:"edges"`
}

// BuildEdges holds the relations/edges for other nodes in the graph.
type BuildEdges struct {
	// BuildToUser holds the value of the BuildToUser edge.
	BuildToUser []*User
	// BuildToTag holds the value of the BuildToTag edge.
	BuildToTag []*Tag
	// BuildToProvisionedNetwork holds the value of the BuildToProvisionedNetwork edge.
	BuildToProvisionedNetwork []*ProvisionedNetwork
	// BuildToTeam holds the value of the BuildToTeam edge.
	BuildToTeam []*Team
	// BuildToEnvironment holds the value of the BuildToEnvironment edge.
	BuildToEnvironment []*Environment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// BuildToUserOrErr returns the BuildToUser value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToUserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.BuildToUser, nil
	}
	return nil, &NotLoadedError{edge: "BuildToUser"}
}

// BuildToTagOrErr returns the BuildToTag value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.BuildToTag, nil
	}
	return nil, &NotLoadedError{edge: "BuildToTag"}
}

// BuildToProvisionedNetworkOrErr returns the BuildToProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToProvisionedNetworkOrErr() ([]*ProvisionedNetwork, error) {
	if e.loadedTypes[2] {
		return e.BuildToProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "BuildToProvisionedNetwork"}
}

// BuildToTeamOrErr returns the BuildToTeam value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToTeamOrErr() ([]*Team, error) {
	if e.loadedTypes[3] {
		return e.BuildToTeam, nil
	}
	return nil, &NotLoadedError{edge: "BuildToTeam"}
}

// BuildToEnvironmentOrErr returns the BuildToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e BuildEdges) BuildToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[4] {
		return e.BuildToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "BuildToEnvironment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Build) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // revision
		&[]byte{},        // config
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Build fields.
func (b *Build) assignValues(values ...interface{}) error {
	if m, n := len(values), len(build.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field revision", values[0])
	} else if value.Valid {
		b.Revision = int(value.Int64)
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field config", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &b.Config); err != nil {
			return fmt.Errorf("unmarshal field config: %v", err)
		}
	}
	return nil
}

// QueryBuildToUser queries the BuildToUser edge of the Build.
func (b *Build) QueryBuildToUser() *UserQuery {
	return (&BuildClient{config: b.config}).QueryBuildToUser(b)
}

// QueryBuildToTag queries the BuildToTag edge of the Build.
func (b *Build) QueryBuildToTag() *TagQuery {
	return (&BuildClient{config: b.config}).QueryBuildToTag(b)
}

// QueryBuildToProvisionedNetwork queries the BuildToProvisionedNetwork edge of the Build.
func (b *Build) QueryBuildToProvisionedNetwork() *ProvisionedNetworkQuery {
	return (&BuildClient{config: b.config}).QueryBuildToProvisionedNetwork(b)
}

// QueryBuildToTeam queries the BuildToTeam edge of the Build.
func (b *Build) QueryBuildToTeam() *TeamQuery {
	return (&BuildClient{config: b.config}).QueryBuildToTeam(b)
}

// QueryBuildToEnvironment queries the BuildToEnvironment edge of the Build.
func (b *Build) QueryBuildToEnvironment() *EnvironmentQuery {
	return (&BuildClient{config: b.config}).QueryBuildToEnvironment(b)
}

// Update returns a builder for updating this Build.
// Note that, you need to call Build.Unwrap() before calling this method, if this Build
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Build) Update() *BuildUpdateOne {
	return (&BuildClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Build) Unwrap() *Build {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Build is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Build) String() string {
	var builder strings.Builder
	builder.WriteString("Build(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", b.Revision))
	builder.WriteString(", config=")
	builder.WriteString(fmt.Sprintf("%v", b.Config))
	builder.WriteByte(')')
	return builder.String()
}

// Builds is a parsable slice of Build.
type Builds []*Build

func (b Builds) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
