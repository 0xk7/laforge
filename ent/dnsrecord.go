// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/dnsrecord"
)

// DNSRecord is the model entity for the DNSRecord schema.
type DNSRecord struct {
	config ` json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,attr"`
	// Values holds the value of the "values" field.
	Values []string `json:"values,omitempty" hcl:"values,optional"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty" hcl:"type,attr"`
	// Zone holds the value of the "zone" field.
	Zone string `json:"zone,omitempty" hcl:"zone,attr" `
	// Vars holds the value of the "vars" field.
	Vars map[string]string `json:"vars,omitempty" hcl:"vars,optional"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty" hcl:"disabled,optional"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,optional"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DNSRecordQuery when eager-loading is set.
	Edges                                             DNSRecordEdges `json:"edges"`
	provisioning_step_provisioning_step_to_dns_record *int
}

// DNSRecordEdges holds the relations/edges for other nodes in the graph.
type DNSRecordEdges struct {
	// DNSRecordToTag holds the value of the DNSRecordToTag edge.
	DNSRecordToTag []*Tag `json:"DNSRecordToTag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DNSRecordToTagOrErr returns the DNSRecordToTag value or an error if the edge
// was not loaded in eager-loading.
func (e DNSRecordEdges) DNSRecordToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.DNSRecordToTag, nil
	}
	return nil, &NotLoadedError{edge: "DNSRecordToTag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsrecord.FieldValues, dnsrecord.FieldVars, dnsrecord.FieldTags:
			values[i] = &[]byte{}
		case dnsrecord.FieldDisabled:
			values[i] = &sql.NullBool{}
		case dnsrecord.FieldID:
			values[i] = &sql.NullInt64{}
		case dnsrecord.FieldName, dnsrecord.FieldType, dnsrecord.FieldZone:
			values[i] = &sql.NullString{}
		case dnsrecord.ForeignKeys[0]: // provisioning_step_provisioning_step_to_dns_record
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type DNSRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSRecord fields.
func (dr *DNSRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dr.ID = int(value.Int64)
		case dnsrecord.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dr.Name = value.String
			}
		case dnsrecord.FieldValues:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dr.Values); err != nil {
					return fmt.Errorf("unmarshal field values: %v", err)
				}
			}
		case dnsrecord.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dr.Type = value.String
			}
		case dnsrecord.FieldZone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zone", values[i])
			} else if value.Valid {
				dr.Zone = value.String
			}
		case dnsrecord.FieldVars:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dr.Vars); err != nil {
					return fmt.Errorf("unmarshal field vars: %v", err)
				}
			}
		case dnsrecord.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				dr.Disabled = value.Bool
			}
		case dnsrecord.FieldTags:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dr.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %v", err)
				}
			}
		case dnsrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provisioning_step_provisioning_step_to_dns_record", value)
			} else if value.Valid {
				dr.provisioning_step_provisioning_step_to_dns_record = new(int)
				*dr.provisioning_step_provisioning_step_to_dns_record = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDNSRecordToTag queries the "DNSRecordToTag" edge of the DNSRecord entity.
func (dr *DNSRecord) QueryDNSRecordToTag() *TagQuery {
	return (&DNSRecordClient{config: dr.config}).QueryDNSRecordToTag(dr)
}

// Update returns a builder for updating this DNSRecord.
// Note that you need to call DNSRecord.Unwrap() before calling this method if this DNSRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DNSRecord) Update() *DNSRecordUpdateOne {
	return (&DNSRecordClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the DNSRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DNSRecord) Unwrap() *DNSRecord {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DNSRecord is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DNSRecord) String() string {
	var builder strings.Builder
	builder.WriteString("DNSRecord(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", name=")
	builder.WriteString(dr.Name)
	builder.WriteString(", values=")
	builder.WriteString(fmt.Sprintf("%v", dr.Values))
	builder.WriteString(", type=")
	builder.WriteString(dr.Type)
	builder.WriteString(", zone=")
	builder.WriteString(dr.Zone)
	builder.WriteString(", vars=")
	builder.WriteString(fmt.Sprintf("%v", dr.Vars))
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", dr.Disabled))
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", dr.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// DNSRecords is a parsable slice of DNSRecord.
type DNSRecords []*DNSRecord

func (dr DNSRecords) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
