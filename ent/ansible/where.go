// Code generated by entc, DO NOT EDIT.

package ansible

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// HclID applies equality check predicate on the "hcl_id" field. It's identical to HclIDEQ.
func HclID(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// PlaybookName applies equality check predicate on the "playbook_name" field. It's identical to PlaybookNameEQ.
func PlaybookName(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlaybookName), v))
	})
}

// Inventory applies equality check predicate on the "inventory" field. It's identical to InventoryEQ.
func Inventory(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventory), v))
	})
}

// HclIDEQ applies the EQ predicate on the "hcl_id" field.
func HclIDEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHclID), v))
	})
}

// HclIDNEQ applies the NEQ predicate on the "hcl_id" field.
func HclIDNEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHclID), v))
	})
}

// HclIDIn applies the In predicate on the "hcl_id" field.
func HclIDIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHclID), v...))
	})
}

// HclIDNotIn applies the NotIn predicate on the "hcl_id" field.
func HclIDNotIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHclID), v...))
	})
}

// HclIDGT applies the GT predicate on the "hcl_id" field.
func HclIDGT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHclID), v))
	})
}

// HclIDGTE applies the GTE predicate on the "hcl_id" field.
func HclIDGTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHclID), v))
	})
}

// HclIDLT applies the LT predicate on the "hcl_id" field.
func HclIDLT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHclID), v))
	})
}

// HclIDLTE applies the LTE predicate on the "hcl_id" field.
func HclIDLTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHclID), v))
	})
}

// HclIDContains applies the Contains predicate on the "hcl_id" field.
func HclIDContains(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHclID), v))
	})
}

// HclIDHasPrefix applies the HasPrefix predicate on the "hcl_id" field.
func HclIDHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHclID), v))
	})
}

// HclIDHasSuffix applies the HasSuffix predicate on the "hcl_id" field.
func HclIDHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHclID), v))
	})
}

// HclIDEqualFold applies the EqualFold predicate on the "hcl_id" field.
func HclIDEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHclID), v))
	})
}

// HclIDContainsFold applies the ContainsFold predicate on the "hcl_id" field.
func HclIDContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHclID), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSource), v))
	})
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSource), v))
	})
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSource), v...))
	})
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSource), v...))
	})
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSource), v))
	})
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSource), v))
	})
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSource), v))
	})
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSource), v))
	})
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSource), v))
	})
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSource), v))
	})
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSource), v))
	})
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSource), v))
	})
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSource), v))
	})
}

// PlaybookNameEQ applies the EQ predicate on the "playbook_name" field.
func PlaybookNameEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameNEQ applies the NEQ predicate on the "playbook_name" field.
func PlaybookNameNEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameIn applies the In predicate on the "playbook_name" field.
func PlaybookNameIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlaybookName), v...))
	})
}

// PlaybookNameNotIn applies the NotIn predicate on the "playbook_name" field.
func PlaybookNameNotIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlaybookName), v...))
	})
}

// PlaybookNameGT applies the GT predicate on the "playbook_name" field.
func PlaybookNameGT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameGTE applies the GTE predicate on the "playbook_name" field.
func PlaybookNameGTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameLT applies the LT predicate on the "playbook_name" field.
func PlaybookNameLT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameLTE applies the LTE predicate on the "playbook_name" field.
func PlaybookNameLTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameContains applies the Contains predicate on the "playbook_name" field.
func PlaybookNameContains(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameHasPrefix applies the HasPrefix predicate on the "playbook_name" field.
func PlaybookNameHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameHasSuffix applies the HasSuffix predicate on the "playbook_name" field.
func PlaybookNameHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameEqualFold applies the EqualFold predicate on the "playbook_name" field.
func PlaybookNameEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlaybookName), v))
	})
}

// PlaybookNameContainsFold applies the ContainsFold predicate on the "playbook_name" field.
func PlaybookNameContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlaybookName), v))
	})
}

// MethodEQ applies the EQ predicate on the "method" field.
func MethodEQ(v Method) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMethod), v))
	})
}

// MethodNEQ applies the NEQ predicate on the "method" field.
func MethodNEQ(v Method) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMethod), v))
	})
}

// MethodIn applies the In predicate on the "method" field.
func MethodIn(vs ...Method) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMethod), v...))
	})
}

// MethodNotIn applies the NotIn predicate on the "method" field.
func MethodNotIn(vs ...Method) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMethod), v...))
	})
}

// InventoryEQ applies the EQ predicate on the "inventory" field.
func InventoryEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInventory), v))
	})
}

// InventoryNEQ applies the NEQ predicate on the "inventory" field.
func InventoryNEQ(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInventory), v))
	})
}

// InventoryIn applies the In predicate on the "inventory" field.
func InventoryIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInventory), v...))
	})
}

// InventoryNotIn applies the NotIn predicate on the "inventory" field.
func InventoryNotIn(vs ...string) predicate.Ansible {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ansible(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInventory), v...))
	})
}

// InventoryGT applies the GT predicate on the "inventory" field.
func InventoryGT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInventory), v))
	})
}

// InventoryGTE applies the GTE predicate on the "inventory" field.
func InventoryGTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInventory), v))
	})
}

// InventoryLT applies the LT predicate on the "inventory" field.
func InventoryLT(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInventory), v))
	})
}

// InventoryLTE applies the LTE predicate on the "inventory" field.
func InventoryLTE(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInventory), v))
	})
}

// InventoryContains applies the Contains predicate on the "inventory" field.
func InventoryContains(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInventory), v))
	})
}

// InventoryHasPrefix applies the HasPrefix predicate on the "inventory" field.
func InventoryHasPrefix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInventory), v))
	})
}

// InventoryHasSuffix applies the HasSuffix predicate on the "inventory" field.
func InventoryHasSuffix(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInventory), v))
	})
}

// InventoryEqualFold applies the EqualFold predicate on the "inventory" field.
func InventoryEqualFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInventory), v))
	})
}

// InventoryContainsFold applies the ContainsFold predicate on the "inventory" field.
func InventoryContainsFold(v string) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInventory), v))
	})
}

// HasAnsibleToUser applies the HasEdge predicate on the "AnsibleToUser" edge.
func HasAnsibleToUser() predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleToUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnsibleToUserTable, AnsibleToUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsibleToUserWith applies the HasEdge predicate on the "AnsibleToUser" edge with a given conditions (other predicates).
func HasAnsibleToUserWith(preds ...predicate.User) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleToUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnsibleToUserTable, AnsibleToUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnsibleFromEnvironment applies the HasEdge predicate on the "AnsibleFromEnvironment" edge.
func HasAnsibleFromEnvironment() predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleFromEnvironmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnsibleFromEnvironmentTable, AnsibleFromEnvironmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnsibleFromEnvironmentWith applies the HasEdge predicate on the "AnsibleFromEnvironment" edge with a given conditions (other predicates).
func HasAnsibleFromEnvironmentWith(preds ...predicate.Environment) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnsibleFromEnvironmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnsibleFromEnvironmentTable, AnsibleFromEnvironmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ansible) predicate.Ansible {
	return predicate.Ansible(func(s *sql.Selector) {
		p(s.Not())
	})
}
