// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/status"
)

// ProvisionedHostUpdate is the builder for updating ProvisionedHost entities.
type ProvisionedHostUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// Where adds a new predicate for the ProvisionedHostUpdate builder.
func (phu *ProvisionedHostUpdate) Where(ps ...predicate.ProvisionedHost) *ProvisionedHostUpdate {
	phu.mutation.predicates = append(phu.mutation.predicates, ps...)
	return phu
}

// SetSubnetIP sets the "subnet_ip" field.
func (phu *ProvisionedHostUpdate) SetSubnetIP(s string) *ProvisionedHostUpdate {
	phu.mutation.SetSubnetIP(s)
	return phu
}

// SetProvisionedHostToStatusID sets the "ProvisionedHostToStatus" edge to the Status entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToStatusID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToStatusID(id)
	return phu
}

// SetProvisionedHostToStatus sets the "ProvisionedHostToStatus" edge to the Status entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToStatus(s *Status) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToStatusID(s.ID)
}

// SetProvisionedHostToProvisionedNetworkID sets the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToProvisionedNetworkID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToProvisionedNetworkID(id)
	return phu
}

// SetProvisionedHostToProvisionedNetwork sets the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToProvisionedNetwork(p *ProvisionedNetwork) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToProvisionedNetworkID(p.ID)
}

// SetProvisionedHostToHostID sets the "ProvisionedHostToHost" edge to the Host entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToHostID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToHostID(id)
	return phu
}

// SetProvisionedHostToHost sets the "ProvisionedHostToHost" edge to the Host entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToHost(h *Host) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToHostID(h.ID)
}

// SetProvisionedHostToEndStepPlanID sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToEndStepPlanID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToEndStepPlanID(id)
	return phu
}

// SetNillableProvisionedHostToEndStepPlanID sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableProvisionedHostToEndStepPlanID(id *int) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetProvisionedHostToEndStepPlanID(*id)
	}
	return phu
}

// SetProvisionedHostToEndStepPlan sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToEndStepPlan(p *Plan) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToEndStepPlanID(p.ID)
}

// AddProvisionedHostToProvisioningStepIDs adds the "ProvisionedHostToProvisioningStep" edge to the ProvisioningStep entity by IDs.
func (phu *ProvisionedHostUpdate) AddProvisionedHostToProvisioningStepIDs(ids ...int) *ProvisionedHostUpdate {
	phu.mutation.AddProvisionedHostToProvisioningStepIDs(ids...)
	return phu
}

// AddProvisionedHostToProvisioningStep adds the "ProvisionedHostToProvisioningStep" edges to the ProvisioningStep entity.
func (phu *ProvisionedHostUpdate) AddProvisionedHostToProvisioningStep(p ...*ProvisioningStep) *ProvisionedHostUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.AddProvisionedHostToProvisioningStepIDs(ids...)
}

// AddProvisionedHostToAgentStatuIDs adds the "ProvisionedHostToAgentStatus" edge to the AgentStatus entity by IDs.
func (phu *ProvisionedHostUpdate) AddProvisionedHostToAgentStatuIDs(ids ...int) *ProvisionedHostUpdate {
	phu.mutation.AddProvisionedHostToAgentStatuIDs(ids...)
	return phu
}

// AddProvisionedHostToAgentStatus adds the "ProvisionedHostToAgentStatus" edges to the AgentStatus entity.
func (phu *ProvisionedHostUpdate) AddProvisionedHostToAgentStatus(a ...*AgentStatus) *ProvisionedHostUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.AddProvisionedHostToAgentStatuIDs(ids...)
}

// SetProvisionedHostToPlanID sets the "ProvisionedHostToPlan" edge to the Plan entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToPlanID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToPlanID(id)
	return phu
}

// SetNillableProvisionedHostToPlanID sets the "ProvisionedHostToPlan" edge to the Plan entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableProvisionedHostToPlanID(id *int) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetProvisionedHostToPlanID(*id)
	}
	return phu
}

// SetProvisionedHostToPlan sets the "ProvisionedHostToPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToPlan(p *Plan) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToPlanID(p.ID)
}

// SetProvisionedHostToGinFileMiddlewareID sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToGinFileMiddlewareID(id int) *ProvisionedHostUpdate {
	phu.mutation.SetProvisionedHostToGinFileMiddlewareID(id)
	return phu
}

// SetNillableProvisionedHostToGinFileMiddlewareID sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (phu *ProvisionedHostUpdate) SetNillableProvisionedHostToGinFileMiddlewareID(id *int) *ProvisionedHostUpdate {
	if id != nil {
		phu = phu.SetProvisionedHostToGinFileMiddlewareID(*id)
	}
	return phu
}

// SetProvisionedHostToGinFileMiddleware sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (phu *ProvisionedHostUpdate) SetProvisionedHostToGinFileMiddleware(g *GinFileMiddleware) *ProvisionedHostUpdate {
	return phu.SetProvisionedHostToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisionedHostMutation object of the builder.
func (phu *ProvisionedHostUpdate) Mutation() *ProvisionedHostMutation {
	return phu.mutation
}

// ClearProvisionedHostToStatus clears the "ProvisionedHostToStatus" edge to the Status entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToStatus() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToStatus()
	return phu
}

// ClearProvisionedHostToProvisionedNetwork clears the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToProvisionedNetwork() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToProvisionedNetwork()
	return phu
}

// ClearProvisionedHostToHost clears the "ProvisionedHostToHost" edge to the Host entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToHost() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToHost()
	return phu
}

// ClearProvisionedHostToEndStepPlan clears the "ProvisionedHostToEndStepPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToEndStepPlan() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToEndStepPlan()
	return phu
}

// ClearProvisionedHostToProvisioningStep clears all "ProvisionedHostToProvisioningStep" edges to the ProvisioningStep entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToProvisioningStep() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToProvisioningStep()
	return phu
}

// RemoveProvisionedHostToProvisioningStepIDs removes the "ProvisionedHostToProvisioningStep" edge to ProvisioningStep entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveProvisionedHostToProvisioningStepIDs(ids ...int) *ProvisionedHostUpdate {
	phu.mutation.RemoveProvisionedHostToProvisioningStepIDs(ids...)
	return phu
}

// RemoveProvisionedHostToProvisioningStep removes "ProvisionedHostToProvisioningStep" edges to ProvisioningStep entities.
func (phu *ProvisionedHostUpdate) RemoveProvisionedHostToProvisioningStep(p ...*ProvisioningStep) *ProvisionedHostUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phu.RemoveProvisionedHostToProvisioningStepIDs(ids...)
}

// ClearProvisionedHostToAgentStatus clears all "ProvisionedHostToAgentStatus" edges to the AgentStatus entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToAgentStatus() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToAgentStatus()
	return phu
}

// RemoveProvisionedHostToAgentStatuIDs removes the "ProvisionedHostToAgentStatus" edge to AgentStatus entities by IDs.
func (phu *ProvisionedHostUpdate) RemoveProvisionedHostToAgentStatuIDs(ids ...int) *ProvisionedHostUpdate {
	phu.mutation.RemoveProvisionedHostToAgentStatuIDs(ids...)
	return phu
}

// RemoveProvisionedHostToAgentStatus removes "ProvisionedHostToAgentStatus" edges to AgentStatus entities.
func (phu *ProvisionedHostUpdate) RemoveProvisionedHostToAgentStatus(a ...*AgentStatus) *ProvisionedHostUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phu.RemoveProvisionedHostToAgentStatuIDs(ids...)
}

// ClearProvisionedHostToPlan clears the "ProvisionedHostToPlan" edge to the Plan entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToPlan() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToPlan()
	return phu
}

// ClearProvisionedHostToGinFileMiddleware clears the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (phu *ProvisionedHostUpdate) ClearProvisionedHostToGinFileMiddleware() *ProvisionedHostUpdate {
	phu.mutation.ClearProvisionedHostToGinFileMiddleware()
	return phu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *ProvisionedHostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(phu.hooks) == 0 {
		if err = phu.check(); err != nil {
			return 0, err
		}
		affected, err = phu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedHostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = phu.check(); err != nil {
				return 0, err
			}
			phu.mutation = mutation
			affected, err = phu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(phu.hooks) - 1; i >= 0; i-- {
			mut = phu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, phu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (phu *ProvisionedHostUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *ProvisionedHostUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *ProvisionedHostUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *ProvisionedHostUpdate) check() error {
	if _, ok := phu.mutation.ProvisionedHostToStatusID(); phu.mutation.ProvisionedHostToStatusCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToStatus\"")
	}
	if _, ok := phu.mutation.ProvisionedHostToProvisionedNetworkID(); phu.mutation.ProvisionedHostToProvisionedNetworkCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToProvisionedNetwork\"")
	}
	if _, ok := phu.mutation.ProvisionedHostToHostID(); phu.mutation.ProvisionedHostToHostCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToHost\"")
	}
	return nil
}

func (phu *ProvisionedHostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedhost.Table,
			Columns: provisionedhost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisionedhost.FieldID,
			},
		},
	}
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phu.mutation.SubnetIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionedhost.FieldSubnetIP,
		})
	}
	if phu.mutation.ProvisionedHostToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToStatusTable,
			Columns: []string{provisionedhost.ProvisionedHostToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToStatusTable,
			Columns: []string{provisionedhost.ProvisionedHostToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToHostTable,
			Columns: []string{provisionedhost.ProvisionedHostToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToHostTable,
			Columns: []string{provisionedhost.ProvisionedHostToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToEndStepPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToEndStepPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToEndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToEndStepPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToEndStepPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToEndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedProvisionedHostToProvisioningStepIDs(); len(nodes) > 0 && !phu.mutation.ProvisionedHostToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToAgentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedProvisionedHostToAgentStatusIDs(); len(nodes) > 0 && !phu.mutation.ProvisionedHostToAgentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToAgentStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.ProvisionedHostToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToGinFileMiddlewareTable,
			Columns: []string{provisionedhost.ProvisionedHostToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ProvisionedHostToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToGinFileMiddlewareTable,
			Columns: []string{provisionedhost.ProvisionedHostToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedhost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProvisionedHostUpdateOne is the builder for updating a single ProvisionedHost entity.
type ProvisionedHostUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProvisionedHostMutation
}

// SetSubnetIP sets the "subnet_ip" field.
func (phuo *ProvisionedHostUpdateOne) SetSubnetIP(s string) *ProvisionedHostUpdateOne {
	phuo.mutation.SetSubnetIP(s)
	return phuo
}

// SetProvisionedHostToStatusID sets the "ProvisionedHostToStatus" edge to the Status entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToStatusID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToStatusID(id)
	return phuo
}

// SetProvisionedHostToStatus sets the "ProvisionedHostToStatus" edge to the Status entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToStatus(s *Status) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToStatusID(s.ID)
}

// SetProvisionedHostToProvisionedNetworkID sets the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToProvisionedNetworkID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToProvisionedNetworkID(id)
	return phuo
}

// SetProvisionedHostToProvisionedNetwork sets the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToProvisionedNetwork(p *ProvisionedNetwork) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToProvisionedNetworkID(p.ID)
}

// SetProvisionedHostToHostID sets the "ProvisionedHostToHost" edge to the Host entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToHostID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToHostID(id)
	return phuo
}

// SetProvisionedHostToHost sets the "ProvisionedHostToHost" edge to the Host entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToHost(h *Host) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToHostID(h.ID)
}

// SetProvisionedHostToEndStepPlanID sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToEndStepPlanID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToEndStepPlanID(id)
	return phuo
}

// SetNillableProvisionedHostToEndStepPlanID sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableProvisionedHostToEndStepPlanID(id *int) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetProvisionedHostToEndStepPlanID(*id)
	}
	return phuo
}

// SetProvisionedHostToEndStepPlan sets the "ProvisionedHostToEndStepPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToEndStepPlan(p *Plan) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToEndStepPlanID(p.ID)
}

// AddProvisionedHostToProvisioningStepIDs adds the "ProvisionedHostToProvisioningStep" edge to the ProvisioningStep entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddProvisionedHostToProvisioningStepIDs(ids ...int) *ProvisionedHostUpdateOne {
	phuo.mutation.AddProvisionedHostToProvisioningStepIDs(ids...)
	return phuo
}

// AddProvisionedHostToProvisioningStep adds the "ProvisionedHostToProvisioningStep" edges to the ProvisioningStep entity.
func (phuo *ProvisionedHostUpdateOne) AddProvisionedHostToProvisioningStep(p ...*ProvisioningStep) *ProvisionedHostUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.AddProvisionedHostToProvisioningStepIDs(ids...)
}

// AddProvisionedHostToAgentStatuIDs adds the "ProvisionedHostToAgentStatus" edge to the AgentStatus entity by IDs.
func (phuo *ProvisionedHostUpdateOne) AddProvisionedHostToAgentStatuIDs(ids ...int) *ProvisionedHostUpdateOne {
	phuo.mutation.AddProvisionedHostToAgentStatuIDs(ids...)
	return phuo
}

// AddProvisionedHostToAgentStatus adds the "ProvisionedHostToAgentStatus" edges to the AgentStatus entity.
func (phuo *ProvisionedHostUpdateOne) AddProvisionedHostToAgentStatus(a ...*AgentStatus) *ProvisionedHostUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.AddProvisionedHostToAgentStatuIDs(ids...)
}

// SetProvisionedHostToPlanID sets the "ProvisionedHostToPlan" edge to the Plan entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToPlanID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToPlanID(id)
	return phuo
}

// SetNillableProvisionedHostToPlanID sets the "ProvisionedHostToPlan" edge to the Plan entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableProvisionedHostToPlanID(id *int) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetProvisionedHostToPlanID(*id)
	}
	return phuo
}

// SetProvisionedHostToPlan sets the "ProvisionedHostToPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToPlan(p *Plan) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToPlanID(p.ID)
}

// SetProvisionedHostToGinFileMiddlewareID sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity by ID.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToGinFileMiddlewareID(id int) *ProvisionedHostUpdateOne {
	phuo.mutation.SetProvisionedHostToGinFileMiddlewareID(id)
	return phuo
}

// SetNillableProvisionedHostToGinFileMiddlewareID sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity by ID if the given value is not nil.
func (phuo *ProvisionedHostUpdateOne) SetNillableProvisionedHostToGinFileMiddlewareID(id *int) *ProvisionedHostUpdateOne {
	if id != nil {
		phuo = phuo.SetProvisionedHostToGinFileMiddlewareID(*id)
	}
	return phuo
}

// SetProvisionedHostToGinFileMiddleware sets the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (phuo *ProvisionedHostUpdateOne) SetProvisionedHostToGinFileMiddleware(g *GinFileMiddleware) *ProvisionedHostUpdateOne {
	return phuo.SetProvisionedHostToGinFileMiddlewareID(g.ID)
}

// Mutation returns the ProvisionedHostMutation object of the builder.
func (phuo *ProvisionedHostUpdateOne) Mutation() *ProvisionedHostMutation {
	return phuo.mutation
}

// ClearProvisionedHostToStatus clears the "ProvisionedHostToStatus" edge to the Status entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToStatus() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToStatus()
	return phuo
}

// ClearProvisionedHostToProvisionedNetwork clears the "ProvisionedHostToProvisionedNetwork" edge to the ProvisionedNetwork entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToProvisionedNetwork() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToProvisionedNetwork()
	return phuo
}

// ClearProvisionedHostToHost clears the "ProvisionedHostToHost" edge to the Host entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToHost() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToHost()
	return phuo
}

// ClearProvisionedHostToEndStepPlan clears the "ProvisionedHostToEndStepPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToEndStepPlan() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToEndStepPlan()
	return phuo
}

// ClearProvisionedHostToProvisioningStep clears all "ProvisionedHostToProvisioningStep" edges to the ProvisioningStep entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToProvisioningStep() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToProvisioningStep()
	return phuo
}

// RemoveProvisionedHostToProvisioningStepIDs removes the "ProvisionedHostToProvisioningStep" edge to ProvisioningStep entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisionedHostToProvisioningStepIDs(ids ...int) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveProvisionedHostToProvisioningStepIDs(ids...)
	return phuo
}

// RemoveProvisionedHostToProvisioningStep removes "ProvisionedHostToProvisioningStep" edges to ProvisioningStep entities.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisionedHostToProvisioningStep(p ...*ProvisioningStep) *ProvisionedHostUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return phuo.RemoveProvisionedHostToProvisioningStepIDs(ids...)
}

// ClearProvisionedHostToAgentStatus clears all "ProvisionedHostToAgentStatus" edges to the AgentStatus entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToAgentStatus() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToAgentStatus()
	return phuo
}

// RemoveProvisionedHostToAgentStatuIDs removes the "ProvisionedHostToAgentStatus" edge to AgentStatus entities by IDs.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisionedHostToAgentStatuIDs(ids ...int) *ProvisionedHostUpdateOne {
	phuo.mutation.RemoveProvisionedHostToAgentStatuIDs(ids...)
	return phuo
}

// RemoveProvisionedHostToAgentStatus removes "ProvisionedHostToAgentStatus" edges to AgentStatus entities.
func (phuo *ProvisionedHostUpdateOne) RemoveProvisionedHostToAgentStatus(a ...*AgentStatus) *ProvisionedHostUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return phuo.RemoveProvisionedHostToAgentStatuIDs(ids...)
}

// ClearProvisionedHostToPlan clears the "ProvisionedHostToPlan" edge to the Plan entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToPlan() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToPlan()
	return phuo
}

// ClearProvisionedHostToGinFileMiddleware clears the "ProvisionedHostToGinFileMiddleware" edge to the GinFileMiddleware entity.
func (phuo *ProvisionedHostUpdateOne) ClearProvisionedHostToGinFileMiddleware() *ProvisionedHostUpdateOne {
	phuo.mutation.ClearProvisionedHostToGinFileMiddleware()
	return phuo
}

// Save executes the query and returns the updated ProvisionedHost entity.
func (phuo *ProvisionedHostUpdateOne) Save(ctx context.Context) (*ProvisionedHost, error) {
	var (
		err  error
		node *ProvisionedHost
	)
	if len(phuo.hooks) == 0 {
		if err = phuo.check(); err != nil {
			return nil, err
		}
		node, err = phuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisionedHostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = phuo.check(); err != nil {
				return nil, err
			}
			phuo.mutation = mutation
			node, err = phuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(phuo.hooks) - 1; i >= 0; i-- {
			mut = phuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, phuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *ProvisionedHostUpdateOne) SaveX(ctx context.Context) *ProvisionedHost {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *ProvisionedHostUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *ProvisionedHostUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *ProvisionedHostUpdateOne) check() error {
	if _, ok := phuo.mutation.ProvisionedHostToStatusID(); phuo.mutation.ProvisionedHostToStatusCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToStatus\"")
	}
	if _, ok := phuo.mutation.ProvisionedHostToProvisionedNetworkID(); phuo.mutation.ProvisionedHostToProvisionedNetworkCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToProvisionedNetwork\"")
	}
	if _, ok := phuo.mutation.ProvisionedHostToHostID(); phuo.mutation.ProvisionedHostToHostCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"ProvisionedHostToHost\"")
	}
	return nil
}

func (phuo *ProvisionedHostUpdateOne) sqlSave(ctx context.Context) (_node *ProvisionedHost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionedhost.Table,
			Columns: provisionedhost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisionedhost.FieldID,
			},
		},
	}
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProvisionedHost.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phuo.mutation.SubnetIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisionedhost.FieldSubnetIP,
		})
	}
	if phuo.mutation.ProvisionedHostToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToStatusTable,
			Columns: []string{provisionedhost.ProvisionedHostToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToStatusTable,
			Columns: []string{provisionedhost.ProvisionedHostToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToProvisionedNetworkTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisionedNetworkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToHostTable,
			Columns: []string{provisionedhost.ProvisionedHostToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToHostTable,
			Columns: []string{provisionedhost.ProvisionedHostToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToEndStepPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToEndStepPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToEndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToEndStepPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   provisionedhost.ProvisionedHostToEndStepPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToEndStepPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedProvisionedHostToProvisioningStepIDs(); len(nodes) > 0 && !phuo.mutation.ProvisionedHostToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToProvisioningStepTable,
			Columns: []string{provisionedhost.ProvisionedHostToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToAgentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedProvisionedHostToAgentStatusIDs(); len(nodes) > 0 && !phuo.mutation.ProvisionedHostToAgentStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToAgentStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToAgentStatusTable,
			Columns: provisionedhost.ProvisionedHostToAgentStatusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agentstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToPlanTable,
			Columns: []string{provisionedhost.ProvisionedHostToPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.ProvisionedHostToGinFileMiddlewareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToGinFileMiddlewareTable,
			Columns: []string{provisionedhost.ProvisionedHostToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ProvisionedHostToGinFileMiddlewareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   provisionedhost.ProvisionedHostToGinFileMiddlewareTable,
			Columns: []string{provisionedhost.ProvisionedHostToGinFileMiddlewareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ginfilemiddleware.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisionedHost{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisionedhost.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
