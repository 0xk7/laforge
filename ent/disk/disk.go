// Code generated by entc, DO NOT EDIT.

package disk

const (
	// Label holds the string label denoting the disk type in the database.
	Label = "disk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"

	// EdgeDiskToTag holds the string denoting the disktotag edge name in mutations.
	EdgeDiskToTag = "DiskToTag"
	// EdgeDiskToHost holds the string denoting the disktohost edge name in mutations.
	EdgeDiskToHost = "DiskToHost"

	// Table holds the table name of the disk in the database.
	Table = "disks"
	// DiskToTagTable is the table the holds the DiskToTag relation/edge.
	DiskToTagTable = "tags"
	// DiskToTagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	DiskToTagInverseTable = "tags"
	// DiskToTagColumn is the table column denoting the DiskToTag relation/edge.
	DiskToTagColumn = "disk_disk_to_tag"
	// DiskToHostTable is the table the holds the DiskToHost relation/edge. The primary key declared below.
	DiskToHostTable = "host_HostToDisk"
	// DiskToHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	DiskToHostInverseTable = "hosts"
)

// Columns holds all SQL columns for disk fields.
var Columns = []string{
	FieldID,
	FieldSize,
}

var (
	// DiskToHostPrimaryKey and DiskToHostColumn2 are the table columns denoting the
	// primary key for the DiskToHost relation (M2M).
	DiskToHostPrimaryKey = []string{"host_id", "disk_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SizeValidator is a validator for the "size" field. It is called by the builders before save.
	SizeValidator func(int) error
)
