// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
)

// EnvironmentQuery is the builder for querying Environment entities.
type EnvironmentQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.Environment
	// eager-loading edges.
	withEnvironmentToTag             *TagQuery
	withEnvironmentToUser            *UserQuery
	withEnvironmentToHost            *HostQuery
	withEnvironmentToCompetition     *CompetitionQuery
	withEnvironmentToBuild           *BuildQuery
	withEnvironmentToIncludedNetwork *IncludedNetworkQuery
	withEnvironmentToNetwork         *NetworkQuery
	withEnvironmentToTeam            *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnvironmentQuery builder.
func (eq *EnvironmentQuery) Where(ps ...predicate.Environment) *EnvironmentQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit adds a limit step to the query.
func (eq *EnvironmentQuery) Limit(limit int) *EnvironmentQuery {
	eq.limit = &limit
	return eq
}

// Offset adds an offset step to the query.
func (eq *EnvironmentQuery) Offset(offset int) *EnvironmentQuery {
	eq.offset = &offset
	return eq
}

// Order adds an order step to the query.
func (eq *EnvironmentQuery) Order(o ...OrderFunc) *EnvironmentQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryEnvironmentToTag chains the current query on the "EnvironmentToTag" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToTag() *TagQuery {
	query := &TagQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToTagTable, environment.EnvironmentToTagColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToUser chains the current query on the "EnvironmentToUser" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToUser() *UserQuery {
	query := &UserQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToUserTable, environment.EnvironmentToUserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToHost chains the current query on the "EnvironmentToHost" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToHost() *HostQuery {
	query := &HostQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToHostTable, environment.EnvironmentToHostPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToCompetition chains the current query on the "EnvironmentToCompetition" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToCompetition() *CompetitionQuery {
	query := &CompetitionQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToCompetitionTable, environment.EnvironmentToCompetitionPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToBuild chains the current query on the "EnvironmentToBuild" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToBuild() *BuildQuery {
	query := &BuildQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToBuildTable, environment.EnvironmentToBuildPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToIncludedNetwork chains the current query on the "EnvironmentToIncludedNetwork" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToIncludedNetwork() *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.EnvironmentToIncludedNetworkTable, environment.EnvironmentToIncludedNetworkPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToNetwork chains the current query on the "EnvironmentToNetwork" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToNetwork() *NetworkQuery {
	query := &NetworkQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.EnvironmentToNetworkTable, environment.EnvironmentToNetworkPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnvironmentToTeam chains the current query on the "EnvironmentToTeam" edge.
func (eq *EnvironmentQuery) QueryEnvironmentToTeam() *TeamQuery {
	query := &TeamQuery{config: eq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.EnvironmentToTeamTable, environment.EnvironmentToTeamPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Environment entity from the query.
// Returns a *NotFoundError when no Environment was found.
func (eq *EnvironmentQuery) First(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{environment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstX(ctx context.Context) *Environment {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Environment ID from the query.
// Returns a *NotFoundError when no Environment ID was found.
func (eq *EnvironmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{environment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnvironmentQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Environment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Environment entity is not found.
// Returns a *NotFoundError when no Environment entities are found.
func (eq *EnvironmentQuery) Only(ctx context.Context) (*Environment, error) {
	nodes, err := eq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{environment.Label}
	default:
		return nil, &NotSingularError{environment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyX(ctx context.Context) *Environment {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Environment ID in the query.
// Returns a *NotSingularError when exactly one Environment ID is not found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnvironmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = &NotSingularError{environment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnvironmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Environments.
func (eq *EnvironmentQuery) All(ctx context.Context) ([]*Environment, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnvironmentQuery) AllX(ctx context.Context) []*Environment {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Environment IDs.
func (eq *EnvironmentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := eq.Select(environment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnvironmentQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnvironmentQuery) Count(ctx context.Context) (int, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnvironmentQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnvironmentQuery) Exist(ctx context.Context) (bool, error) {
	if err := eq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnvironmentQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnvironmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnvironmentQuery) Clone() *EnvironmentQuery {
	if eq == nil {
		return nil
	}
	return &EnvironmentQuery{
		config:                           eq.config,
		limit:                            eq.limit,
		offset:                           eq.offset,
		order:                            append([]OrderFunc{}, eq.order...),
		predicates:                       append([]predicate.Environment{}, eq.predicates...),
		withEnvironmentToTag:             eq.withEnvironmentToTag.Clone(),
		withEnvironmentToUser:            eq.withEnvironmentToUser.Clone(),
		withEnvironmentToHost:            eq.withEnvironmentToHost.Clone(),
		withEnvironmentToCompetition:     eq.withEnvironmentToCompetition.Clone(),
		withEnvironmentToBuild:           eq.withEnvironmentToBuild.Clone(),
		withEnvironmentToIncludedNetwork: eq.withEnvironmentToIncludedNetwork.Clone(),
		withEnvironmentToNetwork:         eq.withEnvironmentToNetwork.Clone(),
		withEnvironmentToTeam:            eq.withEnvironmentToTeam.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithEnvironmentToTag tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToTag" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToTag(opts ...func(*TagQuery)) *EnvironmentQuery {
	query := &TagQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToTag = query
	return eq
}

// WithEnvironmentToUser tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToUser" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToUser(opts ...func(*UserQuery)) *EnvironmentQuery {
	query := &UserQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToUser = query
	return eq
}

// WithEnvironmentToHost tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToHost" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToHost(opts ...func(*HostQuery)) *EnvironmentQuery {
	query := &HostQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToHost = query
	return eq
}

// WithEnvironmentToCompetition tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToCompetition" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToCompetition(opts ...func(*CompetitionQuery)) *EnvironmentQuery {
	query := &CompetitionQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToCompetition = query
	return eq
}

// WithEnvironmentToBuild tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToBuild(opts ...func(*BuildQuery)) *EnvironmentQuery {
	query := &BuildQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToBuild = query
	return eq
}

// WithEnvironmentToIncludedNetwork tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToIncludedNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToIncludedNetwork(opts ...func(*IncludedNetworkQuery)) *EnvironmentQuery {
	query := &IncludedNetworkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToIncludedNetwork = query
	return eq
}

// WithEnvironmentToNetwork tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToNetwork(opts ...func(*NetworkQuery)) *EnvironmentQuery {
	query := &NetworkQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToNetwork = query
	return eq
}

// WithEnvironmentToTeam tells the query-builder to eager-load the nodes that are connected to
// the "EnvironmentToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnvironmentQuery) WithEnvironmentToTeam(opts ...func(*TeamQuery)) *EnvironmentQuery {
	query := &TeamQuery{config: eq.config}
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnvironmentToTeam = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Environment.Query().
//		GroupBy(environment.FieldHclID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (eq *EnvironmentQuery) GroupBy(field string, fields ...string) *EnvironmentGroupBy {
	group := &EnvironmentGroupBy{config: eq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HclID string `json:"hcl_id,omitempty" hcl:"id,label"`
//	}
//
//	client.Environment.Query().
//		Select(environment.FieldHclID).
//		Scan(ctx, &v)
//
func (eq *EnvironmentQuery) Select(field string, fields ...string) *EnvironmentSelect {
	eq.fields = append([]string{field}, fields...)
	return &EnvironmentSelect{EnvironmentQuery: eq}
}

func (eq *EnvironmentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eq.fields {
		if !environment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnvironmentQuery) sqlAll(ctx context.Context) ([]*Environment, error) {
	var (
		nodes       = []*Environment{}
		_spec       = eq.querySpec()
		loadedTypes = [8]bool{
			eq.withEnvironmentToTag != nil,
			eq.withEnvironmentToUser != nil,
			eq.withEnvironmentToHost != nil,
			eq.withEnvironmentToCompetition != nil,
			eq.withEnvironmentToBuild != nil,
			eq.withEnvironmentToIncludedNetwork != nil,
			eq.withEnvironmentToNetwork != nil,
			eq.withEnvironmentToTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Environment{config: eq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := eq.withEnvironmentToTag; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Environment)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.EnvironmentToTag = []*Tag{}
		}
		query.withFKs = true
		query.Where(predicate.Tag(func(s *sql.Selector) {
			s.Where(sql.InValues(environment.EnvironmentToTagColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.environment_environment_to_tag
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "environment_environment_to_tag" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "environment_environment_to_tag" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.EnvironmentToTag = append(node.Edges.EnvironmentToTag, n)
		}
	}

	if query := eq.withEnvironmentToUser; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToUser = []*User{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   environment.EnvironmentToUserTable,
				Columns: environment.EnvironmentToUserPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToUserPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToUser": %v`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToUser" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToUser = append(nodes[i].Edges.EnvironmentToUser, n)
			}
		}
	}

	if query := eq.withEnvironmentToHost; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToHost = []*Host{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   environment.EnvironmentToHostTable,
				Columns: environment.EnvironmentToHostPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToHostPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToHost": %v`, err)
		}
		query.Where(host.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToHost" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToHost = append(nodes[i].Edges.EnvironmentToHost, n)
			}
		}
	}

	if query := eq.withEnvironmentToCompetition; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToCompetition = []*Competition{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   environment.EnvironmentToCompetitionTable,
				Columns: environment.EnvironmentToCompetitionPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToCompetitionPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToCompetition": %v`, err)
		}
		query.Where(competition.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToCompetition" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToCompetition = append(nodes[i].Edges.EnvironmentToCompetition, n)
			}
		}
	}

	if query := eq.withEnvironmentToBuild; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToBuild = []*Build{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   environment.EnvironmentToBuildTable,
				Columns: environment.EnvironmentToBuildPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToBuildPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToBuild": %v`, err)
		}
		query.Where(build.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToBuild" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToBuild = append(nodes[i].Edges.EnvironmentToBuild, n)
			}
		}
	}

	if query := eq.withEnvironmentToIncludedNetwork; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToIncludedNetwork = []*IncludedNetwork{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   environment.EnvironmentToIncludedNetworkTable,
				Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToIncludedNetworkPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToIncludedNetwork": %v`, err)
		}
		query.Where(includednetwork.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToIncludedNetwork" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToIncludedNetwork = append(nodes[i].Edges.EnvironmentToIncludedNetwork, n)
			}
		}
	}

	if query := eq.withEnvironmentToNetwork; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToNetwork = []*Network{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   environment.EnvironmentToNetworkTable,
				Columns: environment.EnvironmentToNetworkPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToNetworkPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToNetwork": %v`, err)
		}
		query.Where(network.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToNetwork" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToNetwork = append(nodes[i].Edges.EnvironmentToNetwork, n)
			}
		}
	}

	if query := eq.withEnvironmentToTeam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Environment, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.EnvironmentToTeam = []*Team{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Environment)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   environment.EnvironmentToTeamTable,
				Columns: environment.EnvironmentToTeamPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(environment.EnvironmentToTeamPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, eq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "EnvironmentToTeam": %v`, err)
		}
		query.Where(team.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "EnvironmentToTeam" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.EnvironmentToTeam = append(nodes[i].Edges.EnvironmentToTeam, n)
			}
		}
	}

	return nodes, nil
}

func (eq *EnvironmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnvironmentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := eq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (eq *EnvironmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, environment.FieldID)
		for i := range fields {
			if fields[i] != environment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, environment.ValidColumn)
			}
		}
	}
	return _spec
}

func (eq *EnvironmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(environment.Table)
	selector := builder.Select(t1.Columns(environment.Columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(environment.Columns...)...)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector, environment.ValidColumn)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EnvironmentGroupBy is the group-by builder for Environment entities.
type EnvironmentGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnvironmentGroupBy) Aggregate(fns ...AggregateFunc) *EnvironmentGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the group-by query and scans the result into the given value.
func (egb *EnvironmentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := egb.path(ctx)
	if err != nil {
		return err
	}
	egb.sql = query
	return egb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (egb *EnvironmentGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := egb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnvironmentGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (egb *EnvironmentGroupBy) StringsX(ctx context.Context) []string {
	v, err := egb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = egb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (egb *EnvironmentGroupBy) StringX(ctx context.Context) string {
	v, err := egb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnvironmentGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (egb *EnvironmentGroupBy) IntsX(ctx context.Context) []int {
	v, err := egb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = egb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (egb *EnvironmentGroupBy) IntX(ctx context.Context) int {
	v, err := egb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnvironmentGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (egb *EnvironmentGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := egb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = egb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (egb *EnvironmentGroupBy) Float64X(ctx context.Context) float64 {
	v, err := egb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(egb.fields) > 1 {
		return nil, errors.New("ent: EnvironmentGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := egb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (egb *EnvironmentGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := egb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (egb *EnvironmentGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = egb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (egb *EnvironmentGroupBy) BoolX(ctx context.Context) bool {
	v, err := egb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (egb *EnvironmentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range egb.fields {
		if !environment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := egb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (egb *EnvironmentGroupBy) sqlQuery() *sql.Selector {
	selector := egb.sql
	columns := make([]string, 0, len(egb.fields)+len(egb.fns))
	columns = append(columns, egb.fields...)
	for _, fn := range egb.fns {
		columns = append(columns, fn(selector, environment.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(egb.fields...)
}

// EnvironmentSelect is the builder for selecting fields of Environment entities.
type EnvironmentSelect struct {
	*EnvironmentQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnvironmentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	es.sql = es.EnvironmentQuery.sqlQuery(ctx)
	return es.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (es *EnvironmentSelect) ScanX(ctx context.Context, v interface{}) {
	if err := es.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Strings(ctx context.Context) ([]string, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnvironmentSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (es *EnvironmentSelect) StringsX(ctx context.Context) []string {
	v, err := es.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = es.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (es *EnvironmentSelect) StringX(ctx context.Context) string {
	v, err := es.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Ints(ctx context.Context) ([]int, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnvironmentSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (es *EnvironmentSelect) IntsX(ctx context.Context) []int {
	v, err := es.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = es.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (es *EnvironmentSelect) IntX(ctx context.Context) int {
	v, err := es.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnvironmentSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (es *EnvironmentSelect) Float64sX(ctx context.Context) []float64 {
	v, err := es.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = es.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (es *EnvironmentSelect) Float64X(ctx context.Context) float64 {
	v, err := es.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(es.fields) > 1 {
		return nil, errors.New("ent: EnvironmentSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := es.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (es *EnvironmentSelect) BoolsX(ctx context.Context) []bool {
	v, err := es.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (es *EnvironmentSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = es.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{environment.Label}
	default:
		err = fmt.Errorf("ent: EnvironmentSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (es *EnvironmentSelect) BoolX(ctx context.Context) bool {
	v, err := es.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (es *EnvironmentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := es.sqlQuery().Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (es *EnvironmentSelect) sqlQuery() sql.Querier {
	selector := es.sql
	selector.Select(selector.Columns(es.fields...)...)
	return selector
}
