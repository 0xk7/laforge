// Code generated by entc, DO NOT EDIT.

package environment

const (
	// Label holds the string label denoting the environment type in the database.
	Label = "environment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldCompetitionID holds the string denoting the competition_id field in the database.
	FieldCompetitionID = "competition_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBuilder holds the string denoting the builder field in the database.
	FieldBuilder = "builder"
	// FieldTeamCount holds the string denoting the team_count field in the database.
	FieldTeamCount = "team_count"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldAdminCidrs holds the string denoting the admin_cidrs field in the database.
	FieldAdminCidrs = "admin_cidrs"
	// FieldExposedVdiPorts holds the string denoting the exposed_vdi_ports field in the database.
	FieldExposedVdiPorts = "exposed_vdi_ports"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"

	// EdgeEnvironmentToTag holds the string denoting the environmenttotag edge name in mutations.
	EdgeEnvironmentToTag = "EnvironmentToTag"
	// EdgeEnvironmentToUser holds the string denoting the environmenttouser edge name in mutations.
	EdgeEnvironmentToUser = "EnvironmentToUser"
	// EdgeEnvironmentToHost holds the string denoting the environmenttohost edge name in mutations.
	EdgeEnvironmentToHost = "EnvironmentToHost"
	// EdgeEnvironmentToCompetition holds the string denoting the environmenttocompetition edge name in mutations.
	EdgeEnvironmentToCompetition = "EnvironmentToCompetition"
	// EdgeEnvironmentToBuild holds the string denoting the environmenttobuild edge name in mutations.
	EdgeEnvironmentToBuild = "EnvironmentToBuild"
	// EdgeEnvironmentToIdentity holds the string denoting the environmenttoidentity edge name in mutations.
	EdgeEnvironmentToIdentity = "EnvironmentToIdentity"
	// EdgeEnvironmentToCommand holds the string denoting the environmenttocommand edge name in mutations.
	EdgeEnvironmentToCommand = "EnvironmentToCommand"
	// EdgeEnvironmentToScript holds the string denoting the environmenttoscript edge name in mutations.
	EdgeEnvironmentToScript = "EnvironmentToScript"
	// EdgeEnvironmentToFileDownload holds the string denoting the environmenttofiledownload edge name in mutations.
	EdgeEnvironmentToFileDownload = "EnvironmentToFileDownload"
	// EdgeEnvironmentToFileDelete holds the string denoting the environmenttofiledelete edge name in mutations.
	EdgeEnvironmentToFileDelete = "EnvironmentToFileDelete"
	// EdgeEnvironmentToFileExtract holds the string denoting the environmenttofileextract edge name in mutations.
	EdgeEnvironmentToFileExtract = "EnvironmentToFileExtract"
	// EdgeEnvironmentToIncludedNetwork holds the string denoting the environmenttoincludednetwork edge name in mutations.
	EdgeEnvironmentToIncludedNetwork = "EnvironmentToIncludedNetwork"
	// EdgeEnvironmentToFinding holds the string denoting the environmenttofinding edge name in mutations.
	EdgeEnvironmentToFinding = "EnvironmentToFinding"
	// EdgeEnvironmentToDNSRecord holds the string denoting the environmenttodnsrecord edge name in mutations.
	EdgeEnvironmentToDNSRecord = "EnvironmentToDNSRecord"
	// EdgeEnvironmentToNetwork holds the string denoting the environmenttonetwork edge name in mutations.
	EdgeEnvironmentToNetwork = "EnvironmentToNetwork"
	// EdgeEnvironmentToHostDependency holds the string denoting the environmenttohostdependency edge name in mutations.
	EdgeEnvironmentToHostDependency = "EnvironmentToHostDependency"
	// EdgeEnvironmentToTeam holds the string denoting the environmenttoteam edge name in mutations.
	EdgeEnvironmentToTeam = "EnvironmentToTeam"

	// Table holds the table name of the environment in the database.
	Table = "environments"
	// EnvironmentToTagTable is the table the holds the EnvironmentToTag relation/edge.
	EnvironmentToTagTable = "tags"
	// EnvironmentToTagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	EnvironmentToTagInverseTable = "tags"
	// EnvironmentToTagColumn is the table column denoting the EnvironmentToTag relation/edge.
	EnvironmentToTagColumn = "environment_environment_to_tag"
	// EnvironmentToUserTable is the table the holds the EnvironmentToUser relation/edge. The primary key declared below.
	EnvironmentToUserTable = "environment_EnvironmentToUser"
	// EnvironmentToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	EnvironmentToUserInverseTable = "users"
	// EnvironmentToHostTable is the table the holds the EnvironmentToHost relation/edge. The primary key declared below.
	EnvironmentToHostTable = "environment_EnvironmentToHost"
	// EnvironmentToHostInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	EnvironmentToHostInverseTable = "hosts"
	// EnvironmentToCompetitionTable is the table the holds the EnvironmentToCompetition relation/edge. The primary key declared below.
	EnvironmentToCompetitionTable = "environment_EnvironmentToCompetition"
	// EnvironmentToCompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	EnvironmentToCompetitionInverseTable = "competitions"
	// EnvironmentToBuildTable is the table the holds the EnvironmentToBuild relation/edge. The primary key declared below.
	EnvironmentToBuildTable = "environment_EnvironmentToBuild"
	// EnvironmentToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	EnvironmentToBuildInverseTable = "builds"
	// EnvironmentToIdentityTable is the table the holds the EnvironmentToIdentity relation/edge. The primary key declared below.
	EnvironmentToIdentityTable = "environment_EnvironmentToIdentity"
	// EnvironmentToIdentityInverseTable is the table name for the Identity entity.
	// It exists in this package in order to avoid circular dependency with the "identity" package.
	EnvironmentToIdentityInverseTable = "identities"
	// EnvironmentToCommandTable is the table the holds the EnvironmentToCommand relation/edge. The primary key declared below.
	EnvironmentToCommandTable = "environment_EnvironmentToCommand"
	// EnvironmentToCommandInverseTable is the table name for the Command entity.
	// It exists in this package in order to avoid circular dependency with the "command" package.
	EnvironmentToCommandInverseTable = "commands"
	// EnvironmentToScriptTable is the table the holds the EnvironmentToScript relation/edge. The primary key declared below.
	EnvironmentToScriptTable = "environment_EnvironmentToScript"
	// EnvironmentToScriptInverseTable is the table name for the Script entity.
	// It exists in this package in order to avoid circular dependency with the "script" package.
	EnvironmentToScriptInverseTable = "scripts"
	// EnvironmentToFileDownloadTable is the table the holds the EnvironmentToFileDownload relation/edge. The primary key declared below.
	EnvironmentToFileDownloadTable = "environment_EnvironmentToFileDownload"
	// EnvironmentToFileDownloadInverseTable is the table name for the FileDownload entity.
	// It exists in this package in order to avoid circular dependency with the "filedownload" package.
	EnvironmentToFileDownloadInverseTable = "file_downloads"
	// EnvironmentToFileDeleteTable is the table the holds the EnvironmentToFileDelete relation/edge. The primary key declared below.
	EnvironmentToFileDeleteTable = "environment_EnvironmentToFileDelete"
	// EnvironmentToFileDeleteInverseTable is the table name for the FileDelete entity.
	// It exists in this package in order to avoid circular dependency with the "filedelete" package.
	EnvironmentToFileDeleteInverseTable = "file_deletes"
	// EnvironmentToFileExtractTable is the table the holds the EnvironmentToFileExtract relation/edge. The primary key declared below.
	EnvironmentToFileExtractTable = "environment_EnvironmentToFileExtract"
	// EnvironmentToFileExtractInverseTable is the table name for the FileExtract entity.
	// It exists in this package in order to avoid circular dependency with the "fileextract" package.
	EnvironmentToFileExtractInverseTable = "file_extracts"
	// EnvironmentToIncludedNetworkTable is the table the holds the EnvironmentToIncludedNetwork relation/edge. The primary key declared below.
	EnvironmentToIncludedNetworkTable = "environment_EnvironmentToIncludedNetwork"
	// EnvironmentToIncludedNetworkInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	EnvironmentToIncludedNetworkInverseTable = "included_networks"
	// EnvironmentToFindingTable is the table the holds the EnvironmentToFinding relation/edge. The primary key declared below.
	EnvironmentToFindingTable = "environment_EnvironmentToFinding"
	// EnvironmentToFindingInverseTable is the table name for the Finding entity.
	// It exists in this package in order to avoid circular dependency with the "finding" package.
	EnvironmentToFindingInverseTable = "findings"
	// EnvironmentToDNSRecordTable is the table the holds the EnvironmentToDNSRecord relation/edge. The primary key declared below.
	EnvironmentToDNSRecordTable = "environment_EnvironmentToDNSRecord"
	// EnvironmentToDNSRecordInverseTable is the table name for the DNSRecord entity.
	// It exists in this package in order to avoid circular dependency with the "dnsrecord" package.
	EnvironmentToDNSRecordInverseTable = "dns_records"
	// EnvironmentToNetworkTable is the table the holds the EnvironmentToNetwork relation/edge. The primary key declared below.
	EnvironmentToNetworkTable = "environment_EnvironmentToNetwork"
	// EnvironmentToNetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	EnvironmentToNetworkInverseTable = "networks"
	// EnvironmentToHostDependencyTable is the table the holds the EnvironmentToHostDependency relation/edge. The primary key declared below.
	EnvironmentToHostDependencyTable = "environment_EnvironmentToHostDependency"
	// EnvironmentToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	EnvironmentToHostDependencyInverseTable = "host_dependencies"
	// EnvironmentToTeamTable is the table the holds the EnvironmentToTeam relation/edge. The primary key declared below.
	EnvironmentToTeamTable = "team_TeamToEnvironment"
	// EnvironmentToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	EnvironmentToTeamInverseTable = "teams"
)

// Columns holds all SQL columns for environment fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldCompetitionID,
	FieldName,
	FieldDescription,
	FieldBuilder,
	FieldTeamCount,
	FieldRevision,
	FieldAdminCidrs,
	FieldExposedVdiPorts,
	FieldConfig,
	FieldTags,
}

var (
	// EnvironmentToUserPrimaryKey and EnvironmentToUserColumn2 are the table columns denoting the
	// primary key for the EnvironmentToUser relation (M2M).
	EnvironmentToUserPrimaryKey = []string{"environment_id", "user_id"}
	// EnvironmentToHostPrimaryKey and EnvironmentToHostColumn2 are the table columns denoting the
	// primary key for the EnvironmentToHost relation (M2M).
	EnvironmentToHostPrimaryKey = []string{"environment_id", "host_id"}
	// EnvironmentToCompetitionPrimaryKey and EnvironmentToCompetitionColumn2 are the table columns denoting the
	// primary key for the EnvironmentToCompetition relation (M2M).
	EnvironmentToCompetitionPrimaryKey = []string{"environment_id", "competition_id"}
	// EnvironmentToBuildPrimaryKey and EnvironmentToBuildColumn2 are the table columns denoting the
	// primary key for the EnvironmentToBuild relation (M2M).
	EnvironmentToBuildPrimaryKey = []string{"environment_id", "build_id"}
	// EnvironmentToIdentityPrimaryKey and EnvironmentToIdentityColumn2 are the table columns denoting the
	// primary key for the EnvironmentToIdentity relation (M2M).
	EnvironmentToIdentityPrimaryKey = []string{"environment_id", "identity_id"}
	// EnvironmentToCommandPrimaryKey and EnvironmentToCommandColumn2 are the table columns denoting the
	// primary key for the EnvironmentToCommand relation (M2M).
	EnvironmentToCommandPrimaryKey = []string{"environment_id", "command_id"}
	// EnvironmentToScriptPrimaryKey and EnvironmentToScriptColumn2 are the table columns denoting the
	// primary key for the EnvironmentToScript relation (M2M).
	EnvironmentToScriptPrimaryKey = []string{"environment_id", "script_id"}
	// EnvironmentToFileDownloadPrimaryKey and EnvironmentToFileDownloadColumn2 are the table columns denoting the
	// primary key for the EnvironmentToFileDownload relation (M2M).
	EnvironmentToFileDownloadPrimaryKey = []string{"environment_id", "file_download_id"}
	// EnvironmentToFileDeletePrimaryKey and EnvironmentToFileDeleteColumn2 are the table columns denoting the
	// primary key for the EnvironmentToFileDelete relation (M2M).
	EnvironmentToFileDeletePrimaryKey = []string{"environment_id", "file_delete_id"}
	// EnvironmentToFileExtractPrimaryKey and EnvironmentToFileExtractColumn2 are the table columns denoting the
	// primary key for the EnvironmentToFileExtract relation (M2M).
	EnvironmentToFileExtractPrimaryKey = []string{"environment_id", "file_extract_id"}
	// EnvironmentToIncludedNetworkPrimaryKey and EnvironmentToIncludedNetworkColumn2 are the table columns denoting the
	// primary key for the EnvironmentToIncludedNetwork relation (M2M).
	EnvironmentToIncludedNetworkPrimaryKey = []string{"environment_id", "included_network_id"}
	// EnvironmentToFindingPrimaryKey and EnvironmentToFindingColumn2 are the table columns denoting the
	// primary key for the EnvironmentToFinding relation (M2M).
	EnvironmentToFindingPrimaryKey = []string{"environment_id", "finding_id"}
	// EnvironmentToDNSRecordPrimaryKey and EnvironmentToDNSRecordColumn2 are the table columns denoting the
	// primary key for the EnvironmentToDNSRecord relation (M2M).
	EnvironmentToDNSRecordPrimaryKey = []string{"environment_id", "dns_record_id"}
	// EnvironmentToNetworkPrimaryKey and EnvironmentToNetworkColumn2 are the table columns denoting the
	// primary key for the EnvironmentToNetwork relation (M2M).
	EnvironmentToNetworkPrimaryKey = []string{"environment_id", "network_id"}
	// EnvironmentToHostDependencyPrimaryKey and EnvironmentToHostDependencyColumn2 are the table columns denoting the
	// primary key for the EnvironmentToHostDependency relation (M2M).
	EnvironmentToHostDependencyPrimaryKey = []string{"environment_id", "host_dependency_id"}
	// EnvironmentToTeamPrimaryKey and EnvironmentToTeamColumn2 are the table columns denoting the
	// primary key for the EnvironmentToTeam relation (M2M).
	EnvironmentToTeamPrimaryKey = []string{"team_id", "environment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
