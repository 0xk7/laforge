// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/schema"
	"github.com/99designs/gqlgen/graphql"
	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (as *AgentStatus) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     as.ID,
		Type:   "AgentStatus",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(as.ClientID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "ClientID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Hostname); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "Hostname",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.UpTime); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int64",
		Name:  "UpTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.BootTime); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int64",
		Name:  "BootTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.NumProcs); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int64",
		Name:  "NumProcs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Os); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "Os",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.HostID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "HostID",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load1); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "float64",
		Name:  "Load1",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load5); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "float64",
		Name:  "Load5",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Load15); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "float64",
		Name:  "Load15",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.TotalMem); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "int64",
		Name:  "TotalMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.FreeMem); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "int64",
		Name:  "FreeMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.UsedMem); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "int64",
		Name:  "UsedMem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Timestamp); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "int64",
		Name:  "Timestamp",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "AgentStatusToTag",
	}
	node.Edges[0].IDs, err = as.QueryAgentStatusToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProvisionedHost",
		Name: "AgentStatusToProvisionedHost",
	}
	node.Edges[1].IDs, err = as.QueryAgentStatusToProvisionedHost().
		Select(provisionedhost.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Build) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Build",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(b.Revision); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Config); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "BuildToUser",
	}
	node.Edges[0].IDs, err = b.QueryBuildToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Tag",
		Name: "BuildToTag",
	}
	node.Edges[1].IDs, err = b.QueryBuildToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "BuildToProvisionedNetwork",
	}
	node.Edges[2].IDs, err = b.QueryBuildToProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Team",
		Name: "BuildToTeam",
	}
	node.Edges[3].IDs, err = b.QueryBuildToTeam().
		Select(team.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Environment",
		Name: "BuildToEnvironment",
	}
	node.Edges[4].IDs, err = b.QueryBuildToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Command) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Command",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Program); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "program",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Args); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "args",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.IgnoreErrors); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "ignore_errors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Cooldown); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "cooldown",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Timeout); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "timeout",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Vars); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Tags); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "CommandToUser",
	}
	node.Edges[0].IDs, err = c.QueryCommandToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Tag",
		Name: "CommandToTag",
	}
	node.Edges[1].IDs, err = c.QueryCommandToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "CommandToEnvironment",
	}
	node.Edges[2].IDs, err = c.QueryCommandToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Competition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Competition",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.RootPassword); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "root_password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Config); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Tags); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "CompetitionToTag",
	}
	node.Edges[0].IDs, err = c.QueryCompetitionToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "DNS",
		Name: "CompetitionToDNS",
	}
	node.Edges[1].IDs, err = c.QueryCompetitionToDNS().
		Select(dns.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "CompetitionToEnvironment",
	}
	node.Edges[2].IDs, err = c.QueryCompetitionToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *DNS) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "DNS",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(d.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.RootDomain); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "root_domain",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.DNSServers); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]string",
		Name:  "dns_servers",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.NtpServers); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "ntp_servers",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Config); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "DNSToTag",
	}
	node.Edges[0].IDs, err = d.QueryDNSToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dr *DNSRecord) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dr.ID,
		Type:   "DNSRecord",
		Fields: make([]*Field, 8),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(dr.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Values); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "[]string",
		Name:  "values",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Zone); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "zone",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Vars); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dr.Tags); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "DNSRecordToTag",
	}
	node.Edges[0].IDs, err = dr.QueryDNSRecordToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "DNSRecordToEnvironment",
	}
	node.Edges[1].IDs, err = dr.QueryDNSRecordToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *Disk) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "Disk",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(d.Size); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "size",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "DiskToTag",
	}
	node.Edges[0].IDs, err = d.QueryDiskToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "DiskToHost",
	}
	node.Edges[1].IDs, err = d.QueryDiskToHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Environment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Environment",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 17),
	}
	var buf []byte
	if buf, err = json.Marshal(e.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.CompetitionID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "competition_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Builder); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "builder",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.TeamCount); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "team_count",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Revision); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "revision",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.AdminCidrs); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "admin_cidrs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.ExposedVdiPorts); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "[]string",
		Name:  "exposed_vdi_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Config); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Tags); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "EnvironmentToTag",
	}
	node.Edges[0].IDs, err = e.QueryEnvironmentToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "EnvironmentToUser",
	}
	node.Edges[1].IDs, err = e.QueryEnvironmentToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Host",
		Name: "EnvironmentToHost",
	}
	node.Edges[2].IDs, err = e.QueryEnvironmentToHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Competition",
		Name: "EnvironmentToCompetition",
	}
	node.Edges[3].IDs, err = e.QueryEnvironmentToCompetition().
		Select(competition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Build",
		Name: "EnvironmentToBuild",
	}
	node.Edges[4].IDs, err = e.QueryEnvironmentToBuild().
		Select(build.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Identity",
		Name: "EnvironmentToIdentity",
	}
	node.Edges[5].IDs, err = e.QueryEnvironmentToIdentity().
		Select(identity.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Command",
		Name: "EnvironmentToCommand",
	}
	node.Edges[6].IDs, err = e.QueryEnvironmentToCommand().
		Select(command.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Script",
		Name: "EnvironmentToScript",
	}
	node.Edges[7].IDs, err = e.QueryEnvironmentToScript().
		Select(script.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "FileDownload",
		Name: "EnvironmentToFileDownload",
	}
	node.Edges[8].IDs, err = e.QueryEnvironmentToFileDownload().
		Select(filedownload.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "FileDelete",
		Name: "EnvironmentToFileDelete",
	}
	node.Edges[9].IDs, err = e.QueryEnvironmentToFileDelete().
		Select(filedelete.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "FileExtract",
		Name: "EnvironmentToFileExtract",
	}
	node.Edges[10].IDs, err = e.QueryEnvironmentToFileExtract().
		Select(fileextract.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "IncludedNetwork",
		Name: "EnvironmentToIncludedNetwork",
	}
	node.Edges[11].IDs, err = e.QueryEnvironmentToIncludedNetwork().
		Select(includednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[12] = &Edge{
		Type: "Finding",
		Name: "EnvironmentToFinding",
	}
	node.Edges[12].IDs, err = e.QueryEnvironmentToFinding().
		Select(finding.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[13] = &Edge{
		Type: "DNSRecord",
		Name: "EnvironmentToDNSRecord",
	}
	node.Edges[13].IDs, err = e.QueryEnvironmentToDNSRecord().
		Select(dnsrecord.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[14] = &Edge{
		Type: "Network",
		Name: "EnvironmentToNetwork",
	}
	node.Edges[14].IDs, err = e.QueryEnvironmentToNetwork().
		Select(network.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[15] = &Edge{
		Type: "HostDependency",
		Name: "EnvironmentToHostDependency",
	}
	node.Edges[15].IDs, err = e.QueryEnvironmentToHostDependency().
		Select(hostdependency.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[16] = &Edge{
		Type: "Team",
		Name: "EnvironmentToTeam",
	}
	node.Edges[16].IDs, err = e.QueryEnvironmentToTeam().
		Select(team.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fd *FileDelete) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fd.ID,
		Type:   "FileDelete",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(fd.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Path); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Tags); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "FileDeleteToTag",
	}
	node.Edges[0].IDs, err = fd.QueryFileDeleteToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "FileDeleteToEnvironment",
	}
	node.Edges[1].IDs, err = fd.QueryFileDeleteToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fd *FileDownload) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fd.ID,
		Type:   "FileDownload",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(fd.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.SourceType); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "source_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Source); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Destination); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "destination",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Template); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "template",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Perms); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "perms",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Disabled); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Md5); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "md5",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.AbsPath); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "abs_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Tags); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "FileDownloadToTag",
	}
	node.Edges[0].IDs, err = fd.QueryFileDownloadToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "FileDownloadToEnvironment",
	}
	node.Edges[1].IDs, err = fd.QueryFileDownloadToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fe *FileExtract) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fe.ID,
		Type:   "FileExtract",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(fe.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Source); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Destination); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "destination",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fe.Tags); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "FileExtractToTag",
	}
	node.Edges[0].IDs, err = fe.QueryFileExtractToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "FileExtractToEnvironment",
	}
	node.Edges[1].IDs, err = fe.QueryFileExtractToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (f *Finding) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Finding",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(f.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Description); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Severity); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "finding.Severity",
		Name:  "severity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Difficulty); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "finding.Difficulty",
		Name:  "difficulty",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Tags); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "FindingToUser",
	}
	node.Edges[0].IDs, err = f.QueryFindingToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Tag",
		Name: "FindingToTag",
	}
	node.Edges[1].IDs, err = f.QueryFindingToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Host",
		Name: "FindingToHost",
	}
	node.Edges[2].IDs, err = f.QueryFindingToHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Script",
		Name: "FindingToScript",
	}
	node.Edges[3].IDs, err = f.QueryFindingToScript().
		Select(script.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Environment",
		Name: "FindingToEnvironment",
	}
	node.Edges[4].IDs, err = f.QueryFindingToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (h *Host) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     h.ID,
		Type:   "Host",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 7),
	}
	var buf []byte
	if buf, err = json.Marshal(h.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Hostname); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "hostname",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.OS); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "OS",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.LastOctet); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "last_octet",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.InstanceSize); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "instance_size",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.AllowMACChanges); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "allow_mac_changes",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ExposedTCPPorts); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]string",
		Name:  "exposed_tcp_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ExposedUDPPorts); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "[]string",
		Name:  "exposed_udp_ports",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.OverridePassword); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "override_password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Vars); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.UserGroups); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "[]string",
		Name:  "user_groups",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.ProvisionSteps); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "[]string",
		Name:  "provision_steps",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Tags); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Disk",
		Name: "HostToDisk",
	}
	node.Edges[0].IDs, err = h.QueryHostToDisk().
		Select(disk.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "HostToUser",
	}
	node.Edges[1].IDs, err = h.QueryHostToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Tag",
		Name: "HostToTag",
	}
	node.Edges[2].IDs, err = h.QueryHostToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "HostToEnvironment",
	}
	node.Edges[3].IDs, err = h.QueryHostToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "IncludedNetwork",
		Name: "HostToIncludedNetwork",
	}
	node.Edges[4].IDs, err = h.QueryHostToIncludedNetwork().
		Select(includednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "HostDependency",
		Name: "DependOnHostToHostDependency",
	}
	node.Edges[5].IDs, err = h.QueryDependOnHostToHostDependency().
		Select(hostdependency.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "HostDependency",
		Name: "DependByHostToHostDependency",
	}
	node.Edges[6].IDs, err = h.QueryDependByHostToHostDependency().
		Select(hostdependency.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (hd *HostDependency) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     hd.ID,
		Type:   "HostDependency",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(hd.HostID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "host_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(hd.NetworkID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "network_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Host",
		Name: "HostDependencyToDependOnHost",
	}
	node.Edges[0].IDs, err = hd.QueryHostDependencyToDependOnHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "HostDependencyToDependByHost",
	}
	node.Edges[1].IDs, err = hd.QueryHostDependencyToDependByHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Network",
		Name: "HostDependencyToNetwork",
	}
	node.Edges[2].IDs, err = hd.QueryHostDependencyToNetwork().
		Select(network.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "HostDependencyToEnvironment",
	}
	node.Edges[3].IDs, err = hd.QueryHostDependencyToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (i *Identity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     i.ID,
		Type:   "Identity",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(i.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.FirstName); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "first_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.LastName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "last_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Email); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Password); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "password",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.AvatarFile); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "avatar_file",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Vars); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(i.Tags); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Environment",
		Name: "IdentityToEnvironment",
	}
	node.Edges[0].IDs, err = i.QueryIdentityToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (in *IncludedNetwork) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     in.ID,
		Type:   "IncludedNetwork",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(in.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(in.Hosts); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "[]string",
		Name:  "hosts",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "IncludedNetworkToTag",
	}
	node.Edges[0].IDs, err = in.QueryIncludedNetworkToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Host",
		Name: "IncludedNetworkToHost",
	}
	node.Edges[1].IDs, err = in.QueryIncludedNetworkToHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Network",
		Name: "IncludedNetworkToNetwork",
	}
	node.Edges[2].IDs, err = in.QueryIncludedNetworkToNetwork().
		Select(network.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "IncludedNetworkToEnvironment",
	}
	node.Edges[3].IDs, err = in.QueryIncludedNetworkToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (n *Network) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     n.ID,
		Type:   "Network",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(n.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Cidr); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "cidr",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.VdiVisible); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "vdi_visible",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Vars); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(n.Tags); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "NetworkToTag",
	}
	node.Edges[0].IDs, err = n.QueryNetworkToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "NetworkToEnvironment",
	}
	node.Edges[1].IDs, err = n.QueryNetworkToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "HostDependency",
		Name: "NetworkToHostDependency",
	}
	node.Edges[2].IDs, err = n.QueryNetworkToHostDependency().
		Select(hostdependency.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "IncludedNetwork",
		Name: "NetworkToIncludedNetwork",
	}
	node.Edges[3].IDs, err = n.QueryNetworkToIncludedNetwork().
		Select(includednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ph *ProvisionedHost) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ph.ID,
		Type:   "ProvisionedHost",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(ph.SubnetIP); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "subnet_ip",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "ProvisionedHostToTag",
	}
	node.Edges[0].IDs, err = ph.QueryProvisionedHostToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Status",
		Name: "ProvisionedHostToStatus",
	}
	node.Edges[1].IDs, err = ph.QueryProvisionedHostToStatus().
		Select(status.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "ProvisionedHostToProvisionedNetwork",
	}
	node.Edges[2].IDs, err = ph.QueryProvisionedHostToProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Host",
		Name: "ProvisionedHostToHost",
	}
	node.Edges[3].IDs, err = ph.QueryProvisionedHostToHost().
		Select(host.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ProvisioningStep",
		Name: "ProvisionedHostToProvisioningStep",
	}
	node.Edges[4].IDs, err = ph.QueryProvisionedHostToProvisioningStep().
		Select(provisioningstep.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "AgentStatus",
		Name: "ProvisionedHostToAgentStatus",
	}
	node.Edges[5].IDs, err = ph.QueryProvisionedHostToAgentStatus().
		Select(agentstatus.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pn *ProvisionedNetwork) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pn.ID,
		Type:   "ProvisionedNetwork",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(pn.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pn.Cidr); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "cidr",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "ProvisionedNetworkToTag",
	}
	node.Edges[0].IDs, err = pn.QueryProvisionedNetworkToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Status",
		Name: "ProvisionedNetworkToStatus",
	}
	node.Edges[1].IDs, err = pn.QueryProvisionedNetworkToStatus().
		Select(status.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Network",
		Name: "ProvisionedNetworkToNetwork",
	}
	node.Edges[2].IDs, err = pn.QueryProvisionedNetworkToNetwork().
		Select(network.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Build",
		Name: "ProvisionedNetworkToBuild",
	}
	node.Edges[3].IDs, err = pn.QueryProvisionedNetworkToBuild().
		Select(build.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Team",
		Name: "ProvisionedNetworkToTeam",
	}
	node.Edges[4].IDs, err = pn.QueryProvisionedNetworkToTeam().
		Select(team.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisionedNetworkToProvisionedHost",
	}
	node.Edges[5].IDs, err = pn.QueryProvisionedNetworkToProvisionedHost().
		Select(provisionedhost.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ps *ProvisioningStep) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ps.ID,
		Type:   "ProvisioningStep",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 9),
	}
	var buf []byte
	if buf, err = json.Marshal(ps.ProvisionerType); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "provisioner_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ps.StepNumber); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "int",
		Name:  "step_number",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "ProvisioningStepToTag",
	}
	node.Edges[0].IDs, err = ps.QueryProvisioningStepToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Status",
		Name: "ProvisioningStepToStatus",
	}
	node.Edges[1].IDs, err = ps.QueryProvisioningStepToStatus().
		Select(status.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProvisionedHost",
		Name: "ProvisioningStepToProvisionedHost",
	}
	node.Edges[2].IDs, err = ps.QueryProvisioningStepToProvisionedHost().
		Select(provisionedhost.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Script",
		Name: "ProvisioningStepToScript",
	}
	node.Edges[3].IDs, err = ps.QueryProvisioningStepToScript().
		Select(script.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Command",
		Name: "ProvisioningStepToCommand",
	}
	node.Edges[4].IDs, err = ps.QueryProvisioningStepToCommand().
		Select(command.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "DNSRecord",
		Name: "ProvisioningStepToDNSRecord",
	}
	node.Edges[5].IDs, err = ps.QueryProvisioningStepToDNSRecord().
		Select(dnsrecord.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "FileDelete",
		Name: "ProvisioningStepToFileDelete",
	}
	node.Edges[6].IDs, err = ps.QueryProvisioningStepToFileDelete().
		Select(filedelete.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "FileDownload",
		Name: "ProvisioningStepToFileDownload",
	}
	node.Edges[7].IDs, err = ps.QueryProvisioningStepToFileDownload().
		Select(filedownload.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "FileExtract",
		Name: "ProvisioningStepToFileExtract",
	}
	node.Edges[8].IDs, err = ps.QueryProvisioningStepToFileExtract().
		Select(fileextract.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Script) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Script",
		Fields: make([]*Field, 14),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(s.HclID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Language); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "language",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Source); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "source",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.SourceType); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "source_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Cooldown); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "cooldown",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Timeout); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "timeout",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.IgnoreErrors); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "ignore_errors",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Args); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "[]string",
		Name:  "args",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Disabled); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Vars); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "map[string]string",
		Name:  "vars",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.AbsPath); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "string",
		Name:  "abs_path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Tags); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "map[string]string",
		Name:  "tags",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "ScriptToTag",
	}
	node.Edges[0].IDs, err = s.QueryScriptToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "ScriptToUser",
	}
	node.Edges[1].IDs, err = s.QueryScriptToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Finding",
		Name: "ScriptToFinding",
	}
	node.Edges[2].IDs, err = s.QueryScriptToFinding().
		Select(finding.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Environment",
		Name: "ScriptToEnvironment",
	}
	node.Edges[3].IDs, err = s.QueryScriptToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Status) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Status",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(s.State); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "status.State",
		Name:  "state",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.StartedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "started_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.EndedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "ended_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Failed); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "failed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Completed); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "completed",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Error); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "error",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "StatusToTag",
	}
	node.Edges[0].IDs, err = s.QueryStatusToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Tag) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Tag",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(t.UUID); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "uuid.UUID",
		Name:  "uuid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Name); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Description); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "map[string]string",
		Name:  "description",
		Value: string(buf),
	}
	return node, nil
}

func (t *Team) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Team",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(t.TeamNumber); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "int",
		Name:  "team_number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Config); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "map[string]string",
		Name:  "config",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Revision); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int64",
		Name:  "revision",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "TeamToUser",
	}
	node.Edges[0].IDs, err = t.QueryTeamToUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Build",
		Name: "TeamToBuild",
	}
	node.Edges[1].IDs, err = t.QueryTeamToBuild().
		Select(build.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Environment",
		Name: "TeamToEnvironment",
	}
	node.Edges[2].IDs, err = t.QueryTeamToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Tag",
		Name: "TeamToTag",
	}
	node.Edges[3].IDs, err = t.QueryTeamToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ProvisionedNetwork",
		Name: "TeamToProvisionedNetwork",
	}
	node.Edges[4].IDs, err = t.QueryTeamToProvisionedNetwork().
		Select(provisionednetwork.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(u.Name); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UUID); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "uuid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.HclID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "hcl_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tag",
		Name: "UserToTag",
	}
	node.Edges[0].IDs, err = u.QueryUserToTag().
		Select(tag.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Environment",
		Name: "UserToEnvironment",
	}
	node.Edges[1].IDs, err = u.QueryUserToEnvironment().
		Select(environment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, int) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, int) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, int) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id int) (string, error) {
			return c.tables.nodeType(ctx, c.driver, id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id int) (Noder, error) {
	switch table {
	case agentstatus.Table:
		n, err := c.AgentStatus.Query().
			Where(agentstatus.ID(id)).
			CollectFields(ctx, "AgentStatus").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case build.Table:
		n, err := c.Build.Query().
			Where(build.ID(id)).
			CollectFields(ctx, "Build").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case command.Table:
		n, err := c.Command.Query().
			Where(command.ID(id)).
			CollectFields(ctx, "Command").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case competition.Table:
		n, err := c.Competition.Query().
			Where(competition.ID(id)).
			CollectFields(ctx, "Competition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dns.Table:
		n, err := c.DNS.Query().
			Where(dns.ID(id)).
			CollectFields(ctx, "DNS").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case dnsrecord.Table:
		n, err := c.DNSRecord.Query().
			Where(dnsrecord.ID(id)).
			CollectFields(ctx, "DNSRecord").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case disk.Table:
		n, err := c.Disk.Query().
			Where(disk.ID(id)).
			CollectFields(ctx, "Disk").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case environment.Table:
		n, err := c.Environment.Query().
			Where(environment.ID(id)).
			CollectFields(ctx, "Environment").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case filedelete.Table:
		n, err := c.FileDelete.Query().
			Where(filedelete.ID(id)).
			CollectFields(ctx, "FileDelete").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case filedownload.Table:
		n, err := c.FileDownload.Query().
			Where(filedownload.ID(id)).
			CollectFields(ctx, "FileDownload").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case fileextract.Table:
		n, err := c.FileExtract.Query().
			Where(fileextract.ID(id)).
			CollectFields(ctx, "FileExtract").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case finding.Table:
		n, err := c.Finding.Query().
			Where(finding.ID(id)).
			CollectFields(ctx, "Finding").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case host.Table:
		n, err := c.Host.Query().
			Where(host.ID(id)).
			CollectFields(ctx, "Host").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case hostdependency.Table:
		n, err := c.HostDependency.Query().
			Where(hostdependency.ID(id)).
			CollectFields(ctx, "HostDependency").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case identity.Table:
		n, err := c.Identity.Query().
			Where(identity.ID(id)).
			CollectFields(ctx, "Identity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case includednetwork.Table:
		n, err := c.IncludedNetwork.Query().
			Where(includednetwork.ID(id)).
			CollectFields(ctx, "IncludedNetwork").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case network.Table:
		n, err := c.Network.Query().
			Where(network.ID(id)).
			CollectFields(ctx, "Network").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisionedhost.Table:
		n, err := c.ProvisionedHost.Query().
			Where(provisionedhost.ID(id)).
			CollectFields(ctx, "ProvisionedHost").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisionednetwork.Table:
		n, err := c.ProvisionedNetwork.Query().
			Where(provisionednetwork.ID(id)).
			CollectFields(ctx, "ProvisionedNetwork").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case provisioningstep.Table:
		n, err := c.ProvisioningStep.Query().
			Where(provisioningstep.ID(id)).
			CollectFields(ctx, "ProvisioningStep").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case script.Table:
		n, err := c.Script.Query().
			Where(script.ID(id)).
			CollectFields(ctx, "Script").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case status.Table:
		n, err := c.Status.Query().
			Where(status.ID(id)).
			CollectFields(ctx, "Status").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case tag.Table:
		n, err := c.Tag.Query().
			Where(tag.ID(id)).
			CollectFields(ctx, "Tag").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case team.Table:
		n, err := c.Team.Query().
			Where(team.ID(id)).
			CollectFields(ctx, "Team").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []int, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]int)
	id2idx := make(map[int][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []int) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[int][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case agentstatus.Table:
		nodes, err := c.AgentStatus.Query().
			Where(agentstatus.IDIn(ids...)).
			CollectFields(ctx, "AgentStatus").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case build.Table:
		nodes, err := c.Build.Query().
			Where(build.IDIn(ids...)).
			CollectFields(ctx, "Build").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case command.Table:
		nodes, err := c.Command.Query().
			Where(command.IDIn(ids...)).
			CollectFields(ctx, "Command").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case competition.Table:
		nodes, err := c.Competition.Query().
			Where(competition.IDIn(ids...)).
			CollectFields(ctx, "Competition").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dns.Table:
		nodes, err := c.DNS.Query().
			Where(dns.IDIn(ids...)).
			CollectFields(ctx, "DNS").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case dnsrecord.Table:
		nodes, err := c.DNSRecord.Query().
			Where(dnsrecord.IDIn(ids...)).
			CollectFields(ctx, "DNSRecord").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case disk.Table:
		nodes, err := c.Disk.Query().
			Where(disk.IDIn(ids...)).
			CollectFields(ctx, "Disk").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case environment.Table:
		nodes, err := c.Environment.Query().
			Where(environment.IDIn(ids...)).
			CollectFields(ctx, "Environment").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case filedelete.Table:
		nodes, err := c.FileDelete.Query().
			Where(filedelete.IDIn(ids...)).
			CollectFields(ctx, "FileDelete").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case filedownload.Table:
		nodes, err := c.FileDownload.Query().
			Where(filedownload.IDIn(ids...)).
			CollectFields(ctx, "FileDownload").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case fileextract.Table:
		nodes, err := c.FileExtract.Query().
			Where(fileextract.IDIn(ids...)).
			CollectFields(ctx, "FileExtract").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case finding.Table:
		nodes, err := c.Finding.Query().
			Where(finding.IDIn(ids...)).
			CollectFields(ctx, "Finding").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case host.Table:
		nodes, err := c.Host.Query().
			Where(host.IDIn(ids...)).
			CollectFields(ctx, "Host").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case hostdependency.Table:
		nodes, err := c.HostDependency.Query().
			Where(hostdependency.IDIn(ids...)).
			CollectFields(ctx, "HostDependency").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case identity.Table:
		nodes, err := c.Identity.Query().
			Where(identity.IDIn(ids...)).
			CollectFields(ctx, "Identity").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case includednetwork.Table:
		nodes, err := c.IncludedNetwork.Query().
			Where(includednetwork.IDIn(ids...)).
			CollectFields(ctx, "IncludedNetwork").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case network.Table:
		nodes, err := c.Network.Query().
			Where(network.IDIn(ids...)).
			CollectFields(ctx, "Network").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisionedhost.Table:
		nodes, err := c.ProvisionedHost.Query().
			Where(provisionedhost.IDIn(ids...)).
			CollectFields(ctx, "ProvisionedHost").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisionednetwork.Table:
		nodes, err := c.ProvisionedNetwork.Query().
			Where(provisionednetwork.IDIn(ids...)).
			CollectFields(ctx, "ProvisionedNetwork").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case provisioningstep.Table:
		nodes, err := c.ProvisioningStep.Query().
			Where(provisioningstep.IDIn(ids...)).
			CollectFields(ctx, "ProvisioningStep").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case script.Table:
		nodes, err := c.Script.Query().
			Where(script.IDIn(ids...)).
			CollectFields(ctx, "Script").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case status.Table:
		nodes, err := c.Status.Query().
			Where(status.IDIn(ids...)).
			CollectFields(ctx, "Status").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case tag.Table:
		nodes, err := c.Tag.Query().
			Where(tag.IDIn(ids...)).
			CollectFields(ctx, "Tag").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case team.Table:
		nodes, err := c.Team.Query().
			Where(team.IDIn(ids...)).
			CollectFields(ctx, "Team").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		nodes, err := c.User.Query().
			Where(user.IDIn(ids...)).
			CollectFields(ctx, "User").
			All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
