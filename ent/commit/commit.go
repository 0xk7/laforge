// Code generated by entc, DO NOT EDIT.

package commit

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the commit type in the database.
	Label = "commit"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldCommitState holds the string denoting the commit_state field in the database.
	FieldCommitState = "commit_state"
	// EdgeCommitToBuild holds the string denoting the committobuild edge name in mutations.
	EdgeCommitToBuild = "CommitToBuild"
	// EdgeCommitToPlanDiffs holds the string denoting the committoplandiffs edge name in mutations.
	EdgeCommitToPlanDiffs = "CommitToPlanDiffs"
	// Table holds the table name of the commit in the database.
	Table = "commits"
	// CommitToBuildTable is the table the holds the CommitToBuild relation/edge.
	CommitToBuildTable = "commits"
	// CommitToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	CommitToBuildInverseTable = "builds"
	// CommitToBuildColumn is the table column denoting the CommitToBuild relation/edge.
	CommitToBuildColumn = "commit_commit_to_build"
	// CommitToPlanDiffsTable is the table the holds the CommitToPlanDiffs relation/edge.
	CommitToPlanDiffsTable = "plan_diffs"
	// CommitToPlanDiffsInverseTable is the table name for the PlanDiff entity.
	// It exists in this package in order to avoid circular dependency with the "plandiff" package.
	CommitToPlanDiffsInverseTable = "plan_diffs"
	// CommitToPlanDiffsColumn is the table column denoting the CommitToPlanDiffs relation/edge.
	CommitToPlanDiffsColumn = "plan_diff_plan_diff_to_commit"
)

// Columns holds all SQL columns for commit fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldRevision,
	FieldCommitState,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "commits"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"commit_commit_to_build",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeROOT    Type = "ROOT"
	TypeREBUILD Type = "REBUILD"
	TypeDELETE  Type = "DELETE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeROOT, TypeREBUILD, TypeDELETE:
		return nil
	default:
		return fmt.Errorf("commit: invalid enum value for type field: %q", _type)
	}
}

// CommitState defines the type for the "commit_state" enum field.
type CommitState string

// CommitState values.
const (
	CommitStatePLANNING   CommitState = "PLANNING"
	CommitStateINPROGRESS CommitState = "INPROGRESS"
	CommitStateAPPLIED    CommitState = "APPLIED"
)

func (cs CommitState) String() string {
	return string(cs)
}

// CommitStateValidator is a validator for the "commit_state" field enum values. It is called by the builders before save.
func CommitStateValidator(cs CommitState) error {
	switch cs {
	case CommitStatePLANNING, CommitStateINPROGRESS, CommitStateAPPLIED:
		return nil
	default:
		return fmt.Errorf("commit: invalid enum value for commit_state field: %q", cs)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (cs CommitState) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(cs.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (cs *CommitState) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*cs = CommitState(str)
	if err := CommitStateValidator(*cs); err != nil {
		return fmt.Errorf("%s is not a valid CommitState", str)
	}
	return nil
}
