// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/team"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TeamNumber holds the value of the "team_number" field.
	TeamNumber int `json:"team_number,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int64 `json:"revision,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges TeamEdges `json:"edges"`
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// TeamToUser holds the value of the TeamToUser edge.
	TeamToUser []*User
	// TeamToBuild holds the value of the TeamToBuild edge.
	TeamToBuild []*Build
	// TeamToEnvironment holds the value of the TeamToEnvironment edge.
	TeamToEnvironment []*Environment
	// TeamToTag holds the value of the TeamToTag edge.
	TeamToTag []*Tag
	// TeamToProvisionedNetwork holds the value of the TeamToProvisionedNetwork edge.
	TeamToProvisionedNetwork []*ProvisionedNetwork
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TeamToUserOrErr returns the TeamToUser value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToUserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.TeamToUser, nil
	}
	return nil, &NotLoadedError{edge: "TeamToUser"}
}

// TeamToBuildOrErr returns the TeamToBuild value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToBuildOrErr() ([]*Build, error) {
	if e.loadedTypes[1] {
		return e.TeamToBuild, nil
	}
	return nil, &NotLoadedError{edge: "TeamToBuild"}
}

// TeamToEnvironmentOrErr returns the TeamToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[2] {
		return e.TeamToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "TeamToEnvironment"}
}

// TeamToTagOrErr returns the TeamToTag value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[3] {
		return e.TeamToTag, nil
	}
	return nil, &NotLoadedError{edge: "TeamToTag"}
}

// TeamToProvisionedNetworkOrErr returns the TeamToProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) TeamToProvisionedNetworkOrErr() ([]*ProvisionedNetwork, error) {
	if e.loadedTypes[4] {
		return e.TeamToProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "TeamToProvisionedNetwork"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // team_number
		&[]byte{},        // config
		&sql.NullInt64{}, // revision
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(values ...interface{}) error {
	if m, n := len(values), len(team.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field team_number", values[0])
	} else if value.Valid {
		t.TeamNumber = int(value.Int64)
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field config", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &t.Config); err != nil {
			return fmt.Errorf("unmarshal field config: %v", err)
		}
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field revision", values[2])
	} else if value.Valid {
		t.Revision = value.Int64
	}
	return nil
}

// QueryTeamToUser queries the TeamToUser edge of the Team.
func (t *Team) QueryTeamToUser() *UserQuery {
	return (&TeamClient{config: t.config}).QueryTeamToUser(t)
}

// QueryTeamToBuild queries the TeamToBuild edge of the Team.
func (t *Team) QueryTeamToBuild() *BuildQuery {
	return (&TeamClient{config: t.config}).QueryTeamToBuild(t)
}

// QueryTeamToEnvironment queries the TeamToEnvironment edge of the Team.
func (t *Team) QueryTeamToEnvironment() *EnvironmentQuery {
	return (&TeamClient{config: t.config}).QueryTeamToEnvironment(t)
}

// QueryTeamToTag queries the TeamToTag edge of the Team.
func (t *Team) QueryTeamToTag() *TagQuery {
	return (&TeamClient{config: t.config}).QueryTeamToTag(t)
}

// QueryTeamToProvisionedNetwork queries the TeamToProvisionedNetwork edge of the Team.
func (t *Team) QueryTeamToProvisionedNetwork() *ProvisionedNetworkQuery {
	return (&TeamClient{config: t.config}).QueryTeamToProvisionedNetwork(t)
}

// Update returns a builder for updating this Team.
// Note that, you need to call Team.Unwrap() before calling this method, if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return (&TeamClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", team_number=")
	builder.WriteString(fmt.Sprintf("%v", t.TeamNumber))
	builder.WriteString(", config=")
	builder.WriteString(fmt.Sprintf("%v", t.Config))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", t.Revision))
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team

func (t Teams) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
