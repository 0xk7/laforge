// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/provisioningstep"
)

// ProvisioningStep is the model entity for the ProvisioningStep schema.
type ProvisioningStep struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProvisionerType holds the value of the "provisioner_type" field.
	ProvisionerType string `json:"provisioner_type,omitempty"`
	// StepNumber holds the value of the "step_number" field.
	StepNumber int `json:"step_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvisioningStepQuery when eager-loading is set.
	Edges                               ProvisioningStepEdges `json:"edges"`
	provisioned_host_provisioning_steps *int
}

// ProvisioningStepEdges holds the relations/edges for other nodes in the graph.
type ProvisioningStepEdges struct {
	// ProvisionedHost holds the value of the provisioned_host edge.
	ProvisionedHost []*ProvisionedHost
	// Status holds the value of the status edge.
	Status []*Status
	// Script holds the value of the script edge.
	Script []*Script
	// Command holds the value of the command edge.
	Command []*Command
	// DNSRecord holds the value of the dns_record edge.
	DNSRecord []*DNSRecord
	// FileDownload holds the value of the file_download edge.
	FileDownload []*FileDownload
	// FileDelete holds the value of the file_delete edge.
	FileDelete []*FileDelete
	// FileExtract holds the value of the file_extract edge.
	FileExtract []*FileExtract
	// Tag holds the value of the tag edge.
	Tag []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// ProvisionedHostOrErr returns the ProvisionedHost value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) ProvisionedHostOrErr() ([]*ProvisionedHost, error) {
	if e.loadedTypes[0] {
		return e.ProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "provisioned_host"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) StatusOrErr() ([]*Status, error) {
	if e.loadedTypes[1] {
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// ScriptOrErr returns the Script value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) ScriptOrErr() ([]*Script, error) {
	if e.loadedTypes[2] {
		return e.Script, nil
	}
	return nil, &NotLoadedError{edge: "script"}
}

// CommandOrErr returns the Command value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) CommandOrErr() ([]*Command, error) {
	if e.loadedTypes[3] {
		return e.Command, nil
	}
	return nil, &NotLoadedError{edge: "command"}
}

// DNSRecordOrErr returns the DNSRecord value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) DNSRecordOrErr() ([]*DNSRecord, error) {
	if e.loadedTypes[4] {
		return e.DNSRecord, nil
	}
	return nil, &NotLoadedError{edge: "dns_record"}
}

// FileDownloadOrErr returns the FileDownload value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) FileDownloadOrErr() ([]*FileDownload, error) {
	if e.loadedTypes[5] {
		return e.FileDownload, nil
	}
	return nil, &NotLoadedError{edge: "file_download"}
}

// FileDeleteOrErr returns the FileDelete value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) FileDeleteOrErr() ([]*FileDelete, error) {
	if e.loadedTypes[6] {
		return e.FileDelete, nil
	}
	return nil, &NotLoadedError{edge: "file_delete"}
}

// FileExtractOrErr returns the FileExtract value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) FileExtractOrErr() ([]*FileExtract, error) {
	if e.loadedTypes[7] {
		return e.FileExtract, nil
	}
	return nil, &NotLoadedError{edge: "file_extract"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e ProvisioningStepEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[8] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProvisioningStep) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // provisioner_type
		&sql.NullInt64{},  // step_number
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ProvisioningStep) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // provisioned_host_provisioning_steps
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProvisioningStep fields.
func (ps *ProvisioningStep) assignValues(values ...interface{}) error {
	if m, n := len(values), len(provisioningstep.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ps.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field provisioner_type", values[0])
	} else if value.Valid {
		ps.ProvisionerType = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field step_number", values[1])
	} else if value.Valid {
		ps.StepNumber = int(value.Int64)
	}
	values = values[2:]
	if len(values) == len(provisioningstep.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field provisioned_host_provisioning_steps", value)
		} else if value.Valid {
			ps.provisioned_host_provisioning_steps = new(int)
			*ps.provisioned_host_provisioning_steps = int(value.Int64)
		}
	}
	return nil
}

// QueryProvisionedHost queries the provisioned_host edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryProvisionedHost() *ProvisionedHostQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryProvisionedHost(ps)
}

// QueryStatus queries the status edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryStatus() *StatusQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryStatus(ps)
}

// QueryScript queries the script edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryScript() *ScriptQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryScript(ps)
}

// QueryCommand queries the command edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryCommand() *CommandQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryCommand(ps)
}

// QueryDNSRecord queries the dns_record edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryDNSRecord() *DNSRecordQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryDNSRecord(ps)
}

// QueryFileDownload queries the file_download edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryFileDownload() *FileDownloadQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryFileDownload(ps)
}

// QueryFileDelete queries the file_delete edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryFileDelete() *FileDeleteQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryFileDelete(ps)
}

// QueryFileExtract queries the file_extract edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryFileExtract() *FileExtractQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryFileExtract(ps)
}

// QueryTag queries the tag edge of the ProvisioningStep.
func (ps *ProvisioningStep) QueryTag() *TagQuery {
	return (&ProvisioningStepClient{config: ps.config}).QueryTag(ps)
}

// Update returns a builder for updating this ProvisioningStep.
// Note that, you need to call ProvisioningStep.Unwrap() before calling this method, if this ProvisioningStep
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *ProvisioningStep) Update() *ProvisioningStepUpdateOne {
	return (&ProvisioningStepClient{config: ps.config}).UpdateOne(ps)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ps *ProvisioningStep) Unwrap() *ProvisioningStep {
	tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProvisioningStep is not a transactional entity")
	}
	ps.config.driver = tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *ProvisioningStep) String() string {
	var builder strings.Builder
	builder.WriteString("ProvisioningStep(")
	builder.WriteString(fmt.Sprintf("id=%v", ps.ID))
	builder.WriteString(", provisioner_type=")
	builder.WriteString(ps.ProvisionerType)
	builder.WriteString(", step_number=")
	builder.WriteString(fmt.Sprintf("%v", ps.StepNumber))
	builder.WriteByte(')')
	return builder.String()
}

// ProvisioningSteps is a parsable slice of ProvisioningStep.
type ProvisioningSteps []*ProvisioningStep

func (ps ProvisioningSteps) config(cfg config) {
	for _i := range ps {
		ps[_i].config = cfg
	}
}
