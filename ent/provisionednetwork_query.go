// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
)

// ProvisionedNetworkQuery is the builder for querying ProvisionedNetwork entities.
type ProvisionedNetworkQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProvisionedNetwork
	// eager-loading edges.
	withProvisionedNetworkToTag             *TagQuery
	withProvisionedNetworkToStatus          *StatusQuery
	withProvisionedNetworkToNetwork         *NetworkQuery
	withProvisionedNetworkToBuild           *BuildQuery
	withProvisionedNetworkToTeam            *TeamQuery
	withProvisionedNetworkToProvisionedHost *ProvisionedHostQuery
	withProvisionedNetworkToPlan            *PlanQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProvisionedNetworkQuery builder.
func (pnq *ProvisionedNetworkQuery) Where(ps ...predicate.ProvisionedNetwork) *ProvisionedNetworkQuery {
	pnq.predicates = append(pnq.predicates, ps...)
	return pnq
}

// Limit adds a limit step to the query.
func (pnq *ProvisionedNetworkQuery) Limit(limit int) *ProvisionedNetworkQuery {
	pnq.limit = &limit
	return pnq
}

// Offset adds an offset step to the query.
func (pnq *ProvisionedNetworkQuery) Offset(offset int) *ProvisionedNetworkQuery {
	pnq.offset = &offset
	return pnq
}

// Order adds an order step to the query.
func (pnq *ProvisionedNetworkQuery) Order(o ...OrderFunc) *ProvisionedNetworkQuery {
	pnq.order = append(pnq.order, o...)
	return pnq
}

// QueryProvisionedNetworkToTag chains the current query on the "ProvisionedNetworkToTag" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToTag() *TagQuery {
	query := &TagQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToTagTable, provisionednetwork.ProvisionedNetworkToTagColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToStatus chains the current query on the "ProvisionedNetworkToStatus" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToStatus() *StatusQuery {
	query := &StatusQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToStatusTable, provisionednetwork.ProvisionedNetworkToStatusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToNetwork chains the current query on the "ProvisionedNetworkToNetwork" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToNetwork() *NetworkQuery {
	query := &NetworkQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToNetworkTable, provisionednetwork.ProvisionedNetworkToNetworkColumn),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToBuild chains the current query on the "ProvisionedNetworkToBuild" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToBuild() *BuildQuery {
	query := &BuildQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToBuildTable, provisionednetwork.ProvisionedNetworkToBuildPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToTeam chains the current query on the "ProvisionedNetworkToTeam" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToTeam() *TeamQuery {
	query := &TeamQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisionednetwork.ProvisionedNetworkToTeamTable, provisionednetwork.ProvisionedNetworkToTeamPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToProvisionedHost chains the current query on the "ProvisionedNetworkToProvisionedHost" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToProvisionedHost() *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToProvisionedHostTable, provisionednetwork.ProvisionedNetworkToProvisionedHostPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvisionedNetworkToPlan chains the current query on the "ProvisionedNetworkToPlan" edge.
func (pnq *ProvisionedNetworkQuery) QueryProvisionedNetworkToPlan() *PlanQuery {
	query := &PlanQuery{config: pnq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToPlanTable, provisionednetwork.ProvisionedNetworkToPlanPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProvisionedNetwork entity from the query.
// Returns a *NotFoundError when no ProvisionedNetwork was found.
func (pnq *ProvisionedNetworkQuery) First(ctx context.Context) (*ProvisionedNetwork, error) {
	nodes, err := pnq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{provisionednetwork.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) FirstX(ctx context.Context) *ProvisionedNetwork {
	node, err := pnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProvisionedNetwork ID from the query.
// Returns a *NotFoundError when no ProvisionedNetwork ID was found.
func (pnq *ProvisionedNetworkQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pnq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{provisionednetwork.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) FirstIDX(ctx context.Context) int {
	id, err := pnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProvisionedNetwork entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProvisionedNetwork entity is not found.
// Returns a *NotFoundError when no ProvisionedNetwork entities are found.
func (pnq *ProvisionedNetworkQuery) Only(ctx context.Context) (*ProvisionedNetwork, error) {
	nodes, err := pnq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{provisionednetwork.Label}
	default:
		return nil, &NotSingularError{provisionednetwork.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) OnlyX(ctx context.Context) *ProvisionedNetwork {
	node, err := pnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProvisionedNetwork ID in the query.
// Returns a *NotSingularError when exactly one ProvisionedNetwork ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pnq *ProvisionedNetworkQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pnq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = &NotSingularError{provisionednetwork.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) OnlyIDX(ctx context.Context) int {
	id, err := pnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProvisionedNetworks.
func (pnq *ProvisionedNetworkQuery) All(ctx context.Context) ([]*ProvisionedNetwork, error) {
	if err := pnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pnq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) AllX(ctx context.Context) []*ProvisionedNetwork {
	nodes, err := pnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProvisionedNetwork IDs.
func (pnq *ProvisionedNetworkQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pnq.Select(provisionednetwork.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) IDsX(ctx context.Context) []int {
	ids, err := pnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pnq *ProvisionedNetworkQuery) Count(ctx context.Context) (int, error) {
	if err := pnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pnq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) CountX(ctx context.Context) int {
	count, err := pnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pnq *ProvisionedNetworkQuery) Exist(ctx context.Context) (bool, error) {
	if err := pnq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pnq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pnq *ProvisionedNetworkQuery) ExistX(ctx context.Context) bool {
	exist, err := pnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProvisionedNetworkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pnq *ProvisionedNetworkQuery) Clone() *ProvisionedNetworkQuery {
	if pnq == nil {
		return nil
	}
	return &ProvisionedNetworkQuery{
		config:                                  pnq.config,
		limit:                                   pnq.limit,
		offset:                                  pnq.offset,
		order:                                   append([]OrderFunc{}, pnq.order...),
		predicates:                              append([]predicate.ProvisionedNetwork{}, pnq.predicates...),
		withProvisionedNetworkToTag:             pnq.withProvisionedNetworkToTag.Clone(),
		withProvisionedNetworkToStatus:          pnq.withProvisionedNetworkToStatus.Clone(),
		withProvisionedNetworkToNetwork:         pnq.withProvisionedNetworkToNetwork.Clone(),
		withProvisionedNetworkToBuild:           pnq.withProvisionedNetworkToBuild.Clone(),
		withProvisionedNetworkToTeam:            pnq.withProvisionedNetworkToTeam.Clone(),
		withProvisionedNetworkToProvisionedHost: pnq.withProvisionedNetworkToProvisionedHost.Clone(),
		withProvisionedNetworkToPlan:            pnq.withProvisionedNetworkToPlan.Clone(),
		// clone intermediate query.
		sql:  pnq.sql.Clone(),
		path: pnq.path,
	}
}

// WithProvisionedNetworkToTag tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToTag" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToTag(opts ...func(*TagQuery)) *ProvisionedNetworkQuery {
	query := &TagQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToTag = query
	return pnq
}

// WithProvisionedNetworkToStatus tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToStatus" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToStatus(opts ...func(*StatusQuery)) *ProvisionedNetworkQuery {
	query := &StatusQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToStatus = query
	return pnq
}

// WithProvisionedNetworkToNetwork tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToNetwork" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToNetwork(opts ...func(*NetworkQuery)) *ProvisionedNetworkQuery {
	query := &NetworkQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToNetwork = query
	return pnq
}

// WithProvisionedNetworkToBuild tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToBuild" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToBuild(opts ...func(*BuildQuery)) *ProvisionedNetworkQuery {
	query := &BuildQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToBuild = query
	return pnq
}

// WithProvisionedNetworkToTeam tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToTeam" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToTeam(opts ...func(*TeamQuery)) *ProvisionedNetworkQuery {
	query := &TeamQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToTeam = query
	return pnq
}

// WithProvisionedNetworkToProvisionedHost tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToProvisionedHost" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToProvisionedHost(opts ...func(*ProvisionedHostQuery)) *ProvisionedNetworkQuery {
	query := &ProvisionedHostQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToProvisionedHost = query
	return pnq
}

// WithProvisionedNetworkToPlan tells the query-builder to eager-load the nodes that are connected to
// the "ProvisionedNetworkToPlan" edge. The optional arguments are used to configure the query builder of the edge.
func (pnq *ProvisionedNetworkQuery) WithProvisionedNetworkToPlan(opts ...func(*PlanQuery)) *ProvisionedNetworkQuery {
	query := &PlanQuery{config: pnq.config}
	for _, opt := range opts {
		opt(query)
	}
	pnq.withProvisionedNetworkToPlan = query
	return pnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProvisionedNetwork.Query().
//		GroupBy(provisionednetwork.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pnq *ProvisionedNetworkQuery) GroupBy(field string, fields ...string) *ProvisionedNetworkGroupBy {
	group := &ProvisionedNetworkGroupBy{config: pnq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pnq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ProvisionedNetwork.Query().
//		Select(provisionednetwork.FieldName).
//		Scan(ctx, &v)
//
func (pnq *ProvisionedNetworkQuery) Select(field string, fields ...string) *ProvisionedNetworkSelect {
	pnq.fields = append([]string{field}, fields...)
	return &ProvisionedNetworkSelect{ProvisionedNetworkQuery: pnq}
}

func (pnq *ProvisionedNetworkQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pnq.fields {
		if !provisionednetwork.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pnq.path != nil {
		prev, err := pnq.path(ctx)
		if err != nil {
			return err
		}
		pnq.sql = prev
	}
	return nil
}

func (pnq *ProvisionedNetworkQuery) sqlAll(ctx context.Context) ([]*ProvisionedNetwork, error) {
	var (
		nodes       = []*ProvisionedNetwork{}
		_spec       = pnq.querySpec()
		loadedTypes = [7]bool{
			pnq.withProvisionedNetworkToTag != nil,
			pnq.withProvisionedNetworkToStatus != nil,
			pnq.withProvisionedNetworkToNetwork != nil,
			pnq.withProvisionedNetworkToBuild != nil,
			pnq.withProvisionedNetworkToTeam != nil,
			pnq.withProvisionedNetworkToProvisionedHost != nil,
			pnq.withProvisionedNetworkToPlan != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProvisionedNetwork{config: pnq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pnq.withProvisionedNetworkToTag; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisionedNetwork)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedNetworkToTag = []*Tag{}
		}
		query.withFKs = true
		query.Where(predicate.Tag(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToTagColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioned_network_provisioned_network_to_tag
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioned_network_provisioned_network_to_tag" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_network_provisioned_network_to_tag" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedNetworkToTag = append(node.Edges.ProvisionedNetworkToTag, n)
		}
	}

	if query := pnq.withProvisionedNetworkToStatus; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisionedNetwork)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedNetworkToStatus = []*Status{}
		}
		query.withFKs = true
		query.Where(predicate.Status(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToStatusColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioned_network_provisioned_network_to_status
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioned_network_provisioned_network_to_status" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_network_provisioned_network_to_status" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedNetworkToStatus = append(node.Edges.ProvisionedNetworkToStatus, n)
		}
	}

	if query := pnq.withProvisionedNetworkToNetwork; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProvisionedNetwork)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProvisionedNetworkToNetwork = []*Network{}
		}
		query.withFKs = true
		query.Where(predicate.Network(func(s *sql.Selector) {
			s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToNetworkColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.provisioned_network_provisioned_network_to_network
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "provisioned_network_provisioned_network_to_network" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "provisioned_network_provisioned_network_to_network" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProvisionedNetworkToNetwork = append(node.Edges.ProvisionedNetworkToNetwork, n)
		}
	}

	if query := pnq.withProvisionedNetworkToBuild; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProvisionedNetwork, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ProvisionedNetworkToBuild = []*Build{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProvisionedNetwork)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   provisionednetwork.ProvisionedNetworkToBuildTable,
				Columns: provisionednetwork.ProvisionedNetworkToBuildPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToBuildPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pnq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "ProvisionedNetworkToBuild": %v`, err)
		}
		query.Where(build.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "ProvisionedNetworkToBuild" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedNetworkToBuild = append(nodes[i].Edges.ProvisionedNetworkToBuild, n)
			}
		}
	}

	if query := pnq.withProvisionedNetworkToTeam; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProvisionedNetwork, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ProvisionedNetworkToTeam = []*Team{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProvisionedNetwork)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: false,
				Table:   provisionednetwork.ProvisionedNetworkToTeamTable,
				Columns: provisionednetwork.ProvisionedNetworkToTeamPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToTeamPrimaryKey[0], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pnq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "ProvisionedNetworkToTeam": %v`, err)
		}
		query.Where(team.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "ProvisionedNetworkToTeam" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedNetworkToTeam = append(nodes[i].Edges.ProvisionedNetworkToTeam, n)
			}
		}
	}

	if query := pnq.withProvisionedNetworkToProvisionedHost; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProvisionedNetwork, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ProvisionedNetworkToProvisionedHost = []*ProvisionedHost{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProvisionedNetwork)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   provisionednetwork.ProvisionedNetworkToProvisionedHostTable,
				Columns: provisionednetwork.ProvisionedNetworkToProvisionedHostPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToProvisionedHostPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pnq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "ProvisionedNetworkToProvisionedHost": %v`, err)
		}
		query.Where(provisionedhost.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "ProvisionedNetworkToProvisionedHost" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedNetworkToProvisionedHost = append(nodes[i].Edges.ProvisionedNetworkToProvisionedHost, n)
			}
		}
	}

	if query := pnq.withProvisionedNetworkToPlan; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*ProvisionedNetwork, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.ProvisionedNetworkToPlan = []*Plan{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*ProvisionedNetwork)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   provisionednetwork.ProvisionedNetworkToPlanTable,
				Columns: provisionednetwork.ProvisionedNetworkToPlanPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(provisionednetwork.ProvisionedNetworkToPlanPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, pnq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "ProvisionedNetworkToPlan": %v`, err)
		}
		query.Where(plan.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "ProvisionedNetworkToPlan" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProvisionedNetworkToPlan = append(nodes[i].Edges.ProvisionedNetworkToPlan, n)
			}
		}
	}

	return nodes, nil
}

func (pnq *ProvisionedNetworkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pnq.querySpec()
	return sqlgraph.CountNodes(ctx, pnq.driver, _spec)
}

func (pnq *ProvisionedNetworkQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pnq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (pnq *ProvisionedNetworkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisionednetwork.Table,
			Columns: provisionednetwork.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisionednetwork.FieldID,
			},
		},
		From:   pnq.sql,
		Unique: true,
	}
	if fields := pnq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, provisionednetwork.FieldID)
		for i := range fields {
			if fields[i] != provisionednetwork.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pnq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pnq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, provisionednetwork.ValidColumn)
			}
		}
	}
	return _spec
}

func (pnq *ProvisionedNetworkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pnq.driver.Dialect())
	t1 := builder.Table(provisionednetwork.Table)
	selector := builder.Select(t1.Columns(provisionednetwork.Columns...)...).From(t1)
	if pnq.sql != nil {
		selector = pnq.sql
		selector.Select(selector.Columns(provisionednetwork.Columns...)...)
	}
	for _, p := range pnq.predicates {
		p(selector)
	}
	for _, p := range pnq.order {
		p(selector, provisionednetwork.ValidColumn)
	}
	if offset := pnq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pnq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProvisionedNetworkGroupBy is the group-by builder for ProvisionedNetwork entities.
type ProvisionedNetworkGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pngb *ProvisionedNetworkGroupBy) Aggregate(fns ...AggregateFunc) *ProvisionedNetworkGroupBy {
	pngb.fns = append(pngb.fns, fns...)
	return pngb
}

// Scan applies the group-by query and scans the result into the given value.
func (pngb *ProvisionedNetworkGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pngb.path(ctx)
	if err != nil {
		return err
	}
	pngb.sql = query
	return pngb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pngb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pngb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) StringsX(ctx context.Context) []string {
	v, err := pngb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pngb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) StringX(ctx context.Context) string {
	v, err := pngb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pngb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) IntsX(ctx context.Context) []int {
	v, err := pngb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pngb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) IntX(ctx context.Context) int {
	v, err := pngb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pngb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pngb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pngb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pngb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pngb.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pngb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pngb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pngb *ProvisionedNetworkGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pngb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pngb *ProvisionedNetworkGroupBy) BoolX(ctx context.Context) bool {
	v, err := pngb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pngb *ProvisionedNetworkGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pngb.fields {
		if !provisionednetwork.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pngb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pngb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pngb *ProvisionedNetworkGroupBy) sqlQuery() *sql.Selector {
	selector := pngb.sql
	columns := make([]string, 0, len(pngb.fields)+len(pngb.fns))
	columns = append(columns, pngb.fields...)
	for _, fn := range pngb.fns {
		columns = append(columns, fn(selector, provisionednetwork.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(pngb.fields...)
}

// ProvisionedNetworkSelect is the builder for selecting fields of ProvisionedNetwork entities.
type ProvisionedNetworkSelect struct {
	*ProvisionedNetworkQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pns *ProvisionedNetworkSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pns.prepareQuery(ctx); err != nil {
		return err
	}
	pns.sql = pns.ProvisionedNetworkQuery.sqlQuery(ctx)
	return pns.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pns.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pns.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) StringsX(ctx context.Context) []string {
	v, err := pns.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pns.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) StringX(ctx context.Context) string {
	v, err := pns.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pns.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) IntsX(ctx context.Context) []int {
	v, err := pns.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pns.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) IntX(ctx context.Context) int {
	v, err := pns.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pns.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pns.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pns.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) Float64X(ctx context.Context) float64 {
	v, err := pns.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pns.fields) > 1 {
		return nil, errors.New("ent: ProvisionedNetworkSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pns.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) BoolsX(ctx context.Context) []bool {
	v, err := pns.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pns *ProvisionedNetworkSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pns.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{provisionednetwork.Label}
	default:
		err = fmt.Errorf("ent: ProvisionedNetworkSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pns *ProvisionedNetworkSelect) BoolX(ctx context.Context) bool {
	v, err := pns.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pns *ProvisionedNetworkSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pns.sqlQuery().Query()
	if err := pns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pns *ProvisionedNetworkSelect) sqlQuery() sql.Querier {
	selector := pns.sql
	selector.Select(selector.Columns(pns.fields...)...)
	return selector
}
