// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/commit"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/google/uuid"
)

// CommitUpdate is the builder for updating Commit entities.
type CommitUpdate struct {
	config
	hooks    []Hook
	mutation *CommitMutation
}

// Where adds a new predicate for the CommitUpdate builder.
func (cu *CommitUpdate) Where(ps ...predicate.Commit) *CommitUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetType sets the "type" field.
func (cu *CommitUpdate) SetType(c commit.Type) *CommitUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetRevision sets the "revision" field.
func (cu *CommitUpdate) SetRevision(i int) *CommitUpdate {
	cu.mutation.ResetRevision()
	cu.mutation.SetRevision(i)
	return cu
}

// AddRevision adds i to the "revision" field.
func (cu *CommitUpdate) AddRevision(i int) *CommitUpdate {
	cu.mutation.AddRevision(i)
	return cu
}

// SetCommitState sets the "commit_state" field.
func (cu *CommitUpdate) SetCommitState(cs commit.CommitState) *CommitUpdate {
	cu.mutation.SetCommitState(cs)
	return cu
}

// SetCommitToBuildID sets the "CommitToBuild" edge to the Build entity by ID.
func (cu *CommitUpdate) SetCommitToBuildID(id uuid.UUID) *CommitUpdate {
	cu.mutation.SetCommitToBuildID(id)
	return cu
}

// SetCommitToBuild sets the "CommitToBuild" edge to the Build entity.
func (cu *CommitUpdate) SetCommitToBuild(b *Build) *CommitUpdate {
	return cu.SetCommitToBuildID(b.ID)
}

// AddCommitToPlanDiffIDs adds the "CommitToPlanDiffs" edge to the PlanDiff entity by IDs.
func (cu *CommitUpdate) AddCommitToPlanDiffIDs(ids ...uuid.UUID) *CommitUpdate {
	cu.mutation.AddCommitToPlanDiffIDs(ids...)
	return cu
}

// AddCommitToPlanDiffs adds the "CommitToPlanDiffs" edges to the PlanDiff entity.
func (cu *CommitUpdate) AddCommitToPlanDiffs(p ...*PlanDiff) *CommitUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddCommitToPlanDiffIDs(ids...)
}

// Mutation returns the CommitMutation object of the builder.
func (cu *CommitUpdate) Mutation() *CommitMutation {
	return cu.mutation
}

// ClearCommitToBuild clears the "CommitToBuild" edge to the Build entity.
func (cu *CommitUpdate) ClearCommitToBuild() *CommitUpdate {
	cu.mutation.ClearCommitToBuild()
	return cu
}

// ClearCommitToPlanDiffs clears all "CommitToPlanDiffs" edges to the PlanDiff entity.
func (cu *CommitUpdate) ClearCommitToPlanDiffs() *CommitUpdate {
	cu.mutation.ClearCommitToPlanDiffs()
	return cu
}

// RemoveCommitToPlanDiffIDs removes the "CommitToPlanDiffs" edge to PlanDiff entities by IDs.
func (cu *CommitUpdate) RemoveCommitToPlanDiffIDs(ids ...uuid.UUID) *CommitUpdate {
	cu.mutation.RemoveCommitToPlanDiffIDs(ids...)
	return cu
}

// RemoveCommitToPlanDiffs removes "CommitToPlanDiffs" edges to PlanDiff entities.
func (cu *CommitUpdate) RemoveCommitToPlanDiffs(p ...*PlanDiff) *CommitUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveCommitToPlanDiffIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommitUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommitUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommitUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommitUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := commit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := cu.mutation.CommitState(); ok {
		if err := commit.CommitStateValidator(v); err != nil {
			return &ValidationError{Name: "commit_state", err: fmt.Errorf("ent: validator failed for field \"commit_state\": %w", err)}
		}
	}
	if _, ok := cu.mutation.CommitToBuildID(); cu.mutation.CommitToBuildCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"CommitToBuild\"")
	}
	return nil
}

func (cu *CommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commit.Table,
			Columns: commit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commit.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldType,
		})
	}
	if value, ok := cu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: commit.FieldRevision,
		})
	}
	if value, ok := cu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: commit.FieldRevision,
		})
	}
	if value, ok := cu.mutation.CommitState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldCommitState,
		})
	}
	if cu.mutation.CommitToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commit.CommitToBuildTable,
			Columns: []string{commit.CommitToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommitToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commit.CommitToBuildTable,
			Columns: []string{commit.CommitToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CommitToPlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCommitToPlanDiffsIDs(); len(nodes) > 0 && !cu.mutation.CommitToPlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CommitToPlanDiffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CommitUpdateOne is the builder for updating a single Commit entity.
type CommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommitMutation
}

// SetType sets the "type" field.
func (cuo *CommitUpdateOne) SetType(c commit.Type) *CommitUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetRevision sets the "revision" field.
func (cuo *CommitUpdateOne) SetRevision(i int) *CommitUpdateOne {
	cuo.mutation.ResetRevision()
	cuo.mutation.SetRevision(i)
	return cuo
}

// AddRevision adds i to the "revision" field.
func (cuo *CommitUpdateOne) AddRevision(i int) *CommitUpdateOne {
	cuo.mutation.AddRevision(i)
	return cuo
}

// SetCommitState sets the "commit_state" field.
func (cuo *CommitUpdateOne) SetCommitState(cs commit.CommitState) *CommitUpdateOne {
	cuo.mutation.SetCommitState(cs)
	return cuo
}

// SetCommitToBuildID sets the "CommitToBuild" edge to the Build entity by ID.
func (cuo *CommitUpdateOne) SetCommitToBuildID(id uuid.UUID) *CommitUpdateOne {
	cuo.mutation.SetCommitToBuildID(id)
	return cuo
}

// SetCommitToBuild sets the "CommitToBuild" edge to the Build entity.
func (cuo *CommitUpdateOne) SetCommitToBuild(b *Build) *CommitUpdateOne {
	return cuo.SetCommitToBuildID(b.ID)
}

// AddCommitToPlanDiffIDs adds the "CommitToPlanDiffs" edge to the PlanDiff entity by IDs.
func (cuo *CommitUpdateOne) AddCommitToPlanDiffIDs(ids ...uuid.UUID) *CommitUpdateOne {
	cuo.mutation.AddCommitToPlanDiffIDs(ids...)
	return cuo
}

// AddCommitToPlanDiffs adds the "CommitToPlanDiffs" edges to the PlanDiff entity.
func (cuo *CommitUpdateOne) AddCommitToPlanDiffs(p ...*PlanDiff) *CommitUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddCommitToPlanDiffIDs(ids...)
}

// Mutation returns the CommitMutation object of the builder.
func (cuo *CommitUpdateOne) Mutation() *CommitMutation {
	return cuo.mutation
}

// ClearCommitToBuild clears the "CommitToBuild" edge to the Build entity.
func (cuo *CommitUpdateOne) ClearCommitToBuild() *CommitUpdateOne {
	cuo.mutation.ClearCommitToBuild()
	return cuo
}

// ClearCommitToPlanDiffs clears all "CommitToPlanDiffs" edges to the PlanDiff entity.
func (cuo *CommitUpdateOne) ClearCommitToPlanDiffs() *CommitUpdateOne {
	cuo.mutation.ClearCommitToPlanDiffs()
	return cuo
}

// RemoveCommitToPlanDiffIDs removes the "CommitToPlanDiffs" edge to PlanDiff entities by IDs.
func (cuo *CommitUpdateOne) RemoveCommitToPlanDiffIDs(ids ...uuid.UUID) *CommitUpdateOne {
	cuo.mutation.RemoveCommitToPlanDiffIDs(ids...)
	return cuo
}

// RemoveCommitToPlanDiffs removes "CommitToPlanDiffs" edges to PlanDiff entities.
func (cuo *CommitUpdateOne) RemoveCommitToPlanDiffs(p ...*PlanDiff) *CommitUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveCommitToPlanDiffIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommitUpdateOne) Select(field string, fields ...string) *CommitUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commit entity.
func (cuo *CommitUpdateOne) Save(ctx context.Context) (*Commit, error) {
	var (
		err  error
		node *Commit
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommitUpdateOne) SaveX(ctx context.Context) *Commit {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommitUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommitUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommitUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := commit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.CommitState(); ok {
		if err := commit.CommitStateValidator(v); err != nil {
			return &ValidationError{Name: "commit_state", err: fmt.Errorf("ent: validator failed for field \"commit_state\": %w", err)}
		}
	}
	if _, ok := cuo.mutation.CommitToBuildID(); cuo.mutation.CommitToBuildCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"CommitToBuild\"")
	}
	return nil
}

func (cuo *CommitUpdateOne) sqlSave(ctx context.Context) (_node *Commit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commit.Table,
			Columns: commit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commit.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Commit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commit.FieldID)
		for _, f := range fields {
			if !commit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldType,
		})
	}
	if value, ok := cuo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: commit.FieldRevision,
		})
	}
	if value, ok := cuo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: commit.FieldRevision,
		})
	}
	if value, ok := cuo.mutation.CommitState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldCommitState,
		})
	}
	if cuo.mutation.CommitToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commit.CommitToBuildTable,
			Columns: []string{commit.CommitToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommitToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commit.CommitToBuildTable,
			Columns: []string{commit.CommitToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CommitToPlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCommitToPlanDiffsIDs(); len(nodes) > 0 && !cuo.mutation.CommitToPlanDiffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CommitToPlanDiffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Commit{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
