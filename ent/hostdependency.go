// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/hostdependency"
)

// HostDependency is the model entity for the HostDependency schema.
type HostDependency struct {
	config ` json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// HostID holds the value of the "host_id" field.
	HostID string `json:"host_id,omitempty" hcl:"host,attr"`
	// NetworkID holds the value of the "network_id" field.
	NetworkID string `json:"network_id,omitempty" hcl:"network,attr"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostDependencyQuery when eager-loading is set.
	Edges HostDependencyEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// HostDependencyToHost holds the value of the HostDependencyToHost edge.
	HCLHostDependencyToHost []*Host `json:"HostDependencyToHost,omitempty"`
	// HostDependencyToNetwork holds the value of the HostDependencyToNetwork edge.
	HCLHostDependencyToNetwork []*Network `json:"HostDependencyToNetwork,omitempty"`
	//

}

// HostDependencyEdges holds the relations/edges for other nodes in the graph.
type HostDependencyEdges struct {
	// HostDependencyToHost holds the value of the HostDependencyToHost edge.
	HostDependencyToHost []*Host `json:"HostDependencyToHost,omitempty"`
	// HostDependencyToNetwork holds the value of the HostDependencyToNetwork edge.
	HostDependencyToNetwork []*Network `json:"HostDependencyToNetwork,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// HostDependencyToHostOrErr returns the HostDependencyToHost value or an error if the edge
// was not loaded in eager-loading.
func (e HostDependencyEdges) HostDependencyToHostOrErr() ([]*Host, error) {
	if e.loadedTypes[0] {
		return e.HostDependencyToHost, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToHost"}
}

// HostDependencyToNetworkOrErr returns the HostDependencyToNetwork value or an error if the edge
// was not loaded in eager-loading.
func (e HostDependencyEdges) HostDependencyToNetworkOrErr() ([]*Network, error) {
	if e.loadedTypes[1] {
		return e.HostDependencyToNetwork, nil
	}
	return nil, &NotLoadedError{edge: "HostDependencyToNetwork"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostDependency) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostdependency.FieldID:
			values[i] = &sql.NullInt64{}
		case hostdependency.FieldHostID, hostdependency.FieldNetworkID:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type HostDependency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostDependency fields.
func (hd *HostDependency) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostdependency.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hd.ID = int(value.Int64)
		case hostdependency.FieldHostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_id", values[i])
			} else if value.Valid {
				hd.HostID = value.String
			}
		case hostdependency.FieldNetworkID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_id", values[i])
			} else if value.Valid {
				hd.NetworkID = value.String
			}
		}
	}
	return nil
}

// QueryHostDependencyToHost queries the "HostDependencyToHost" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToHost() *HostQuery {
	return (&HostDependencyClient{config: hd.config}).QueryHostDependencyToHost(hd)
}

// QueryHostDependencyToNetwork queries the "HostDependencyToNetwork" edge of the HostDependency entity.
func (hd *HostDependency) QueryHostDependencyToNetwork() *NetworkQuery {
	return (&HostDependencyClient{config: hd.config}).QueryHostDependencyToNetwork(hd)
}

// Update returns a builder for updating this HostDependency.
// Note that you need to call HostDependency.Unwrap() before calling this method if this HostDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (hd *HostDependency) Update() *HostDependencyUpdateOne {
	return (&HostDependencyClient{config: hd.config}).UpdateOne(hd)
}

// Unwrap unwraps the HostDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hd *HostDependency) Unwrap() *HostDependency {
	tx, ok := hd.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostDependency is not a transactional entity")
	}
	hd.config.driver = tx.drv
	return hd
}

// String implements the fmt.Stringer.
func (hd *HostDependency) String() string {
	var builder strings.Builder
	builder.WriteString("HostDependency(")
	builder.WriteString(fmt.Sprintf("id=%v", hd.ID))
	builder.WriteString(", host_id=")
	builder.WriteString(hd.HostID)
	builder.WriteString(", network_id=")
	builder.WriteString(hd.NetworkID)
	builder.WriteByte(')')
	return builder.String()
}

// HostDependencies is a parsable slice of HostDependency.
type HostDependencies []*HostDependency

func (hd HostDependencies) config(cfg config) {
	for _i := range hd {
		hd[_i].config = cfg
	}
}
