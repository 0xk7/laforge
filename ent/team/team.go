// Code generated by entc, DO NOT EDIT.

package team

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTeamNumber holds the string denoting the team_number field in the database.
	FieldTeamNumber = "team_number"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"

	// EdgeTeamToUser holds the string denoting the teamtouser edge name in mutations.
	EdgeTeamToUser = "TeamToUser"
	// EdgeTeamToBuild holds the string denoting the teamtobuild edge name in mutations.
	EdgeTeamToBuild = "TeamToBuild"
	// EdgeTeamToEnvironment holds the string denoting the teamtoenvironment edge name in mutations.
	EdgeTeamToEnvironment = "TeamToEnvironment"
	// EdgeTeamToTag holds the string denoting the teamtotag edge name in mutations.
	EdgeTeamToTag = "TeamToTag"
	// EdgeTeamToProvisionedNetwork holds the string denoting the teamtoprovisionednetwork edge name in mutations.
	EdgeTeamToProvisionedNetwork = "TeamToProvisionedNetwork"

	// Table holds the table name of the team in the database.
	Table = "teams"
	// TeamToUserTable is the table the holds the TeamToUser relation/edge.
	TeamToUserTable = "users"
	// TeamToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TeamToUserInverseTable = "users"
	// TeamToUserColumn is the table column denoting the TeamToUser relation/edge.
	TeamToUserColumn = "team_team_to_user"
	// TeamToBuildTable is the table the holds the TeamToBuild relation/edge. The primary key declared below.
	TeamToBuildTable = "team_TeamToBuild"
	// TeamToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	TeamToBuildInverseTable = "builds"
	// TeamToEnvironmentTable is the table the holds the TeamToEnvironment relation/edge. The primary key declared below.
	TeamToEnvironmentTable = "team_TeamToEnvironment"
	// TeamToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	TeamToEnvironmentInverseTable = "environments"
	// TeamToTagTable is the table the holds the TeamToTag relation/edge.
	TeamToTagTable = "tags"
	// TeamToTagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TeamToTagInverseTable = "tags"
	// TeamToTagColumn is the table column denoting the TeamToTag relation/edge.
	TeamToTagColumn = "team_team_to_tag"
	// TeamToProvisionedNetworkTable is the table the holds the TeamToProvisionedNetwork relation/edge. The primary key declared below.
	TeamToProvisionedNetworkTable = "provisioned_network_ProvisionedNetworkToTeam"
	// TeamToProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	TeamToProvisionedNetworkInverseTable = "provisioned_networks"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldTeamNumber,
	FieldConfig,
	FieldRevision,
}

var (
	// TeamToBuildPrimaryKey and TeamToBuildColumn2 are the table columns denoting the
	// primary key for the TeamToBuild relation (M2M).
	TeamToBuildPrimaryKey = []string{"team_id", "build_id"}
	// TeamToEnvironmentPrimaryKey and TeamToEnvironmentColumn2 are the table columns denoting the
	// primary key for the TeamToEnvironment relation (M2M).
	TeamToEnvironmentPrimaryKey = []string{"team_id", "environment_id"}
	// TeamToProvisionedNetworkPrimaryKey and TeamToProvisionedNetworkColumn2 are the table columns denoting the
	// primary key for the TeamToProvisionedNetwork relation (M2M).
	TeamToProvisionedNetworkPrimaryKey = []string{"provisioned_network_id", "team_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
