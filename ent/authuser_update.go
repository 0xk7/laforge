// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/authuser"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/token"
	"github.com/google/uuid"
)

// AuthUserUpdate is the builder for updating AuthUser entities.
type AuthUserUpdate struct {
	config
	hooks    []Hook
	mutation *AuthUserMutation
}

// Where adds a new predicate for the AuthUserUpdate builder.
func (auu *AuthUserUpdate) Where(ps ...predicate.AuthUser) *AuthUserUpdate {
	auu.mutation.predicates = append(auu.mutation.predicates, ps...)
	return auu
}

// SetUsername sets the "username" field.
func (auu *AuthUserUpdate) SetUsername(s string) *AuthUserUpdate {
	auu.mutation.SetUsername(s)
	return auu
}

// SetPassword sets the "password" field.
func (auu *AuthUserUpdate) SetPassword(s string) *AuthUserUpdate {
	auu.mutation.SetPassword(s)
	return auu
}

// SetRole sets the "role" field.
func (auu *AuthUserUpdate) SetRole(a authuser.Role) *AuthUserUpdate {
	auu.mutation.SetRole(a)
	return auu
}

// SetProvider sets the "provider" field.
func (auu *AuthUserUpdate) SetProvider(a authuser.Provider) *AuthUserUpdate {
	auu.mutation.SetProvider(a)
	return auu
}

// AddAuthUserToTokenIDs adds the "AuthUserToToken" edge to the Token entity by IDs.
func (auu *AuthUserUpdate) AddAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.AddAuthUserToTokenIDs(ids...)
	return auu
}

// AddAuthUserToToken adds the "AuthUserToToken" edges to the Token entity.
func (auu *AuthUserUpdate) AddAuthUserToToken(t ...*Token) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auu.AddAuthUserToTokenIDs(ids...)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auu *AuthUserUpdate) Mutation() *AuthUserMutation {
	return auu.mutation
}

// ClearAuthUserToToken clears all "AuthUserToToken" edges to the Token entity.
func (auu *AuthUserUpdate) ClearAuthUserToToken() *AuthUserUpdate {
	auu.mutation.ClearAuthUserToToken()
	return auu
}

// RemoveAuthUserToTokenIDs removes the "AuthUserToToken" edge to Token entities by IDs.
func (auu *AuthUserUpdate) RemoveAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdate {
	auu.mutation.RemoveAuthUserToTokenIDs(ids...)
	return auu
}

// RemoveAuthUserToToken removes "AuthUserToToken" edges to Token entities.
func (auu *AuthUserUpdate) RemoveAuthUserToToken(t ...*Token) *AuthUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auu.RemoveAuthUserToTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AuthUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(auu.hooks) == 0 {
		if err = auu.check(); err != nil {
			return 0, err
		}
		affected, err = auu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auu.check(); err != nil {
				return 0, err
			}
			auu.mutation = mutation
			affected, err = auu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auu.hooks) - 1; i >= 0; i-- {
			mut = auu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AuthUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AuthUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AuthUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AuthUserUpdate) check() error {
	if v, ok := auu.mutation.Role(); ok {
		if err := authuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if v, ok := auu.mutation.Provider(); ok {
		if err := authuser.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf("ent: validator failed for field \"provider\": %w", err)}
		}
	}
	return nil
}

func (auu *AuthUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authuser.Table,
			Columns: authuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authuser.FieldID,
			},
		},
	}
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authuser.FieldUsername,
		})
	}
	if value, ok := auu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authuser.FieldPassword,
		})
	}
	if value, ok := auu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authuser.FieldRole,
		})
	}
	if value, ok := auu.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authuser.FieldProvider,
		})
	}
	if auu.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.RemovedAuthUserToTokenIDs(); len(nodes) > 0 && !auu.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AuthUserToTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthUserUpdateOne is the builder for updating a single AuthUser entity.
type AuthUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthUserMutation
}

// SetUsername sets the "username" field.
func (auuo *AuthUserUpdateOne) SetUsername(s string) *AuthUserUpdateOne {
	auuo.mutation.SetUsername(s)
	return auuo
}

// SetPassword sets the "password" field.
func (auuo *AuthUserUpdateOne) SetPassword(s string) *AuthUserUpdateOne {
	auuo.mutation.SetPassword(s)
	return auuo
}

// SetRole sets the "role" field.
func (auuo *AuthUserUpdateOne) SetRole(a authuser.Role) *AuthUserUpdateOne {
	auuo.mutation.SetRole(a)
	return auuo
}

// SetProvider sets the "provider" field.
func (auuo *AuthUserUpdateOne) SetProvider(a authuser.Provider) *AuthUserUpdateOne {
	auuo.mutation.SetProvider(a)
	return auuo
}

// AddAuthUserToTokenIDs adds the "AuthUserToToken" edge to the Token entity by IDs.
func (auuo *AuthUserUpdateOne) AddAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.AddAuthUserToTokenIDs(ids...)
	return auuo
}

// AddAuthUserToToken adds the "AuthUserToToken" edges to the Token entity.
func (auuo *AuthUserUpdateOne) AddAuthUserToToken(t ...*Token) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auuo.AddAuthUserToTokenIDs(ids...)
}

// Mutation returns the AuthUserMutation object of the builder.
func (auuo *AuthUserUpdateOne) Mutation() *AuthUserMutation {
	return auuo.mutation
}

// ClearAuthUserToToken clears all "AuthUserToToken" edges to the Token entity.
func (auuo *AuthUserUpdateOne) ClearAuthUserToToken() *AuthUserUpdateOne {
	auuo.mutation.ClearAuthUserToToken()
	return auuo
}

// RemoveAuthUserToTokenIDs removes the "AuthUserToToken" edge to Token entities by IDs.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToTokenIDs(ids ...uuid.UUID) *AuthUserUpdateOne {
	auuo.mutation.RemoveAuthUserToTokenIDs(ids...)
	return auuo
}

// RemoveAuthUserToToken removes "AuthUserToToken" edges to Token entities.
func (auuo *AuthUserUpdateOne) RemoveAuthUserToToken(t ...*Token) *AuthUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auuo.RemoveAuthUserToTokenIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AuthUserUpdateOne) Select(field string, fields ...string) *AuthUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AuthUser entity.
func (auuo *AuthUserUpdateOne) Save(ctx context.Context) (*AuthUser, error) {
	var (
		err  error
		node *AuthUser
	)
	if len(auuo.hooks) == 0 {
		if err = auuo.check(); err != nil {
			return nil, err
		}
		node, err = auuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AuthUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auuo.check(); err != nil {
				return nil, err
			}
			auuo.mutation = mutation
			node, err = auuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auuo.hooks) - 1; i >= 0; i-- {
			mut = auuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) SaveX(ctx context.Context) *AuthUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AuthUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AuthUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AuthUserUpdateOne) check() error {
	if v, ok := auuo.mutation.Role(); ok {
		if err := authuser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if v, ok := auuo.mutation.Provider(); ok {
		if err := authuser.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf("ent: validator failed for field \"provider\": %w", err)}
		}
	}
	return nil
}

func (auuo *AuthUserUpdateOne) sqlSave(ctx context.Context) (_node *AuthUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authuser.Table,
			Columns: authuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: authuser.FieldID,
			},
		},
	}
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AuthUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authuser.FieldID)
		for _, f := range fields {
			if !authuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authuser.FieldUsername,
		})
	}
	if value, ok := auuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: authuser.FieldPassword,
		})
	}
	if value, ok := auuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authuser.FieldRole,
		})
	}
	if value, ok := auuo.mutation.Provider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: authuser.FieldProvider,
		})
	}
	if auuo.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.RemovedAuthUserToTokenIDs(); len(nodes) > 0 && !auuo.mutation.AuthUserToTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AuthUserToTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   authuser.AuthUserToTokenTable,
			Columns: []string{authuser.AuthUserToTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
