// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/servertask"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/google/uuid"
)

// Status is the model entity for the Status schema.
type Status struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State status.State `json:"state,omitempty"`
	// StatusFor holds the value of the "status_for" field.
	StatusFor status.StatusFor `json:"status_for,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Failed holds the value of the "failed" field.
	Failed bool `json:"failed,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusQuery when eager-loading is set.
	Edges StatusEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// StatusToBuild holds the value of the StatusToBuild edge.
	HCLStatusToBuild *Build `json:"StatusToBuild,omitempty"`
	// StatusToProvisionedNetwork holds the value of the StatusToProvisionedNetwork edge.
	HCLStatusToProvisionedNetwork *ProvisionedNetwork `json:"StatusToProvisionedNetwork,omitempty"`
	// StatusToProvisionedHost holds the value of the StatusToProvisionedHost edge.
	HCLStatusToProvisionedHost *ProvisionedHost `json:"StatusToProvisionedHost,omitempty"`
	// StatusToProvisioningStep holds the value of the StatusToProvisioningStep edge.
	HCLStatusToProvisioningStep *ProvisioningStep `json:"StatusToProvisioningStep,omitempty"`
	// StatusToTeam holds the value of the StatusToTeam edge.
	HCLStatusToTeam *Team `json:"StatusToTeam,omitempty"`
	// StatusToPlan holds the value of the StatusToPlan edge.
	HCLStatusToPlan *Plan `json:"StatusToPlan,omitempty"`
	// StatusToServerTask holds the value of the StatusToServerTask edge.
	HCLStatusToServerTask *ServerTask `json:"StatusToServerTask,omitempty"`
	//
	build_build_to_status                             *uuid.UUID
	plan_plan_to_status                               *uuid.UUID
	provisioned_host_provisioned_host_to_status       *uuid.UUID
	provisioned_network_provisioned_network_to_status *uuid.UUID
	provisioning_step_provisioning_step_to_status     *uuid.UUID
	server_task_server_task_to_status                 *uuid.UUID
	team_team_to_status                               *uuid.UUID
}

// StatusEdges holds the relations/edges for other nodes in the graph.
type StatusEdges struct {
	// StatusToBuild holds the value of the StatusToBuild edge.
	StatusToBuild *Build `json:"StatusToBuild,omitempty"`
	// StatusToProvisionedNetwork holds the value of the StatusToProvisionedNetwork edge.
	StatusToProvisionedNetwork *ProvisionedNetwork `json:"StatusToProvisionedNetwork,omitempty"`
	// StatusToProvisionedHost holds the value of the StatusToProvisionedHost edge.
	StatusToProvisionedHost *ProvisionedHost `json:"StatusToProvisionedHost,omitempty"`
	// StatusToProvisioningStep holds the value of the StatusToProvisioningStep edge.
	StatusToProvisioningStep *ProvisioningStep `json:"StatusToProvisioningStep,omitempty"`
	// StatusToTeam holds the value of the StatusToTeam edge.
	StatusToTeam *Team `json:"StatusToTeam,omitempty"`
	// StatusToPlan holds the value of the StatusToPlan edge.
	StatusToPlan *Plan `json:"StatusToPlan,omitempty"`
	// StatusToServerTask holds the value of the StatusToServerTask edge.
	StatusToServerTask *ServerTask `json:"StatusToServerTask,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// StatusToBuildOrErr returns the StatusToBuild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToBuildOrErr() (*Build, error) {
	if e.loadedTypes[0] {
		if e.StatusToBuild == nil {
			// The edge StatusToBuild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.StatusToBuild, nil
	}
	return nil, &NotLoadedError{edge: "StatusToBuild"}
}

// StatusToProvisionedNetworkOrErr returns the StatusToProvisionedNetwork value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToProvisionedNetworkOrErr() (*ProvisionedNetwork, error) {
	if e.loadedTypes[1] {
		if e.StatusToProvisionedNetwork == nil {
			// The edge StatusToProvisionedNetwork was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionednetwork.Label}
		}
		return e.StatusToProvisionedNetwork, nil
	}
	return nil, &NotLoadedError{edge: "StatusToProvisionedNetwork"}
}

// StatusToProvisionedHostOrErr returns the StatusToProvisionedHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToProvisionedHostOrErr() (*ProvisionedHost, error) {
	if e.loadedTypes[2] {
		if e.StatusToProvisionedHost == nil {
			// The edge StatusToProvisionedHost was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisionedhost.Label}
		}
		return e.StatusToProvisionedHost, nil
	}
	return nil, &NotLoadedError{edge: "StatusToProvisionedHost"}
}

// StatusToProvisioningStepOrErr returns the StatusToProvisioningStep value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToProvisioningStepOrErr() (*ProvisioningStep, error) {
	if e.loadedTypes[3] {
		if e.StatusToProvisioningStep == nil {
			// The edge StatusToProvisioningStep was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: provisioningstep.Label}
		}
		return e.StatusToProvisioningStep, nil
	}
	return nil, &NotLoadedError{edge: "StatusToProvisioningStep"}
}

// StatusToTeamOrErr returns the StatusToTeam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToTeamOrErr() (*Team, error) {
	if e.loadedTypes[4] {
		if e.StatusToTeam == nil {
			// The edge StatusToTeam was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.StatusToTeam, nil
	}
	return nil, &NotLoadedError{edge: "StatusToTeam"}
}

// StatusToPlanOrErr returns the StatusToPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToPlanOrErr() (*Plan, error) {
	if e.loadedTypes[5] {
		if e.StatusToPlan == nil {
			// The edge StatusToPlan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.StatusToPlan, nil
	}
	return nil, &NotLoadedError{edge: "StatusToPlan"}
}

// StatusToServerTaskOrErr returns the StatusToServerTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) StatusToServerTaskOrErr() (*ServerTask, error) {
	if e.loadedTypes[6] {
		if e.StatusToServerTask == nil {
			// The edge StatusToServerTask was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: servertask.Label}
		}
		return e.StatusToServerTask, nil
	}
	return nil, &NotLoadedError{edge: "StatusToServerTask"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Status) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case status.FieldFailed, status.FieldCompleted:
			values[i] = new(sql.NullBool)
		case status.FieldState, status.FieldStatusFor, status.FieldError:
			values[i] = new(sql.NullString)
		case status.FieldStartedAt, status.FieldEndedAt:
			values[i] = new(sql.NullTime)
		case status.FieldID:
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[0]: // build_build_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[1]: // plan_plan_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[2]: // provisioned_host_provisioned_host_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[3]: // provisioned_network_provisioned_network_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[4]: // provisioning_step_provisioning_step_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[5]: // server_task_server_task_to_status
			values[i] = new(uuid.UUID)
		case status.ForeignKeys[6]: // team_team_to_status
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Status", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Status fields.
func (s *Status) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case status.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case status.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				s.State = status.State(value.String)
			}
		case status.FieldStatusFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_for", values[i])
			} else if value.Valid {
				s.StatusFor = status.StatusFor(value.String)
			}
		case status.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case status.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = value.Time
			}
		case status.FieldFailed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field failed", values[i])
			} else if value.Valid {
				s.Failed = value.Bool
			}
		case status.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				s.Completed = value.Bool
			}
		case status.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				s.Error = value.String
			}
		case status.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field build_build_to_status", values[i])
			} else if value != nil {
				s.build_build_to_status = value
			}
		case status.ForeignKeys[1]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field plan_plan_to_status", values[i])
			} else if value != nil {
				s.plan_plan_to_status = value
			}
		case status.ForeignKeys[2]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_host_provisioned_host_to_status", values[i])
			} else if value != nil {
				s.provisioned_host_provisioned_host_to_status = value
			}
		case status.ForeignKeys[3]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned_network_provisioned_network_to_status", values[i])
			} else if value != nil {
				s.provisioned_network_provisioned_network_to_status = value
			}
		case status.ForeignKeys[4]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_step_provisioning_step_to_status", values[i])
			} else if value != nil {
				s.provisioning_step_provisioning_step_to_status = value
			}
		case status.ForeignKeys[5]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field server_task_server_task_to_status", values[i])
			} else if value != nil {
				s.server_task_server_task_to_status = value
			}
		case status.ForeignKeys[6]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field team_team_to_status", values[i])
			} else if value != nil {
				s.team_team_to_status = value
			}
		}
	}
	return nil
}

// QueryStatusToBuild queries the "StatusToBuild" edge of the Status entity.
func (s *Status) QueryStatusToBuild() *BuildQuery {
	return (&StatusClient{config: s.config}).QueryStatusToBuild(s)
}

// QueryStatusToProvisionedNetwork queries the "StatusToProvisionedNetwork" edge of the Status entity.
func (s *Status) QueryStatusToProvisionedNetwork() *ProvisionedNetworkQuery {
	return (&StatusClient{config: s.config}).QueryStatusToProvisionedNetwork(s)
}

// QueryStatusToProvisionedHost queries the "StatusToProvisionedHost" edge of the Status entity.
func (s *Status) QueryStatusToProvisionedHost() *ProvisionedHostQuery {
	return (&StatusClient{config: s.config}).QueryStatusToProvisionedHost(s)
}

// QueryStatusToProvisioningStep queries the "StatusToProvisioningStep" edge of the Status entity.
func (s *Status) QueryStatusToProvisioningStep() *ProvisioningStepQuery {
	return (&StatusClient{config: s.config}).QueryStatusToProvisioningStep(s)
}

// QueryStatusToTeam queries the "StatusToTeam" edge of the Status entity.
func (s *Status) QueryStatusToTeam() *TeamQuery {
	return (&StatusClient{config: s.config}).QueryStatusToTeam(s)
}

// QueryStatusToPlan queries the "StatusToPlan" edge of the Status entity.
func (s *Status) QueryStatusToPlan() *PlanQuery {
	return (&StatusClient{config: s.config}).QueryStatusToPlan(s)
}

// QueryStatusToServerTask queries the "StatusToServerTask" edge of the Status entity.
func (s *Status) QueryStatusToServerTask() *ServerTaskQuery {
	return (&StatusClient{config: s.config}).QueryStatusToServerTask(s)
}

// Update returns a builder for updating this Status.
// Note that you need to call Status.Unwrap() before calling this method if this Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Status) Update() *StatusUpdateOne {
	return (&StatusClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Status) Unwrap() *Status {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Status is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Status) String() string {
	var builder strings.Builder
	builder.WriteString("Status(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", s.State))
	builder.WriteString(", status_for=")
	builder.WriteString(fmt.Sprintf("%v", s.StatusFor))
	builder.WriteString(", started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ended_at=")
	builder.WriteString(s.EndedAt.Format(time.ANSIC))
	builder.WriteString(", failed=")
	builder.WriteString(fmt.Sprintf("%v", s.Failed))
	builder.WriteString(", completed=")
	builder.WriteString(fmt.Sprintf("%v", s.Completed))
	builder.WriteString(", error=")
	builder.WriteString(s.Error)
	builder.WriteByte(')')
	return builder.String()
}

// StatusSlice is a parsable slice of Status.
type StatusSlice []*Status

func (s StatusSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
