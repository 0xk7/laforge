// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/status"
)

// Status is the model entity for the Status schema.
type Status struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State status.State `json:"state,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Failed holds the value of the "failed" field.
	Failed bool `json:"failed,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusQuery when eager-loading is set.
	Edges StatusEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// StatusToTag holds the value of the StatusToTag edge.
	HCLStatusToTag []*Tag `json:"StatusToTag,omitempty"`
	//
	provisioned_host_provisioned_host_to_status       *int
	provisioned_network_provisioned_network_to_status *int
	provisioning_step_provisioning_step_to_status     *int
}

// StatusEdges holds the relations/edges for other nodes in the graph.
type StatusEdges struct {
	// StatusToTag holds the value of the StatusToTag edge.
	StatusToTag []*Tag `json:"StatusToTag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusToTagOrErr returns the StatusToTag value or an error if the edge
// was not loaded in eager-loading.
func (e StatusEdges) StatusToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.StatusToTag, nil
	}
	return nil, &NotLoadedError{edge: "StatusToTag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Status) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case status.FieldFailed, status.FieldCompleted:
			values[i] = &sql.NullBool{}
		case status.FieldID:
			values[i] = &sql.NullInt64{}
		case status.FieldState, status.FieldError:
			values[i] = &sql.NullString{}
		case status.FieldStartedAt, status.FieldEndedAt:
			values[i] = &sql.NullTime{}
		case status.ForeignKeys[0]: // provisioned_host_provisioned_host_to_status
			values[i] = &sql.NullInt64{}
		case status.ForeignKeys[1]: // provisioned_network_provisioned_network_to_status
			values[i] = &sql.NullInt64{}
		case status.ForeignKeys[2]: // provisioning_step_provisioning_step_to_status
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Status", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Status fields.
func (s *Status) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case status.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case status.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				s.State = status.State(value.String)
			}
		case status.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case status.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = value.Time
			}
		case status.FieldFailed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field failed", values[i])
			} else if value.Valid {
				s.Failed = value.Bool
			}
		case status.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				s.Completed = value.Bool
			}
		case status.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				s.Error = value.String
			}
		case status.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provisioned_host_provisioned_host_to_status", value)
			} else if value.Valid {
				s.provisioned_host_provisioned_host_to_status = new(int)
				*s.provisioned_host_provisioned_host_to_status = int(value.Int64)
			}
		case status.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provisioned_network_provisioned_network_to_status", value)
			} else if value.Valid {
				s.provisioned_network_provisioned_network_to_status = new(int)
				*s.provisioned_network_provisioned_network_to_status = int(value.Int64)
			}
		case status.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field provisioning_step_provisioning_step_to_status", value)
			} else if value.Valid {
				s.provisioning_step_provisioning_step_to_status = new(int)
				*s.provisioning_step_provisioning_step_to_status = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStatusToTag queries the "StatusToTag" edge of the Status entity.
func (s *Status) QueryStatusToTag() *TagQuery {
	return (&StatusClient{config: s.config}).QueryStatusToTag(s)
}

// Update returns a builder for updating this Status.
// Note that you need to call Status.Unwrap() before calling this method if this Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Status) Update() *StatusUpdateOne {
	return (&StatusClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Status) Unwrap() *Status {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Status is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Status) String() string {
	var builder strings.Builder
	builder.WriteString("Status(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", s.State))
	builder.WriteString(", started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ended_at=")
	builder.WriteString(s.EndedAt.Format(time.ANSIC))
	builder.WriteString(", failed=")
	builder.WriteString(fmt.Sprintf("%v", s.Failed))
	builder.WriteString(", completed=")
	builder.WriteString(fmt.Sprintf("%v", s.Completed))
	builder.WriteString(", error=")
	builder.WriteString(s.Error)
	builder.WriteByte(')')
	return builder.String()
}

// StatusSlice is a parsable slice of Status.
type StatusSlice []*Status

func (s StatusSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
