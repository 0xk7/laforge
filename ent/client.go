// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/gen0cide/laforge/ent/migrate"

	"github.com/gen0cide/laforge/ent/agentstatus"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/disk"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AgentStatus is the client for interacting with the AgentStatus builders.
	AgentStatus *AgentStatusClient
	// Build is the client for interacting with the Build builders.
	Build *BuildClient
	// Command is the client for interacting with the Command builders.
	Command *CommandClient
	// Competition is the client for interacting with the Competition builders.
	Competition *CompetitionClient
	// DNS is the client for interacting with the DNS builders.
	DNS *DNSClient
	// DNSRecord is the client for interacting with the DNSRecord builders.
	DNSRecord *DNSRecordClient
	// Disk is the client for interacting with the Disk builders.
	Disk *DiskClient
	// Environment is the client for interacting with the Environment builders.
	Environment *EnvironmentClient
	// FileDelete is the client for interacting with the FileDelete builders.
	FileDelete *FileDeleteClient
	// FileDownload is the client for interacting with the FileDownload builders.
	FileDownload *FileDownloadClient
	// FileExtract is the client for interacting with the FileExtract builders.
	FileExtract *FileExtractClient
	// Finding is the client for interacting with the Finding builders.
	Finding *FindingClient
	// GinFileMiddleware is the client for interacting with the GinFileMiddleware builders.
	GinFileMiddleware *GinFileMiddlewareClient
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// HostDependency is the client for interacting with the HostDependency builders.
	HostDependency *HostDependencyClient
	// Identity is the client for interacting with the Identity builders.
	Identity *IdentityClient
	// IncludedNetwork is the client for interacting with the IncludedNetwork builders.
	IncludedNetwork *IncludedNetworkClient
	// Network is the client for interacting with the Network builders.
	Network *NetworkClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// ProvisionedHost is the client for interacting with the ProvisionedHost builders.
	ProvisionedHost *ProvisionedHostClient
	// ProvisionedNetwork is the client for interacting with the ProvisionedNetwork builders.
	ProvisionedNetwork *ProvisionedNetworkClient
	// ProvisioningStep is the client for interacting with the ProvisioningStep builders.
	ProvisioningStep *ProvisioningStepClient
	// Script is the client for interacting with the Script builders.
	Script *ScriptClient
	// Status is the client for interacting with the Status builders.
	Status *StatusClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AgentStatus = NewAgentStatusClient(c.config)
	c.Build = NewBuildClient(c.config)
	c.Command = NewCommandClient(c.config)
	c.Competition = NewCompetitionClient(c.config)
	c.DNS = NewDNSClient(c.config)
	c.DNSRecord = NewDNSRecordClient(c.config)
	c.Disk = NewDiskClient(c.config)
	c.Environment = NewEnvironmentClient(c.config)
	c.FileDelete = NewFileDeleteClient(c.config)
	c.FileDownload = NewFileDownloadClient(c.config)
	c.FileExtract = NewFileExtractClient(c.config)
	c.Finding = NewFindingClient(c.config)
	c.GinFileMiddleware = NewGinFileMiddlewareClient(c.config)
	c.Host = NewHostClient(c.config)
	c.HostDependency = NewHostDependencyClient(c.config)
	c.Identity = NewIdentityClient(c.config)
	c.IncludedNetwork = NewIncludedNetworkClient(c.config)
	c.Network = NewNetworkClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.ProvisionedHost = NewProvisionedHostClient(c.config)
	c.ProvisionedNetwork = NewProvisionedNetworkClient(c.config)
	c.ProvisioningStep = NewProvisioningStepClient(c.config)
	c.Script = NewScriptClient(c.config)
	c.Status = NewStatusClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Team = NewTeamClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		AgentStatus:        NewAgentStatusClient(cfg),
		Build:              NewBuildClient(cfg),
		Command:            NewCommandClient(cfg),
		Competition:        NewCompetitionClient(cfg),
		DNS:                NewDNSClient(cfg),
		DNSRecord:          NewDNSRecordClient(cfg),
		Disk:               NewDiskClient(cfg),
		Environment:        NewEnvironmentClient(cfg),
		FileDelete:         NewFileDeleteClient(cfg),
		FileDownload:       NewFileDownloadClient(cfg),
		FileExtract:        NewFileExtractClient(cfg),
		Finding:            NewFindingClient(cfg),
		GinFileMiddleware:  NewGinFileMiddlewareClient(cfg),
		Host:               NewHostClient(cfg),
		HostDependency:     NewHostDependencyClient(cfg),
		Identity:           NewIdentityClient(cfg),
		IncludedNetwork:    NewIncludedNetworkClient(cfg),
		Network:            NewNetworkClient(cfg),
		Plan:               NewPlanClient(cfg),
		ProvisionedHost:    NewProvisionedHostClient(cfg),
		ProvisionedNetwork: NewProvisionedNetworkClient(cfg),
		ProvisioningStep:   NewProvisioningStepClient(cfg),
		Script:             NewScriptClient(cfg),
		Status:             NewStatusClient(cfg),
		Tag:                NewTagClient(cfg),
		Team:               NewTeamClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:             cfg,
		AgentStatus:        NewAgentStatusClient(cfg),
		Build:              NewBuildClient(cfg),
		Command:            NewCommandClient(cfg),
		Competition:        NewCompetitionClient(cfg),
		DNS:                NewDNSClient(cfg),
		DNSRecord:          NewDNSRecordClient(cfg),
		Disk:               NewDiskClient(cfg),
		Environment:        NewEnvironmentClient(cfg),
		FileDelete:         NewFileDeleteClient(cfg),
		FileDownload:       NewFileDownloadClient(cfg),
		FileExtract:        NewFileExtractClient(cfg),
		Finding:            NewFindingClient(cfg),
		GinFileMiddleware:  NewGinFileMiddlewareClient(cfg),
		Host:               NewHostClient(cfg),
		HostDependency:     NewHostDependencyClient(cfg),
		Identity:           NewIdentityClient(cfg),
		IncludedNetwork:    NewIncludedNetworkClient(cfg),
		Network:            NewNetworkClient(cfg),
		Plan:               NewPlanClient(cfg),
		ProvisionedHost:    NewProvisionedHostClient(cfg),
		ProvisionedNetwork: NewProvisionedNetworkClient(cfg),
		ProvisioningStep:   NewProvisioningStepClient(cfg),
		Script:             NewScriptClient(cfg),
		Status:             NewStatusClient(cfg),
		Tag:                NewTagClient(cfg),
		Team:               NewTeamClient(cfg),
		User:               NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AgentStatus.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AgentStatus.Use(hooks...)
	c.Build.Use(hooks...)
	c.Command.Use(hooks...)
	c.Competition.Use(hooks...)
	c.DNS.Use(hooks...)
	c.DNSRecord.Use(hooks...)
	c.Disk.Use(hooks...)
	c.Environment.Use(hooks...)
	c.FileDelete.Use(hooks...)
	c.FileDownload.Use(hooks...)
	c.FileExtract.Use(hooks...)
	c.Finding.Use(hooks...)
	c.GinFileMiddleware.Use(hooks...)
	c.Host.Use(hooks...)
	c.HostDependency.Use(hooks...)
	c.Identity.Use(hooks...)
	c.IncludedNetwork.Use(hooks...)
	c.Network.Use(hooks...)
	c.Plan.Use(hooks...)
	c.ProvisionedHost.Use(hooks...)
	c.ProvisionedNetwork.Use(hooks...)
	c.ProvisioningStep.Use(hooks...)
	c.Script.Use(hooks...)
	c.Status.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Team.Use(hooks...)
	c.User.Use(hooks...)
}

// AgentStatusClient is a client for the AgentStatus schema.
type AgentStatusClient struct {
	config
}

// NewAgentStatusClient returns a client for the AgentStatus from the given config.
func NewAgentStatusClient(c config) *AgentStatusClient {
	return &AgentStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agentstatus.Hooks(f(g(h())))`.
func (c *AgentStatusClient) Use(hooks ...Hook) {
	c.hooks.AgentStatus = append(c.hooks.AgentStatus, hooks...)
}

// Create returns a create builder for AgentStatus.
func (c *AgentStatusClient) Create() *AgentStatusCreate {
	mutation := newAgentStatusMutation(c.config, OpCreate)
	return &AgentStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AgentStatus entities.
func (c *AgentStatusClient) CreateBulk(builders ...*AgentStatusCreate) *AgentStatusCreateBulk {
	return &AgentStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AgentStatus.
func (c *AgentStatusClient) Update() *AgentStatusUpdate {
	mutation := newAgentStatusMutation(c.config, OpUpdate)
	return &AgentStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentStatusClient) UpdateOne(as *AgentStatus) *AgentStatusUpdateOne {
	mutation := newAgentStatusMutation(c.config, OpUpdateOne, withAgentStatus(as))
	return &AgentStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentStatusClient) UpdateOneID(id int) *AgentStatusUpdateOne {
	mutation := newAgentStatusMutation(c.config, OpUpdateOne, withAgentStatusID(id))
	return &AgentStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AgentStatus.
func (c *AgentStatusClient) Delete() *AgentStatusDelete {
	mutation := newAgentStatusMutation(c.config, OpDelete)
	return &AgentStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AgentStatusClient) DeleteOne(as *AgentStatus) *AgentStatusDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AgentStatusClient) DeleteOneID(id int) *AgentStatusDeleteOne {
	builder := c.Delete().Where(agentstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentStatusDeleteOne{builder}
}

// Query returns a query builder for AgentStatus.
func (c *AgentStatusClient) Query() *AgentStatusQuery {
	return &AgentStatusQuery{config: c.config}
}

// Get returns a AgentStatus entity by its id.
func (c *AgentStatusClient) Get(ctx context.Context, id int) (*AgentStatus, error) {
	return c.Query().Where(agentstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentStatusClient) GetX(ctx context.Context, id int) *AgentStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAgentStatusToTag queries the AgentStatusToTag edge of a AgentStatus.
func (c *AgentStatusClient) QueryAgentStatusToTag(as *AgentStatus) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agentstatus.Table, agentstatus.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, agentstatus.AgentStatusToTagTable, agentstatus.AgentStatusToTagColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgentStatusToProvisionedHost queries the AgentStatusToProvisionedHost edge of a AgentStatus.
func (c *AgentStatusClient) QueryAgentStatusToProvisionedHost(as *AgentStatus) *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agentstatus.Table, agentstatus.FieldID, id),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, agentstatus.AgentStatusToProvisionedHostTable, agentstatus.AgentStatusToProvisionedHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentStatusClient) Hooks() []Hook {
	return c.hooks.AgentStatus
}

// BuildClient is a client for the Build schema.
type BuildClient struct {
	config
}

// NewBuildClient returns a client for the Build from the given config.
func NewBuildClient(c config) *BuildClient {
	return &BuildClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `build.Hooks(f(g(h())))`.
func (c *BuildClient) Use(hooks ...Hook) {
	c.hooks.Build = append(c.hooks.Build, hooks...)
}

// Create returns a create builder for Build.
func (c *BuildClient) Create() *BuildCreate {
	mutation := newBuildMutation(c.config, OpCreate)
	return &BuildCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Build entities.
func (c *BuildClient) CreateBulk(builders ...*BuildCreate) *BuildCreateBulk {
	return &BuildCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Build.
func (c *BuildClient) Update() *BuildUpdate {
	mutation := newBuildMutation(c.config, OpUpdate)
	return &BuildUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BuildClient) UpdateOne(b *Build) *BuildUpdateOne {
	mutation := newBuildMutation(c.config, OpUpdateOne, withBuild(b))
	return &BuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BuildClient) UpdateOneID(id int) *BuildUpdateOne {
	mutation := newBuildMutation(c.config, OpUpdateOne, withBuildID(id))
	return &BuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Build.
func (c *BuildClient) Delete() *BuildDelete {
	mutation := newBuildMutation(c.config, OpDelete)
	return &BuildDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BuildClient) DeleteOne(b *Build) *BuildDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BuildClient) DeleteOneID(id int) *BuildDeleteOne {
	builder := c.Delete().Where(build.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BuildDeleteOne{builder}
}

// Query returns a query builder for Build.
func (c *BuildClient) Query() *BuildQuery {
	return &BuildQuery{config: c.config}
}

// Get returns a Build entity by its id.
func (c *BuildClient) Get(ctx context.Context, id int) (*Build, error) {
	return c.Query().Where(build.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BuildClient) GetX(ctx context.Context, id int) *Build {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBuildToUser queries the BuildToUser edge of a Build.
func (c *BuildClient) QueryBuildToUser(b *Build) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, build.BuildToUserTable, build.BuildToUserColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuildToTag queries the BuildToTag edge of a Build.
func (c *BuildClient) QueryBuildToTag(b *Build) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, build.BuildToTagTable, build.BuildToTagColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuildToProvisionedNetwork queries the BuildToProvisionedNetwork edge of a Build.
func (c *BuildClient) QueryBuildToProvisionedNetwork(b *Build) *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, build.BuildToProvisionedNetworkTable, build.BuildToProvisionedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuildToTeam queries the BuildToTeam edge of a Build.
func (c *BuildClient) QueryBuildToTeam(b *Build) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, build.BuildToTeamTable, build.BuildToTeamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuildToEnvironment queries the BuildToEnvironment edge of a Build.
func (c *BuildClient) QueryBuildToEnvironment(b *Build) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, build.BuildToEnvironmentTable, build.BuildToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBuildToPlan queries the BuildToPlan edge of a Build.
func (c *BuildClient) QueryBuildToPlan(b *Build) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(build.Table, build.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, build.BuildToPlanTable, build.BuildToPlanPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BuildClient) Hooks() []Hook {
	return c.hooks.Build
}

// CommandClient is a client for the Command schema.
type CommandClient struct {
	config
}

// NewCommandClient returns a client for the Command from the given config.
func NewCommandClient(c config) *CommandClient {
	return &CommandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `command.Hooks(f(g(h())))`.
func (c *CommandClient) Use(hooks ...Hook) {
	c.hooks.Command = append(c.hooks.Command, hooks...)
}

// Create returns a create builder for Command.
func (c *CommandClient) Create() *CommandCreate {
	mutation := newCommandMutation(c.config, OpCreate)
	return &CommandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Command entities.
func (c *CommandClient) CreateBulk(builders ...*CommandCreate) *CommandCreateBulk {
	return &CommandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Command.
func (c *CommandClient) Update() *CommandUpdate {
	mutation := newCommandMutation(c.config, OpUpdate)
	return &CommandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommandClient) UpdateOne(co *Command) *CommandUpdateOne {
	mutation := newCommandMutation(c.config, OpUpdateOne, withCommand(co))
	return &CommandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommandClient) UpdateOneID(id int) *CommandUpdateOne {
	mutation := newCommandMutation(c.config, OpUpdateOne, withCommandID(id))
	return &CommandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Command.
func (c *CommandClient) Delete() *CommandDelete {
	mutation := newCommandMutation(c.config, OpDelete)
	return &CommandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommandClient) DeleteOne(co *Command) *CommandDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommandClient) DeleteOneID(id int) *CommandDeleteOne {
	builder := c.Delete().Where(command.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommandDeleteOne{builder}
}

// Query returns a query builder for Command.
func (c *CommandClient) Query() *CommandQuery {
	return &CommandQuery{config: c.config}
}

// Get returns a Command entity by its id.
func (c *CommandClient) Get(ctx context.Context, id int) (*Command, error) {
	return c.Query().Where(command.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommandClient) GetX(ctx context.Context, id int) *Command {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommandToUser queries the CommandToUser edge of a Command.
func (c *CommandClient) QueryCommandToUser(co *Command) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(command.Table, command.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, command.CommandToUserTable, command.CommandToUserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommandToTag queries the CommandToTag edge of a Command.
func (c *CommandClient) QueryCommandToTag(co *Command) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(command.Table, command.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, command.CommandToTagTable, command.CommandToTagColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommandToEnvironment queries the CommandToEnvironment edge of a Command.
func (c *CommandClient) QueryCommandToEnvironment(co *Command) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(command.Table, command.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, command.CommandToEnvironmentTable, command.CommandToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommandClient) Hooks() []Hook {
	return c.hooks.Command
}

// CompetitionClient is a client for the Competition schema.
type CompetitionClient struct {
	config
}

// NewCompetitionClient returns a client for the Competition from the given config.
func NewCompetitionClient(c config) *CompetitionClient {
	return &CompetitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `competition.Hooks(f(g(h())))`.
func (c *CompetitionClient) Use(hooks ...Hook) {
	c.hooks.Competition = append(c.hooks.Competition, hooks...)
}

// Create returns a create builder for Competition.
func (c *CompetitionClient) Create() *CompetitionCreate {
	mutation := newCompetitionMutation(c.config, OpCreate)
	return &CompetitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Competition entities.
func (c *CompetitionClient) CreateBulk(builders ...*CompetitionCreate) *CompetitionCreateBulk {
	return &CompetitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Competition.
func (c *CompetitionClient) Update() *CompetitionUpdate {
	mutation := newCompetitionMutation(c.config, OpUpdate)
	return &CompetitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompetitionClient) UpdateOne(co *Competition) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetition(co))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompetitionClient) UpdateOneID(id int) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetitionID(id))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Competition.
func (c *CompetitionClient) Delete() *CompetitionDelete {
	mutation := newCompetitionMutation(c.config, OpDelete)
	return &CompetitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompetitionClient) DeleteOne(co *Competition) *CompetitionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompetitionClient) DeleteOneID(id int) *CompetitionDeleteOne {
	builder := c.Delete().Where(competition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompetitionDeleteOne{builder}
}

// Query returns a query builder for Competition.
func (c *CompetitionClient) Query() *CompetitionQuery {
	return &CompetitionQuery{config: c.config}
}

// Get returns a Competition entity by its id.
func (c *CompetitionClient) Get(ctx context.Context, id int) (*Competition, error) {
	return c.Query().Where(competition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompetitionClient) GetX(ctx context.Context, id int) *Competition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompetitionToTag queries the CompetitionToTag edge of a Competition.
func (c *CompetitionClient) QueryCompetitionToTag(co *Competition) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, competition.CompetitionToTagTable, competition.CompetitionToTagColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetitionToDNS queries the CompetitionToDNS edge of a Competition.
func (c *CompetitionClient) QueryCompetitionToDNS(co *Competition) *DNSQuery {
	query := &DNSQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(dns.Table, dns.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, competition.CompetitionToDNSTable, competition.CompetitionToDNSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompetitionToEnvironment queries the CompetitionToEnvironment edge of a Competition.
func (c *CompetitionClient) QueryCompetitionToEnvironment(co *Competition) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(competition.Table, competition.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, competition.CompetitionToEnvironmentTable, competition.CompetitionToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompetitionClient) Hooks() []Hook {
	return c.hooks.Competition
}

// DNSClient is a client for the DNS schema.
type DNSClient struct {
	config
}

// NewDNSClient returns a client for the DNS from the given config.
func NewDNSClient(c config) *DNSClient {
	return &DNSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dns.Hooks(f(g(h())))`.
func (c *DNSClient) Use(hooks ...Hook) {
	c.hooks.DNS = append(c.hooks.DNS, hooks...)
}

// Create returns a create builder for DNS.
func (c *DNSClient) Create() *DNSCreate {
	mutation := newDNSMutation(c.config, OpCreate)
	return &DNSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DNS entities.
func (c *DNSClient) CreateBulk(builders ...*DNSCreate) *DNSCreateBulk {
	return &DNSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DNS.
func (c *DNSClient) Update() *DNSUpdate {
	mutation := newDNSMutation(c.config, OpUpdate)
	return &DNSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DNSClient) UpdateOne(d *DNS) *DNSUpdateOne {
	mutation := newDNSMutation(c.config, OpUpdateOne, withDNS(d))
	return &DNSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DNSClient) UpdateOneID(id int) *DNSUpdateOne {
	mutation := newDNSMutation(c.config, OpUpdateOne, withDNSID(id))
	return &DNSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DNS.
func (c *DNSClient) Delete() *DNSDelete {
	mutation := newDNSMutation(c.config, OpDelete)
	return &DNSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DNSClient) DeleteOne(d *DNS) *DNSDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DNSClient) DeleteOneID(id int) *DNSDeleteOne {
	builder := c.Delete().Where(dns.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DNSDeleteOne{builder}
}

// Query returns a query builder for DNS.
func (c *DNSClient) Query() *DNSQuery {
	return &DNSQuery{config: c.config}
}

// Get returns a DNS entity by its id.
func (c *DNSClient) Get(ctx context.Context, id int) (*DNS, error) {
	return c.Query().Where(dns.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DNSClient) GetX(ctx context.Context, id int) *DNS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDNSToTag queries the DNSToTag edge of a DNS.
func (c *DNSClient) QueryDNSToTag(d *DNS) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dns.Table, dns.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dns.DNSToTagTable, dns.DNSToTagColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDNSToEnvironment queries the DNSToEnvironment edge of a DNS.
func (c *DNSClient) QueryDNSToEnvironment(d *DNS) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dns.Table, dns.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dns.DNSToEnvironmentTable, dns.DNSToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDNSToCompetition queries the DNSToCompetition edge of a DNS.
func (c *DNSClient) QueryDNSToCompetition(d *DNS) *CompetitionQuery {
	query := &CompetitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dns.Table, dns.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dns.DNSToCompetitionTable, dns.DNSToCompetitionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DNSClient) Hooks() []Hook {
	return c.hooks.DNS
}

// DNSRecordClient is a client for the DNSRecord schema.
type DNSRecordClient struct {
	config
}

// NewDNSRecordClient returns a client for the DNSRecord from the given config.
func NewDNSRecordClient(c config) *DNSRecordClient {
	return &DNSRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dnsrecord.Hooks(f(g(h())))`.
func (c *DNSRecordClient) Use(hooks ...Hook) {
	c.hooks.DNSRecord = append(c.hooks.DNSRecord, hooks...)
}

// Create returns a create builder for DNSRecord.
func (c *DNSRecordClient) Create() *DNSRecordCreate {
	mutation := newDNSRecordMutation(c.config, OpCreate)
	return &DNSRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DNSRecord entities.
func (c *DNSRecordClient) CreateBulk(builders ...*DNSRecordCreate) *DNSRecordCreateBulk {
	return &DNSRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DNSRecord.
func (c *DNSRecordClient) Update() *DNSRecordUpdate {
	mutation := newDNSRecordMutation(c.config, OpUpdate)
	return &DNSRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DNSRecordClient) UpdateOne(dr *DNSRecord) *DNSRecordUpdateOne {
	mutation := newDNSRecordMutation(c.config, OpUpdateOne, withDNSRecord(dr))
	return &DNSRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DNSRecordClient) UpdateOneID(id int) *DNSRecordUpdateOne {
	mutation := newDNSRecordMutation(c.config, OpUpdateOne, withDNSRecordID(id))
	return &DNSRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DNSRecord.
func (c *DNSRecordClient) Delete() *DNSRecordDelete {
	mutation := newDNSRecordMutation(c.config, OpDelete)
	return &DNSRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DNSRecordClient) DeleteOne(dr *DNSRecord) *DNSRecordDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DNSRecordClient) DeleteOneID(id int) *DNSRecordDeleteOne {
	builder := c.Delete().Where(dnsrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DNSRecordDeleteOne{builder}
}

// Query returns a query builder for DNSRecord.
func (c *DNSRecordClient) Query() *DNSRecordQuery {
	return &DNSRecordQuery{config: c.config}
}

// Get returns a DNSRecord entity by its id.
func (c *DNSRecordClient) Get(ctx context.Context, id int) (*DNSRecord, error) {
	return c.Query().Where(dnsrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DNSRecordClient) GetX(ctx context.Context, id int) *DNSRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDNSRecordToTag queries the DNSRecordToTag edge of a DNSRecord.
func (c *DNSRecordClient) QueryDNSRecordToTag(dr *DNSRecord) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dnsrecord.Table, dnsrecord.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dnsrecord.DNSRecordToTagTable, dnsrecord.DNSRecordToTagColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDNSRecordToEnvironment queries the DNSRecordToEnvironment edge of a DNSRecord.
func (c *DNSRecordClient) QueryDNSRecordToEnvironment(dr *DNSRecord) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dnsrecord.Table, dnsrecord.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dnsrecord.DNSRecordToEnvironmentTable, dnsrecord.DNSRecordToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DNSRecordClient) Hooks() []Hook {
	return c.hooks.DNSRecord
}

// DiskClient is a client for the Disk schema.
type DiskClient struct {
	config
}

// NewDiskClient returns a client for the Disk from the given config.
func NewDiskClient(c config) *DiskClient {
	return &DiskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `disk.Hooks(f(g(h())))`.
func (c *DiskClient) Use(hooks ...Hook) {
	c.hooks.Disk = append(c.hooks.Disk, hooks...)
}

// Create returns a create builder for Disk.
func (c *DiskClient) Create() *DiskCreate {
	mutation := newDiskMutation(c.config, OpCreate)
	return &DiskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Disk entities.
func (c *DiskClient) CreateBulk(builders ...*DiskCreate) *DiskCreateBulk {
	return &DiskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Disk.
func (c *DiskClient) Update() *DiskUpdate {
	mutation := newDiskMutation(c.config, OpUpdate)
	return &DiskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiskClient) UpdateOne(d *Disk) *DiskUpdateOne {
	mutation := newDiskMutation(c.config, OpUpdateOne, withDisk(d))
	return &DiskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiskClient) UpdateOneID(id int) *DiskUpdateOne {
	mutation := newDiskMutation(c.config, OpUpdateOne, withDiskID(id))
	return &DiskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Disk.
func (c *DiskClient) Delete() *DiskDelete {
	mutation := newDiskMutation(c.config, OpDelete)
	return &DiskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiskClient) DeleteOne(d *Disk) *DiskDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiskClient) DeleteOneID(id int) *DiskDeleteOne {
	builder := c.Delete().Where(disk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiskDeleteOne{builder}
}

// Query returns a query builder for Disk.
func (c *DiskClient) Query() *DiskQuery {
	return &DiskQuery{config: c.config}
}

// Get returns a Disk entity by its id.
func (c *DiskClient) Get(ctx context.Context, id int) (*Disk, error) {
	return c.Query().Where(disk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiskClient) GetX(ctx context.Context, id int) *Disk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDiskToTag queries the DiskToTag edge of a Disk.
func (c *DiskClient) QueryDiskToTag(d *Disk) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disk.Table, disk.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, disk.DiskToTagTable, disk.DiskToTagColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDiskToHost queries the DiskToHost edge of a Disk.
func (c *DiskClient) QueryDiskToHost(d *Disk) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(disk.Table, disk.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, disk.DiskToHostTable, disk.DiskToHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiskClient) Hooks() []Hook {
	return c.hooks.Disk
}

// EnvironmentClient is a client for the Environment schema.
type EnvironmentClient struct {
	config
}

// NewEnvironmentClient returns a client for the Environment from the given config.
func NewEnvironmentClient(c config) *EnvironmentClient {
	return &EnvironmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `environment.Hooks(f(g(h())))`.
func (c *EnvironmentClient) Use(hooks ...Hook) {
	c.hooks.Environment = append(c.hooks.Environment, hooks...)
}

// Create returns a create builder for Environment.
func (c *EnvironmentClient) Create() *EnvironmentCreate {
	mutation := newEnvironmentMutation(c.config, OpCreate)
	return &EnvironmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Environment entities.
func (c *EnvironmentClient) CreateBulk(builders ...*EnvironmentCreate) *EnvironmentCreateBulk {
	return &EnvironmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Environment.
func (c *EnvironmentClient) Update() *EnvironmentUpdate {
	mutation := newEnvironmentMutation(c.config, OpUpdate)
	return &EnvironmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnvironmentClient) UpdateOne(e *Environment) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironment(e))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnvironmentClient) UpdateOneID(id int) *EnvironmentUpdateOne {
	mutation := newEnvironmentMutation(c.config, OpUpdateOne, withEnvironmentID(id))
	return &EnvironmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Environment.
func (c *EnvironmentClient) Delete() *EnvironmentDelete {
	mutation := newEnvironmentMutation(c.config, OpDelete)
	return &EnvironmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EnvironmentClient) DeleteOne(e *Environment) *EnvironmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EnvironmentClient) DeleteOneID(id int) *EnvironmentDeleteOne {
	builder := c.Delete().Where(environment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnvironmentDeleteOne{builder}
}

// Query returns a query builder for Environment.
func (c *EnvironmentClient) Query() *EnvironmentQuery {
	return &EnvironmentQuery{config: c.config}
}

// Get returns a Environment entity by its id.
func (c *EnvironmentClient) Get(ctx context.Context, id int) (*Environment, error) {
	return c.Query().Where(environment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnvironmentClient) GetX(ctx context.Context, id int) *Environment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnvironmentToTag queries the EnvironmentToTag edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToTag(e *Environment) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, environment.EnvironmentToTagTable, environment.EnvironmentToTagColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToUser queries the EnvironmentToUser edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToUser(e *Environment) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToUserTable, environment.EnvironmentToUserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToHost queries the EnvironmentToHost edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToHost(e *Environment) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToHostTable, environment.EnvironmentToHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToCompetition queries the EnvironmentToCompetition edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToCompetition(e *Environment) *CompetitionQuery {
	query := &CompetitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(competition.Table, competition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToCompetitionTable, environment.EnvironmentToCompetitionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToBuild queries the EnvironmentToBuild edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToBuild(e *Environment) *BuildQuery {
	query := &BuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToBuildTable, environment.EnvironmentToBuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToIdentity queries the EnvironmentToIdentity edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToIdentity(e *Environment) *IdentityQuery {
	query := &IdentityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(identity.Table, identity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToIdentityTable, environment.EnvironmentToIdentityPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToCommand queries the EnvironmentToCommand edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToCommand(e *Environment) *CommandQuery {
	query := &CommandQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToCommandTable, environment.EnvironmentToCommandPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToScript queries the EnvironmentToScript edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToScript(e *Environment) *ScriptQuery {
	query := &ScriptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToScriptTable, environment.EnvironmentToScriptPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToFileDownload queries the EnvironmentToFileDownload edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToFileDownload(e *Environment) *FileDownloadQuery {
	query := &FileDownloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToFileDownloadTable, environment.EnvironmentToFileDownloadPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToFileDelete queries the EnvironmentToFileDelete edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToFileDelete(e *Environment) *FileDeleteQuery {
	query := &FileDeleteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToFileDeleteTable, environment.EnvironmentToFileDeletePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToFileExtract queries the EnvironmentToFileExtract edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToFileExtract(e *Environment) *FileExtractQuery {
	query := &FileExtractQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToFileExtractTable, environment.EnvironmentToFileExtractPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToIncludedNetwork queries the EnvironmentToIncludedNetwork edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToIncludedNetwork(e *Environment) *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToIncludedNetworkTable, environment.EnvironmentToIncludedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToFinding queries the EnvironmentToFinding edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToFinding(e *Environment) *FindingQuery {
	query := &FindingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(finding.Table, finding.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToFindingTable, environment.EnvironmentToFindingPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToDNSRecord queries the EnvironmentToDNSRecord edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToDNSRecord(e *Environment) *DNSRecordQuery {
	query := &DNSRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToDNSRecordTable, environment.EnvironmentToDNSRecordPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToDNS queries the EnvironmentToDNS edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToDNS(e *Environment) *DNSQuery {
	query := &DNSQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(dns.Table, dns.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToDNSTable, environment.EnvironmentToDNSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToNetwork queries the EnvironmentToNetwork edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToNetwork(e *Environment) *NetworkQuery {
	query := &NetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToNetworkTable, environment.EnvironmentToNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToHostDependency queries the EnvironmentToHostDependency edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToHostDependency(e *Environment) *HostDependencyQuery {
	query := &HostDependencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, environment.EnvironmentToHostDependencyTable, environment.EnvironmentToHostDependencyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnvironmentToTeam queries the EnvironmentToTeam edge of a Environment.
func (c *EnvironmentClient) QueryEnvironmentToTeam(e *Environment) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(environment.Table, environment.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, environment.EnvironmentToTeamTable, environment.EnvironmentToTeamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnvironmentClient) Hooks() []Hook {
	return c.hooks.Environment
}

// FileDeleteClient is a client for the FileDelete schema.
type FileDeleteClient struct {
	config
}

// NewFileDeleteClient returns a client for the FileDelete from the given config.
func NewFileDeleteClient(c config) *FileDeleteClient {
	return &FileDeleteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filedelete.Hooks(f(g(h())))`.
func (c *FileDeleteClient) Use(hooks ...Hook) {
	c.hooks.FileDelete = append(c.hooks.FileDelete, hooks...)
}

// Create returns a create builder for FileDelete.
func (c *FileDeleteClient) Create() *FileDeleteCreate {
	mutation := newFileDeleteMutation(c.config, OpCreate)
	return &FileDeleteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileDelete entities.
func (c *FileDeleteClient) CreateBulk(builders ...*FileDeleteCreate) *FileDeleteCreateBulk {
	return &FileDeleteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileDelete.
func (c *FileDeleteClient) Update() *FileDeleteUpdate {
	mutation := newFileDeleteMutation(c.config, OpUpdate)
	return &FileDeleteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileDeleteClient) UpdateOne(fd *FileDelete) *FileDeleteUpdateOne {
	mutation := newFileDeleteMutation(c.config, OpUpdateOne, withFileDelete(fd))
	return &FileDeleteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileDeleteClient) UpdateOneID(id int) *FileDeleteUpdateOne {
	mutation := newFileDeleteMutation(c.config, OpUpdateOne, withFileDeleteID(id))
	return &FileDeleteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileDelete.
func (c *FileDeleteClient) Delete() *FileDeleteDelete {
	mutation := newFileDeleteMutation(c.config, OpDelete)
	return &FileDeleteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileDeleteClient) DeleteOne(fd *FileDelete) *FileDeleteDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileDeleteClient) DeleteOneID(id int) *FileDeleteDeleteOne {
	builder := c.Delete().Where(filedelete.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteDeleteOne{builder}
}

// Query returns a query builder for FileDelete.
func (c *FileDeleteClient) Query() *FileDeleteQuery {
	return &FileDeleteQuery{config: c.config}
}

// Get returns a FileDelete entity by its id.
func (c *FileDeleteClient) Get(ctx context.Context, id int) (*FileDelete, error) {
	return c.Query().Where(filedelete.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileDeleteClient) GetX(ctx context.Context, id int) *FileDelete {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFileDeleteToTag queries the FileDeleteToTag edge of a FileDelete.
func (c *FileDeleteClient) QueryFileDeleteToTag(fd *FileDelete) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filedelete.Table, filedelete.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, filedelete.FileDeleteToTagTable, filedelete.FileDeleteToTagColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFileDeleteToEnvironment queries the FileDeleteToEnvironment edge of a FileDelete.
func (c *FileDeleteClient) QueryFileDeleteToEnvironment(fd *FileDelete) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filedelete.Table, filedelete.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, filedelete.FileDeleteToEnvironmentTable, filedelete.FileDeleteToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileDeleteClient) Hooks() []Hook {
	return c.hooks.FileDelete
}

// FileDownloadClient is a client for the FileDownload schema.
type FileDownloadClient struct {
	config
}

// NewFileDownloadClient returns a client for the FileDownload from the given config.
func NewFileDownloadClient(c config) *FileDownloadClient {
	return &FileDownloadClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filedownload.Hooks(f(g(h())))`.
func (c *FileDownloadClient) Use(hooks ...Hook) {
	c.hooks.FileDownload = append(c.hooks.FileDownload, hooks...)
}

// Create returns a create builder for FileDownload.
func (c *FileDownloadClient) Create() *FileDownloadCreate {
	mutation := newFileDownloadMutation(c.config, OpCreate)
	return &FileDownloadCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileDownload entities.
func (c *FileDownloadClient) CreateBulk(builders ...*FileDownloadCreate) *FileDownloadCreateBulk {
	return &FileDownloadCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileDownload.
func (c *FileDownloadClient) Update() *FileDownloadUpdate {
	mutation := newFileDownloadMutation(c.config, OpUpdate)
	return &FileDownloadUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileDownloadClient) UpdateOne(fd *FileDownload) *FileDownloadUpdateOne {
	mutation := newFileDownloadMutation(c.config, OpUpdateOne, withFileDownload(fd))
	return &FileDownloadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileDownloadClient) UpdateOneID(id int) *FileDownloadUpdateOne {
	mutation := newFileDownloadMutation(c.config, OpUpdateOne, withFileDownloadID(id))
	return &FileDownloadUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileDownload.
func (c *FileDownloadClient) Delete() *FileDownloadDelete {
	mutation := newFileDownloadMutation(c.config, OpDelete)
	return &FileDownloadDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileDownloadClient) DeleteOne(fd *FileDownload) *FileDownloadDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileDownloadClient) DeleteOneID(id int) *FileDownloadDeleteOne {
	builder := c.Delete().Where(filedownload.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDownloadDeleteOne{builder}
}

// Query returns a query builder for FileDownload.
func (c *FileDownloadClient) Query() *FileDownloadQuery {
	return &FileDownloadQuery{config: c.config}
}

// Get returns a FileDownload entity by its id.
func (c *FileDownloadClient) Get(ctx context.Context, id int) (*FileDownload, error) {
	return c.Query().Where(filedownload.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileDownloadClient) GetX(ctx context.Context, id int) *FileDownload {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFileDownloadToTag queries the FileDownloadToTag edge of a FileDownload.
func (c *FileDownloadClient) QueryFileDownloadToTag(fd *FileDownload) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filedownload.Table, filedownload.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, filedownload.FileDownloadToTagTable, filedownload.FileDownloadToTagColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFileDownloadToEnvironment queries the FileDownloadToEnvironment edge of a FileDownload.
func (c *FileDownloadClient) QueryFileDownloadToEnvironment(fd *FileDownload) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(filedownload.Table, filedownload.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, filedownload.FileDownloadToEnvironmentTable, filedownload.FileDownloadToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileDownloadClient) Hooks() []Hook {
	return c.hooks.FileDownload
}

// FileExtractClient is a client for the FileExtract schema.
type FileExtractClient struct {
	config
}

// NewFileExtractClient returns a client for the FileExtract from the given config.
func NewFileExtractClient(c config) *FileExtractClient {
	return &FileExtractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fileextract.Hooks(f(g(h())))`.
func (c *FileExtractClient) Use(hooks ...Hook) {
	c.hooks.FileExtract = append(c.hooks.FileExtract, hooks...)
}

// Create returns a create builder for FileExtract.
func (c *FileExtractClient) Create() *FileExtractCreate {
	mutation := newFileExtractMutation(c.config, OpCreate)
	return &FileExtractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileExtract entities.
func (c *FileExtractClient) CreateBulk(builders ...*FileExtractCreate) *FileExtractCreateBulk {
	return &FileExtractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileExtract.
func (c *FileExtractClient) Update() *FileExtractUpdate {
	mutation := newFileExtractMutation(c.config, OpUpdate)
	return &FileExtractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileExtractClient) UpdateOne(fe *FileExtract) *FileExtractUpdateOne {
	mutation := newFileExtractMutation(c.config, OpUpdateOne, withFileExtract(fe))
	return &FileExtractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileExtractClient) UpdateOneID(id int) *FileExtractUpdateOne {
	mutation := newFileExtractMutation(c.config, OpUpdateOne, withFileExtractID(id))
	return &FileExtractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileExtract.
func (c *FileExtractClient) Delete() *FileExtractDelete {
	mutation := newFileExtractMutation(c.config, OpDelete)
	return &FileExtractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileExtractClient) DeleteOne(fe *FileExtract) *FileExtractDeleteOne {
	return c.DeleteOneID(fe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileExtractClient) DeleteOneID(id int) *FileExtractDeleteOne {
	builder := c.Delete().Where(fileextract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileExtractDeleteOne{builder}
}

// Query returns a query builder for FileExtract.
func (c *FileExtractClient) Query() *FileExtractQuery {
	return &FileExtractQuery{config: c.config}
}

// Get returns a FileExtract entity by its id.
func (c *FileExtractClient) Get(ctx context.Context, id int) (*FileExtract, error) {
	return c.Query().Where(fileextract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileExtractClient) GetX(ctx context.Context, id int) *FileExtract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFileExtractToTag queries the FileExtractToTag edge of a FileExtract.
func (c *FileExtractClient) QueryFileExtractToTag(fe *FileExtract) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fileextract.Table, fileextract.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fileextract.FileExtractToTagTable, fileextract.FileExtractToTagColumn),
		)
		fromV = sqlgraph.Neighbors(fe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFileExtractToEnvironment queries the FileExtractToEnvironment edge of a FileExtract.
func (c *FileExtractClient) QueryFileExtractToEnvironment(fe *FileExtract) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fileextract.Table, fileextract.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, fileextract.FileExtractToEnvironmentTable, fileextract.FileExtractToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(fe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileExtractClient) Hooks() []Hook {
	return c.hooks.FileExtract
}

// FindingClient is a client for the Finding schema.
type FindingClient struct {
	config
}

// NewFindingClient returns a client for the Finding from the given config.
func NewFindingClient(c config) *FindingClient {
	return &FindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `finding.Hooks(f(g(h())))`.
func (c *FindingClient) Use(hooks ...Hook) {
	c.hooks.Finding = append(c.hooks.Finding, hooks...)
}

// Create returns a create builder for Finding.
func (c *FindingClient) Create() *FindingCreate {
	mutation := newFindingMutation(c.config, OpCreate)
	return &FindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Finding entities.
func (c *FindingClient) CreateBulk(builders ...*FindingCreate) *FindingCreateBulk {
	return &FindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Finding.
func (c *FindingClient) Update() *FindingUpdate {
	mutation := newFindingMutation(c.config, OpUpdate)
	return &FindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FindingClient) UpdateOne(f *Finding) *FindingUpdateOne {
	mutation := newFindingMutation(c.config, OpUpdateOne, withFinding(f))
	return &FindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FindingClient) UpdateOneID(id int) *FindingUpdateOne {
	mutation := newFindingMutation(c.config, OpUpdateOne, withFindingID(id))
	return &FindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Finding.
func (c *FindingClient) Delete() *FindingDelete {
	mutation := newFindingMutation(c.config, OpDelete)
	return &FindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FindingClient) DeleteOne(f *Finding) *FindingDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FindingClient) DeleteOneID(id int) *FindingDeleteOne {
	builder := c.Delete().Where(finding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FindingDeleteOne{builder}
}

// Query returns a query builder for Finding.
func (c *FindingClient) Query() *FindingQuery {
	return &FindingQuery{config: c.config}
}

// Get returns a Finding entity by its id.
func (c *FindingClient) Get(ctx context.Context, id int) (*Finding, error) {
	return c.Query().Where(finding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FindingClient) GetX(ctx context.Context, id int) *Finding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFindingToUser queries the FindingToUser edge of a Finding.
func (c *FindingClient) QueryFindingToUser(f *Finding) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(finding.Table, finding.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, finding.FindingToUserTable, finding.FindingToUserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFindingToTag queries the FindingToTag edge of a Finding.
func (c *FindingClient) QueryFindingToTag(f *Finding) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(finding.Table, finding.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, finding.FindingToTagTable, finding.FindingToTagColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFindingToHost queries the FindingToHost edge of a Finding.
func (c *FindingClient) QueryFindingToHost(f *Finding) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(finding.Table, finding.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, finding.FindingToHostTable, finding.FindingToHostColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFindingToScript queries the FindingToScript edge of a Finding.
func (c *FindingClient) QueryFindingToScript(f *Finding) *ScriptQuery {
	query := &ScriptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(finding.Table, finding.FieldID, id),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, finding.FindingToScriptTable, finding.FindingToScriptPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFindingToEnvironment queries the FindingToEnvironment edge of a Finding.
func (c *FindingClient) QueryFindingToEnvironment(f *Finding) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(finding.Table, finding.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, finding.FindingToEnvironmentTable, finding.FindingToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FindingClient) Hooks() []Hook {
	return c.hooks.Finding
}

// GinFileMiddlewareClient is a client for the GinFileMiddleware schema.
type GinFileMiddlewareClient struct {
	config
}

// NewGinFileMiddlewareClient returns a client for the GinFileMiddleware from the given config.
func NewGinFileMiddlewareClient(c config) *GinFileMiddlewareClient {
	return &GinFileMiddlewareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ginfilemiddleware.Hooks(f(g(h())))`.
func (c *GinFileMiddlewareClient) Use(hooks ...Hook) {
	c.hooks.GinFileMiddleware = append(c.hooks.GinFileMiddleware, hooks...)
}

// Create returns a create builder for GinFileMiddleware.
func (c *GinFileMiddlewareClient) Create() *GinFileMiddlewareCreate {
	mutation := newGinFileMiddlewareMutation(c.config, OpCreate)
	return &GinFileMiddlewareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GinFileMiddleware entities.
func (c *GinFileMiddlewareClient) CreateBulk(builders ...*GinFileMiddlewareCreate) *GinFileMiddlewareCreateBulk {
	return &GinFileMiddlewareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GinFileMiddleware.
func (c *GinFileMiddlewareClient) Update() *GinFileMiddlewareUpdate {
	mutation := newGinFileMiddlewareMutation(c.config, OpUpdate)
	return &GinFileMiddlewareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GinFileMiddlewareClient) UpdateOne(gfm *GinFileMiddleware) *GinFileMiddlewareUpdateOne {
	mutation := newGinFileMiddlewareMutation(c.config, OpUpdateOne, withGinFileMiddleware(gfm))
	return &GinFileMiddlewareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GinFileMiddlewareClient) UpdateOneID(id int) *GinFileMiddlewareUpdateOne {
	mutation := newGinFileMiddlewareMutation(c.config, OpUpdateOne, withGinFileMiddlewareID(id))
	return &GinFileMiddlewareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GinFileMiddleware.
func (c *GinFileMiddlewareClient) Delete() *GinFileMiddlewareDelete {
	mutation := newGinFileMiddlewareMutation(c.config, OpDelete)
	return &GinFileMiddlewareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GinFileMiddlewareClient) DeleteOne(gfm *GinFileMiddleware) *GinFileMiddlewareDeleteOne {
	return c.DeleteOneID(gfm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GinFileMiddlewareClient) DeleteOneID(id int) *GinFileMiddlewareDeleteOne {
	builder := c.Delete().Where(ginfilemiddleware.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GinFileMiddlewareDeleteOne{builder}
}

// Query returns a query builder for GinFileMiddleware.
func (c *GinFileMiddlewareClient) Query() *GinFileMiddlewareQuery {
	return &GinFileMiddlewareQuery{config: c.config}
}

// Get returns a GinFileMiddleware entity by its id.
func (c *GinFileMiddlewareClient) Get(ctx context.Context, id int) (*GinFileMiddleware, error) {
	return c.Query().Where(ginfilemiddleware.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GinFileMiddlewareClient) GetX(ctx context.Context, id int) *GinFileMiddleware {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGinFileMiddlewareToProvisionedHost queries the GinFileMiddlewareToProvisionedHost edge of a GinFileMiddleware.
func (c *GinFileMiddlewareClient) QueryGinFileMiddlewareToProvisionedHost(gfm *GinFileMiddleware) *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gfm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ginfilemiddleware.Table, ginfilemiddleware.FieldID, id),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ginfilemiddleware.GinFileMiddlewareToProvisionedHostTable, ginfilemiddleware.GinFileMiddlewareToProvisionedHostColumn),
		)
		fromV = sqlgraph.Neighbors(gfm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGinFileMiddlewareToProvisioningStep queries the GinFileMiddlewareToProvisioningStep edge of a GinFileMiddleware.
func (c *GinFileMiddlewareClient) QueryGinFileMiddlewareToProvisioningStep(gfm *GinFileMiddleware) *ProvisioningStepQuery {
	query := &ProvisioningStepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gfm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ginfilemiddleware.Table, ginfilemiddleware.FieldID, id),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ginfilemiddleware.GinFileMiddlewareToProvisioningStepTable, ginfilemiddleware.GinFileMiddlewareToProvisioningStepColumn),
		)
		fromV = sqlgraph.Neighbors(gfm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GinFileMiddlewareClient) Hooks() []Hook {
	return c.hooks.GinFileMiddleware
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Create returns a create builder for Host.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id int) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HostClient) DeleteOneID(id int) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{config: c.config}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id int) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id int) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostToDisk queries the HostToDisk edge of a Host.
func (c *HostClient) QueryHostToDisk(h *Host) *DiskQuery {
	query := &DiskQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(disk.Table, disk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, host.HostToDiskTable, host.HostToDiskPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostToUser queries the HostToUser edge of a Host.
func (c *HostClient) QueryHostToUser(h *Host) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.HostToUserTable, host.HostToUserColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostToTag queries the HostToTag edge of a Host.
func (c *HostClient) QueryHostToTag(h *Host) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.HostToTagTable, host.HostToTagColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostToEnvironment queries the HostToEnvironment edge of a Host.
func (c *HostClient) QueryHostToEnvironment(h *Host) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, host.HostToEnvironmentTable, host.HostToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostToIncludedNetwork queries the HostToIncludedNetwork edge of a Host.
func (c *HostClient) QueryHostToIncludedNetwork(h *Host) *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, host.HostToIncludedNetworkTable, host.HostToIncludedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependOnHostToHostDependency queries the DependOnHostToHostDependency edge of a Host.
func (c *HostClient) QueryDependOnHostToHostDependency(h *Host) *HostDependencyQuery {
	query := &HostDependencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, host.DependOnHostToHostDependencyTable, host.DependOnHostToHostDependencyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependByHostToHostDependency queries the DependByHostToHostDependency edge of a Host.
func (c *HostClient) QueryDependByHostToHostDependency(h *Host) *HostDependencyQuery {
	query := &HostDependencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, host.DependByHostToHostDependencyTable, host.DependByHostToHostDependencyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// HostDependencyClient is a client for the HostDependency schema.
type HostDependencyClient struct {
	config
}

// NewHostDependencyClient returns a client for the HostDependency from the given config.
func NewHostDependencyClient(c config) *HostDependencyClient {
	return &HostDependencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostdependency.Hooks(f(g(h())))`.
func (c *HostDependencyClient) Use(hooks ...Hook) {
	c.hooks.HostDependency = append(c.hooks.HostDependency, hooks...)
}

// Create returns a create builder for HostDependency.
func (c *HostDependencyClient) Create() *HostDependencyCreate {
	mutation := newHostDependencyMutation(c.config, OpCreate)
	return &HostDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostDependency entities.
func (c *HostDependencyClient) CreateBulk(builders ...*HostDependencyCreate) *HostDependencyCreateBulk {
	return &HostDependencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostDependency.
func (c *HostDependencyClient) Update() *HostDependencyUpdate {
	mutation := newHostDependencyMutation(c.config, OpUpdate)
	return &HostDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostDependencyClient) UpdateOne(hd *HostDependency) *HostDependencyUpdateOne {
	mutation := newHostDependencyMutation(c.config, OpUpdateOne, withHostDependency(hd))
	return &HostDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostDependencyClient) UpdateOneID(id int) *HostDependencyUpdateOne {
	mutation := newHostDependencyMutation(c.config, OpUpdateOne, withHostDependencyID(id))
	return &HostDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostDependency.
func (c *HostDependencyClient) Delete() *HostDependencyDelete {
	mutation := newHostDependencyMutation(c.config, OpDelete)
	return &HostDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HostDependencyClient) DeleteOne(hd *HostDependency) *HostDependencyDeleteOne {
	return c.DeleteOneID(hd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HostDependencyClient) DeleteOneID(id int) *HostDependencyDeleteOne {
	builder := c.Delete().Where(hostdependency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDependencyDeleteOne{builder}
}

// Query returns a query builder for HostDependency.
func (c *HostDependencyClient) Query() *HostDependencyQuery {
	return &HostDependencyQuery{config: c.config}
}

// Get returns a HostDependency entity by its id.
func (c *HostDependencyClient) Get(ctx context.Context, id int) (*HostDependency, error) {
	return c.Query().Where(hostdependency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostDependencyClient) GetX(ctx context.Context, id int) *HostDependency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostDependencyToDependOnHost queries the HostDependencyToDependOnHost edge of a HostDependency.
func (c *HostDependencyClient) QueryHostDependencyToDependOnHost(hd *HostDependency) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := hd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hostdependency.HostDependencyToDependOnHostTable, hostdependency.HostDependencyToDependOnHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostDependencyToDependByHost queries the HostDependencyToDependByHost edge of a HostDependency.
func (c *HostDependencyClient) QueryHostDependencyToDependByHost(hd *HostDependency) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := hd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hostdependency.HostDependencyToDependByHostTable, hostdependency.HostDependencyToDependByHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostDependencyToNetwork queries the HostDependencyToNetwork edge of a HostDependency.
func (c *HostDependencyClient) QueryHostDependencyToNetwork(hd *HostDependency) *NetworkQuery {
	query := &NetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := hd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hostdependency.HostDependencyToNetworkTable, hostdependency.HostDependencyToNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostDependencyToEnvironment queries the HostDependencyToEnvironment edge of a HostDependency.
func (c *HostDependencyClient) QueryHostDependencyToEnvironment(hd *HostDependency) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := hd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostdependency.Table, hostdependency.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, hostdependency.HostDependencyToEnvironmentTable, hostdependency.HostDependencyToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(hd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostDependencyClient) Hooks() []Hook {
	return c.hooks.HostDependency
}

// IdentityClient is a client for the Identity schema.
type IdentityClient struct {
	config
}

// NewIdentityClient returns a client for the Identity from the given config.
func NewIdentityClient(c config) *IdentityClient {
	return &IdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identity.Hooks(f(g(h())))`.
func (c *IdentityClient) Use(hooks ...Hook) {
	c.hooks.Identity = append(c.hooks.Identity, hooks...)
}

// Create returns a create builder for Identity.
func (c *IdentityClient) Create() *IdentityCreate {
	mutation := newIdentityMutation(c.config, OpCreate)
	return &IdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Identity entities.
func (c *IdentityClient) CreateBulk(builders ...*IdentityCreate) *IdentityCreateBulk {
	return &IdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Identity.
func (c *IdentityClient) Update() *IdentityUpdate {
	mutation := newIdentityMutation(c.config, OpUpdate)
	return &IdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityClient) UpdateOne(i *Identity) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentity(i))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityClient) UpdateOneID(id int) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentityID(id))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Identity.
func (c *IdentityClient) Delete() *IdentityDelete {
	mutation := newIdentityMutation(c.config, OpDelete)
	return &IdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IdentityClient) DeleteOne(i *Identity) *IdentityDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IdentityClient) DeleteOneID(id int) *IdentityDeleteOne {
	builder := c.Delete().Where(identity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityDeleteOne{builder}
}

// Query returns a query builder for Identity.
func (c *IdentityClient) Query() *IdentityQuery {
	return &IdentityQuery{config: c.config}
}

// Get returns a Identity entity by its id.
func (c *IdentityClient) Get(ctx context.Context, id int) (*Identity, error) {
	return c.Query().Where(identity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityClient) GetX(ctx context.Context, id int) *Identity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIdentityToEnvironment queries the IdentityToEnvironment edge of a Identity.
func (c *IdentityClient) QueryIdentityToEnvironment(i *Identity) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(identity.Table, identity.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, identity.IdentityToEnvironmentTable, identity.IdentityToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdentityClient) Hooks() []Hook {
	return c.hooks.Identity
}

// IncludedNetworkClient is a client for the IncludedNetwork schema.
type IncludedNetworkClient struct {
	config
}

// NewIncludedNetworkClient returns a client for the IncludedNetwork from the given config.
func NewIncludedNetworkClient(c config) *IncludedNetworkClient {
	return &IncludedNetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `includednetwork.Hooks(f(g(h())))`.
func (c *IncludedNetworkClient) Use(hooks ...Hook) {
	c.hooks.IncludedNetwork = append(c.hooks.IncludedNetwork, hooks...)
}

// Create returns a create builder for IncludedNetwork.
func (c *IncludedNetworkClient) Create() *IncludedNetworkCreate {
	mutation := newIncludedNetworkMutation(c.config, OpCreate)
	return &IncludedNetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IncludedNetwork entities.
func (c *IncludedNetworkClient) CreateBulk(builders ...*IncludedNetworkCreate) *IncludedNetworkCreateBulk {
	return &IncludedNetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IncludedNetwork.
func (c *IncludedNetworkClient) Update() *IncludedNetworkUpdate {
	mutation := newIncludedNetworkMutation(c.config, OpUpdate)
	return &IncludedNetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IncludedNetworkClient) UpdateOne(in *IncludedNetwork) *IncludedNetworkUpdateOne {
	mutation := newIncludedNetworkMutation(c.config, OpUpdateOne, withIncludedNetwork(in))
	return &IncludedNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IncludedNetworkClient) UpdateOneID(id int) *IncludedNetworkUpdateOne {
	mutation := newIncludedNetworkMutation(c.config, OpUpdateOne, withIncludedNetworkID(id))
	return &IncludedNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IncludedNetwork.
func (c *IncludedNetworkClient) Delete() *IncludedNetworkDelete {
	mutation := newIncludedNetworkMutation(c.config, OpDelete)
	return &IncludedNetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IncludedNetworkClient) DeleteOne(in *IncludedNetwork) *IncludedNetworkDeleteOne {
	return c.DeleteOneID(in.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IncludedNetworkClient) DeleteOneID(id int) *IncludedNetworkDeleteOne {
	builder := c.Delete().Where(includednetwork.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IncludedNetworkDeleteOne{builder}
}

// Query returns a query builder for IncludedNetwork.
func (c *IncludedNetworkClient) Query() *IncludedNetworkQuery {
	return &IncludedNetworkQuery{config: c.config}
}

// Get returns a IncludedNetwork entity by its id.
func (c *IncludedNetworkClient) Get(ctx context.Context, id int) (*IncludedNetwork, error) {
	return c.Query().Where(includednetwork.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IncludedNetworkClient) GetX(ctx context.Context, id int) *IncludedNetwork {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIncludedNetworkToTag queries the IncludedNetworkToTag edge of a IncludedNetwork.
func (c *IncludedNetworkClient) QueryIncludedNetworkToTag(in *IncludedNetwork) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := in.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(includednetwork.Table, includednetwork.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, includednetwork.IncludedNetworkToTagTable, includednetwork.IncludedNetworkToTagColumn),
		)
		fromV = sqlgraph.Neighbors(in.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncludedNetworkToHost queries the IncludedNetworkToHost edge of a IncludedNetwork.
func (c *IncludedNetworkClient) QueryIncludedNetworkToHost(in *IncludedNetwork) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := in.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(includednetwork.Table, includednetwork.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, includednetwork.IncludedNetworkToHostTable, includednetwork.IncludedNetworkToHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(in.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncludedNetworkToNetwork queries the IncludedNetworkToNetwork edge of a IncludedNetwork.
func (c *IncludedNetworkClient) QueryIncludedNetworkToNetwork(in *IncludedNetwork) *NetworkQuery {
	query := &NetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := in.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(includednetwork.Table, includednetwork.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, includednetwork.IncludedNetworkToNetworkTable, includednetwork.IncludedNetworkToNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(in.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIncludedNetworkToEnvironment queries the IncludedNetworkToEnvironment edge of a IncludedNetwork.
func (c *IncludedNetworkClient) QueryIncludedNetworkToEnvironment(in *IncludedNetwork) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := in.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(includednetwork.Table, includednetwork.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, includednetwork.IncludedNetworkToEnvironmentTable, includednetwork.IncludedNetworkToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(in.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IncludedNetworkClient) Hooks() []Hook {
	return c.hooks.IncludedNetwork
}

// NetworkClient is a client for the Network schema.
type NetworkClient struct {
	config
}

// NewNetworkClient returns a client for the Network from the given config.
func NewNetworkClient(c config) *NetworkClient {
	return &NetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `network.Hooks(f(g(h())))`.
func (c *NetworkClient) Use(hooks ...Hook) {
	c.hooks.Network = append(c.hooks.Network, hooks...)
}

// Create returns a create builder for Network.
func (c *NetworkClient) Create() *NetworkCreate {
	mutation := newNetworkMutation(c.config, OpCreate)
	return &NetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Network entities.
func (c *NetworkClient) CreateBulk(builders ...*NetworkCreate) *NetworkCreateBulk {
	return &NetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Network.
func (c *NetworkClient) Update() *NetworkUpdate {
	mutation := newNetworkMutation(c.config, OpUpdate)
	return &NetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkClient) UpdateOne(n *Network) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetwork(n))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkClient) UpdateOneID(id int) *NetworkUpdateOne {
	mutation := newNetworkMutation(c.config, OpUpdateOne, withNetworkID(id))
	return &NetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Network.
func (c *NetworkClient) Delete() *NetworkDelete {
	mutation := newNetworkMutation(c.config, OpDelete)
	return &NetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NetworkClient) DeleteOne(n *Network) *NetworkDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NetworkClient) DeleteOneID(id int) *NetworkDeleteOne {
	builder := c.Delete().Where(network.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkDeleteOne{builder}
}

// Query returns a query builder for Network.
func (c *NetworkClient) Query() *NetworkQuery {
	return &NetworkQuery{config: c.config}
}

// Get returns a Network entity by its id.
func (c *NetworkClient) Get(ctx context.Context, id int) (*Network, error) {
	return c.Query().Where(network.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkClient) GetX(ctx context.Context, id int) *Network {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkToTag queries the NetworkToTag edge of a Network.
func (c *NetworkClient) QueryNetworkToTag(n *Network) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, network.NetworkToTagTable, network.NetworkToTagColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNetworkToEnvironment queries the NetworkToEnvironment edge of a Network.
func (c *NetworkClient) QueryNetworkToEnvironment(n *Network) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, network.NetworkToEnvironmentTable, network.NetworkToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNetworkToHostDependency queries the NetworkToHostDependency edge of a Network.
func (c *NetworkClient) QueryNetworkToHostDependency(n *Network) *HostDependencyQuery {
	query := &HostDependencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(hostdependency.Table, hostdependency.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, network.NetworkToHostDependencyTable, network.NetworkToHostDependencyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNetworkToIncludedNetwork queries the NetworkToIncludedNetwork edge of a Network.
func (c *NetworkClient) QueryNetworkToIncludedNetwork(n *Network) *IncludedNetworkQuery {
	query := &IncludedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(network.Table, network.FieldID, id),
			sqlgraph.To(includednetwork.Table, includednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, network.NetworkToIncludedNetworkTable, network.NetworkToIncludedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkClient) Hooks() []Hook {
	return c.hooks.Network
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Create returns a create builder for Plan.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id int) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PlanClient) DeleteOneID(id int) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{config: c.config}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id int) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id int) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrevPlan queries the PrevPlan edge of a Plan.
func (c *PlanClient) QueryPrevPlan(pl *Plan) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plan.PrevPlanTable, plan.PrevPlanColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNextPlan queries the NextPlan edge of a Plan.
func (c *PlanClient) QueryNextPlan(pl *Plan) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.NextPlanTable, plan.NextPlanColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanToBuild queries the PlanToBuild edge of a Plan.
func (c *PlanClient) QueryPlanToBuild(pl *Plan) *BuildQuery {
	query := &BuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlanToBuildTable, plan.PlanToBuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanToTeam queries the PlanToTeam edge of a Plan.
func (c *PlanClient) QueryPlanToTeam(pl *Plan) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlanToTeamTable, plan.PlanToTeamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanToProvisionedNetwork queries the PlanToProvisionedNetwork edge of a Plan.
func (c *PlanClient) QueryPlanToProvisionedNetwork(pl *Plan) *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlanToProvisionedNetworkTable, plan.PlanToProvisionedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanToProvisionedHost queries the PlanToProvisionedHost edge of a Plan.
func (c *PlanClient) QueryPlanToProvisionedHost(pl *Plan) *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlanToProvisionedHostTable, plan.PlanToProvisionedHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanToProvisioningStep queries the PlanToProvisioningStep edge of a Plan.
func (c *PlanClient) QueryPlanToProvisioningStep(pl *Plan) *ProvisioningStepQuery {
	query := &ProvisioningStepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlanToProvisioningStepTable, plan.PlanToProvisioningStepPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	return c.hooks.Plan
}

// ProvisionedHostClient is a client for the ProvisionedHost schema.
type ProvisionedHostClient struct {
	config
}

// NewProvisionedHostClient returns a client for the ProvisionedHost from the given config.
func NewProvisionedHostClient(c config) *ProvisionedHostClient {
	return &ProvisionedHostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provisionedhost.Hooks(f(g(h())))`.
func (c *ProvisionedHostClient) Use(hooks ...Hook) {
	c.hooks.ProvisionedHost = append(c.hooks.ProvisionedHost, hooks...)
}

// Create returns a create builder for ProvisionedHost.
func (c *ProvisionedHostClient) Create() *ProvisionedHostCreate {
	mutation := newProvisionedHostMutation(c.config, OpCreate)
	return &ProvisionedHostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProvisionedHost entities.
func (c *ProvisionedHostClient) CreateBulk(builders ...*ProvisionedHostCreate) *ProvisionedHostCreateBulk {
	return &ProvisionedHostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProvisionedHost.
func (c *ProvisionedHostClient) Update() *ProvisionedHostUpdate {
	mutation := newProvisionedHostMutation(c.config, OpUpdate)
	return &ProvisionedHostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvisionedHostClient) UpdateOne(ph *ProvisionedHost) *ProvisionedHostUpdateOne {
	mutation := newProvisionedHostMutation(c.config, OpUpdateOne, withProvisionedHost(ph))
	return &ProvisionedHostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvisionedHostClient) UpdateOneID(id int) *ProvisionedHostUpdateOne {
	mutation := newProvisionedHostMutation(c.config, OpUpdateOne, withProvisionedHostID(id))
	return &ProvisionedHostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProvisionedHost.
func (c *ProvisionedHostClient) Delete() *ProvisionedHostDelete {
	mutation := newProvisionedHostMutation(c.config, OpDelete)
	return &ProvisionedHostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProvisionedHostClient) DeleteOne(ph *ProvisionedHost) *ProvisionedHostDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProvisionedHostClient) DeleteOneID(id int) *ProvisionedHostDeleteOne {
	builder := c.Delete().Where(provisionedhost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvisionedHostDeleteOne{builder}
}

// Query returns a query builder for ProvisionedHost.
func (c *ProvisionedHostClient) Query() *ProvisionedHostQuery {
	return &ProvisionedHostQuery{config: c.config}
}

// Get returns a ProvisionedHost entity by its id.
func (c *ProvisionedHostClient) Get(ctx context.Context, id int) (*ProvisionedHost, error) {
	return c.Query().Where(provisionedhost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvisionedHostClient) GetX(ctx context.Context, id int) *ProvisionedHost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvisionedHostToTag queries the ProvisionedHostToTag edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToTag(ph *ProvisionedHost) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionedhost.ProvisionedHostToTagTable, provisionedhost.ProvisionedHostToTagColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToStatus queries the ProvisionedHostToStatus edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToStatus(ph *ProvisionedHost) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionedhost.ProvisionedHostToStatusTable, provisionedhost.ProvisionedHostToStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToProvisionedNetwork queries the ProvisionedHostToProvisionedNetwork edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToProvisionedNetwork(ph *ProvisionedHost) *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisionedhost.ProvisionedHostToProvisionedNetworkTable, provisionedhost.ProvisionedHostToProvisionedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToHost queries the ProvisionedHostToHost edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToHost(ph *ProvisionedHost) *HostQuery {
	query := &HostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionedhost.ProvisionedHostToHostTable, provisionedhost.ProvisionedHostToHostColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToProvisioningStep queries the ProvisionedHostToProvisioningStep edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToProvisioningStep(ph *ProvisionedHost) *ProvisioningStepQuery {
	query := &ProvisioningStepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(provisioningstep.Table, provisioningstep.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionedhost.ProvisionedHostToProvisioningStepTable, provisionedhost.ProvisionedHostToProvisioningStepPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToAgentStatus queries the ProvisionedHostToAgentStatus edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToAgentStatus(ph *ProvisionedHost) *AgentStatusQuery {
	query := &AgentStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(agentstatus.Table, agentstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionedhost.ProvisionedHostToAgentStatusTable, provisionedhost.ProvisionedHostToAgentStatusPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToPlan queries the ProvisionedHostToPlan edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToPlan(ph *ProvisionedHost) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionedhost.ProvisionedHostToPlanTable, provisionedhost.ProvisionedHostToPlanPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedHostToGinFileMiddleware queries the ProvisionedHostToGinFileMiddleware edge of a ProvisionedHost.
func (c *ProvisionedHostClient) QueryProvisionedHostToGinFileMiddleware(ph *ProvisionedHost) *GinFileMiddlewareQuery {
	query := &GinFileMiddlewareQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionedhost.Table, provisionedhost.FieldID, id),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisionedhost.ProvisionedHostToGinFileMiddlewareTable, provisionedhost.ProvisionedHostToGinFileMiddlewareColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvisionedHostClient) Hooks() []Hook {
	return c.hooks.ProvisionedHost
}

// ProvisionedNetworkClient is a client for the ProvisionedNetwork schema.
type ProvisionedNetworkClient struct {
	config
}

// NewProvisionedNetworkClient returns a client for the ProvisionedNetwork from the given config.
func NewProvisionedNetworkClient(c config) *ProvisionedNetworkClient {
	return &ProvisionedNetworkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provisionednetwork.Hooks(f(g(h())))`.
func (c *ProvisionedNetworkClient) Use(hooks ...Hook) {
	c.hooks.ProvisionedNetwork = append(c.hooks.ProvisionedNetwork, hooks...)
}

// Create returns a create builder for ProvisionedNetwork.
func (c *ProvisionedNetworkClient) Create() *ProvisionedNetworkCreate {
	mutation := newProvisionedNetworkMutation(c.config, OpCreate)
	return &ProvisionedNetworkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProvisionedNetwork entities.
func (c *ProvisionedNetworkClient) CreateBulk(builders ...*ProvisionedNetworkCreate) *ProvisionedNetworkCreateBulk {
	return &ProvisionedNetworkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProvisionedNetwork.
func (c *ProvisionedNetworkClient) Update() *ProvisionedNetworkUpdate {
	mutation := newProvisionedNetworkMutation(c.config, OpUpdate)
	return &ProvisionedNetworkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvisionedNetworkClient) UpdateOne(pn *ProvisionedNetwork) *ProvisionedNetworkUpdateOne {
	mutation := newProvisionedNetworkMutation(c.config, OpUpdateOne, withProvisionedNetwork(pn))
	return &ProvisionedNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvisionedNetworkClient) UpdateOneID(id int) *ProvisionedNetworkUpdateOne {
	mutation := newProvisionedNetworkMutation(c.config, OpUpdateOne, withProvisionedNetworkID(id))
	return &ProvisionedNetworkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProvisionedNetwork.
func (c *ProvisionedNetworkClient) Delete() *ProvisionedNetworkDelete {
	mutation := newProvisionedNetworkMutation(c.config, OpDelete)
	return &ProvisionedNetworkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProvisionedNetworkClient) DeleteOne(pn *ProvisionedNetwork) *ProvisionedNetworkDeleteOne {
	return c.DeleteOneID(pn.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProvisionedNetworkClient) DeleteOneID(id int) *ProvisionedNetworkDeleteOne {
	builder := c.Delete().Where(provisionednetwork.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvisionedNetworkDeleteOne{builder}
}

// Query returns a query builder for ProvisionedNetwork.
func (c *ProvisionedNetworkClient) Query() *ProvisionedNetworkQuery {
	return &ProvisionedNetworkQuery{config: c.config}
}

// Get returns a ProvisionedNetwork entity by its id.
func (c *ProvisionedNetworkClient) Get(ctx context.Context, id int) (*ProvisionedNetwork, error) {
	return c.Query().Where(provisionednetwork.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvisionedNetworkClient) GetX(ctx context.Context, id int) *ProvisionedNetwork {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvisionedNetworkToTag queries the ProvisionedNetworkToTag edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToTag(pn *ProvisionedNetwork) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToTagTable, provisionednetwork.ProvisionedNetworkToTagColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToStatus queries the ProvisionedNetworkToStatus edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToStatus(pn *ProvisionedNetwork) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToStatusTable, provisionednetwork.ProvisionedNetworkToStatusColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToNetwork queries the ProvisionedNetworkToNetwork edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToNetwork(pn *ProvisionedNetwork) *NetworkQuery {
	query := &NetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(network.Table, network.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisionednetwork.ProvisionedNetworkToNetworkTable, provisionednetwork.ProvisionedNetworkToNetworkColumn),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToBuild queries the ProvisionedNetworkToBuild edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToBuild(pn *ProvisionedNetwork) *BuildQuery {
	query := &BuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToBuildTable, provisionednetwork.ProvisionedNetworkToBuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToTeam queries the ProvisionedNetworkToTeam edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToTeam(pn *ProvisionedNetwork) *TeamQuery {
	query := &TeamQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisionednetwork.ProvisionedNetworkToTeamTable, provisionednetwork.ProvisionedNetworkToTeamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToProvisionedHost queries the ProvisionedNetworkToProvisionedHost edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToProvisionedHost(pn *ProvisionedNetwork) *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToProvisionedHostTable, provisionednetwork.ProvisionedNetworkToProvisionedHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisionedNetworkToPlan queries the ProvisionedNetworkToPlan edge of a ProvisionedNetwork.
func (c *ProvisionedNetworkClient) QueryProvisionedNetworkToPlan(pn *ProvisionedNetwork) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisionednetwork.Table, provisionednetwork.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisionednetwork.ProvisionedNetworkToPlanTable, provisionednetwork.ProvisionedNetworkToPlanPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvisionedNetworkClient) Hooks() []Hook {
	return c.hooks.ProvisionedNetwork
}

// ProvisioningStepClient is a client for the ProvisioningStep schema.
type ProvisioningStepClient struct {
	config
}

// NewProvisioningStepClient returns a client for the ProvisioningStep from the given config.
func NewProvisioningStepClient(c config) *ProvisioningStepClient {
	return &ProvisioningStepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provisioningstep.Hooks(f(g(h())))`.
func (c *ProvisioningStepClient) Use(hooks ...Hook) {
	c.hooks.ProvisioningStep = append(c.hooks.ProvisioningStep, hooks...)
}

// Create returns a create builder for ProvisioningStep.
func (c *ProvisioningStepClient) Create() *ProvisioningStepCreate {
	mutation := newProvisioningStepMutation(c.config, OpCreate)
	return &ProvisioningStepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProvisioningStep entities.
func (c *ProvisioningStepClient) CreateBulk(builders ...*ProvisioningStepCreate) *ProvisioningStepCreateBulk {
	return &ProvisioningStepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProvisioningStep.
func (c *ProvisioningStepClient) Update() *ProvisioningStepUpdate {
	mutation := newProvisioningStepMutation(c.config, OpUpdate)
	return &ProvisioningStepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProvisioningStepClient) UpdateOne(ps *ProvisioningStep) *ProvisioningStepUpdateOne {
	mutation := newProvisioningStepMutation(c.config, OpUpdateOne, withProvisioningStep(ps))
	return &ProvisioningStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProvisioningStepClient) UpdateOneID(id int) *ProvisioningStepUpdateOne {
	mutation := newProvisioningStepMutation(c.config, OpUpdateOne, withProvisioningStepID(id))
	return &ProvisioningStepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProvisioningStep.
func (c *ProvisioningStepClient) Delete() *ProvisioningStepDelete {
	mutation := newProvisioningStepMutation(c.config, OpDelete)
	return &ProvisioningStepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProvisioningStepClient) DeleteOne(ps *ProvisioningStep) *ProvisioningStepDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProvisioningStepClient) DeleteOneID(id int) *ProvisioningStepDeleteOne {
	builder := c.Delete().Where(provisioningstep.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProvisioningStepDeleteOne{builder}
}

// Query returns a query builder for ProvisioningStep.
func (c *ProvisioningStepClient) Query() *ProvisioningStepQuery {
	return &ProvisioningStepQuery{config: c.config}
}

// Get returns a ProvisioningStep entity by its id.
func (c *ProvisioningStepClient) Get(ctx context.Context, id int) (*ProvisioningStep, error) {
	return c.Query().Where(provisioningstep.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProvisioningStepClient) GetX(ctx context.Context, id int) *ProvisioningStep {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvisioningStepToTag queries the ProvisioningStepToTag edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToTag(ps *ProvisioningStep) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToTagTable, provisioningstep.ProvisioningStepToTagColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToStatus queries the ProvisioningStepToStatus edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToStatus(ps *ProvisioningStep) *StatusQuery {
	query := &StatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToStatusTable, provisioningstep.ProvisioningStepToStatusColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToProvisionedHost queries the ProvisioningStepToProvisionedHost edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToProvisionedHost(ps *ProvisioningStep) *ProvisionedHostQuery {
	query := &ProvisionedHostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(provisionedhost.Table, provisionedhost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, provisioningstep.ProvisioningStepToProvisionedHostTable, provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToScript queries the ProvisioningStepToScript edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToScript(ps *ProvisioningStep) *ScriptQuery {
	query := &ScriptQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToScriptTable, provisioningstep.ProvisioningStepToScriptColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToCommand queries the ProvisioningStepToCommand edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToCommand(ps *ProvisioningStep) *CommandQuery {
	query := &CommandQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(command.Table, command.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToCommandTable, provisioningstep.ProvisioningStepToCommandColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToDNSRecord queries the ProvisioningStepToDNSRecord edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToDNSRecord(ps *ProvisioningStep) *DNSRecordQuery {
	query := &DNSRecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(dnsrecord.Table, dnsrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToDNSRecordTable, provisioningstep.ProvisioningStepToDNSRecordColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToFileDelete queries the ProvisioningStepToFileDelete edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToFileDelete(ps *ProvisioningStep) *FileDeleteQuery {
	query := &FileDeleteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(filedelete.Table, filedelete.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToFileDeleteTable, provisioningstep.ProvisioningStepToFileDeleteColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToFileDownload queries the ProvisioningStepToFileDownload edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToFileDownload(ps *ProvisioningStep) *FileDownloadQuery {
	query := &FileDownloadQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(filedownload.Table, filedownload.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToFileDownloadTable, provisioningstep.ProvisioningStepToFileDownloadColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToFileExtract queries the ProvisioningStepToFileExtract edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToFileExtract(ps *ProvisioningStep) *FileExtractQuery {
	query := &FileExtractQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(fileextract.Table, fileextract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provisioningstep.ProvisioningStepToFileExtractTable, provisioningstep.ProvisioningStepToFileExtractColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToPlan queries the ProvisioningStepToPlan edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToPlan(ps *ProvisioningStep) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, provisioningstep.ProvisioningStepToPlanTable, provisioningstep.ProvisioningStepToPlanPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvisioningStepToGinFileMiddleware queries the ProvisioningStepToGinFileMiddleware edge of a ProvisioningStep.
func (c *ProvisioningStepClient) QueryProvisioningStepToGinFileMiddleware(ps *ProvisioningStep) *GinFileMiddlewareQuery {
	query := &GinFileMiddlewareQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provisioningstep.Table, provisioningstep.FieldID, id),
			sqlgraph.To(ginfilemiddleware.Table, ginfilemiddleware.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, provisioningstep.ProvisioningStepToGinFileMiddlewareTable, provisioningstep.ProvisioningStepToGinFileMiddlewareColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProvisioningStepClient) Hooks() []Hook {
	return c.hooks.ProvisioningStep
}

// ScriptClient is a client for the Script schema.
type ScriptClient struct {
	config
}

// NewScriptClient returns a client for the Script from the given config.
func NewScriptClient(c config) *ScriptClient {
	return &ScriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `script.Hooks(f(g(h())))`.
func (c *ScriptClient) Use(hooks ...Hook) {
	c.hooks.Script = append(c.hooks.Script, hooks...)
}

// Create returns a create builder for Script.
func (c *ScriptClient) Create() *ScriptCreate {
	mutation := newScriptMutation(c.config, OpCreate)
	return &ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Script entities.
func (c *ScriptClient) CreateBulk(builders ...*ScriptCreate) *ScriptCreateBulk {
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Script.
func (c *ScriptClient) Update() *ScriptUpdate {
	mutation := newScriptMutation(c.config, OpUpdate)
	return &ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptClient) UpdateOne(s *Script) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScript(s))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptClient) UpdateOneID(id int) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScriptID(id))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Script.
func (c *ScriptClient) Delete() *ScriptDelete {
	mutation := newScriptMutation(c.config, OpDelete)
	return &ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScriptClient) DeleteOne(s *Script) *ScriptDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScriptClient) DeleteOneID(id int) *ScriptDeleteOne {
	builder := c.Delete().Where(script.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptDeleteOne{builder}
}

// Query returns a query builder for Script.
func (c *ScriptClient) Query() *ScriptQuery {
	return &ScriptQuery{config: c.config}
}

// Get returns a Script entity by its id.
func (c *ScriptClient) Get(ctx context.Context, id int) (*Script, error) {
	return c.Query().Where(script.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptClient) GetX(ctx context.Context, id int) *Script {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScriptToTag queries the ScriptToTag edge of a Script.
func (c *ScriptClient) QueryScriptToTag(s *Script) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, script.ScriptToTagTable, script.ScriptToTagColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScriptToUser queries the ScriptToUser edge of a Script.
func (c *ScriptClient) QueryScriptToUser(s *Script) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, script.ScriptToUserTable, script.ScriptToUserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScriptToFinding queries the ScriptToFinding edge of a Script.
func (c *ScriptClient) QueryScriptToFinding(s *Script) *FindingQuery {
	query := &FindingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(finding.Table, finding.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, script.ScriptToFindingTable, script.ScriptToFindingPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScriptToEnvironment queries the ScriptToEnvironment edge of a Script.
func (c *ScriptClient) QueryScriptToEnvironment(s *Script) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, script.ScriptToEnvironmentTable, script.ScriptToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScriptClient) Hooks() []Hook {
	return c.hooks.Script
}

// StatusClient is a client for the Status schema.
type StatusClient struct {
	config
}

// NewStatusClient returns a client for the Status from the given config.
func NewStatusClient(c config) *StatusClient {
	return &StatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `status.Hooks(f(g(h())))`.
func (c *StatusClient) Use(hooks ...Hook) {
	c.hooks.Status = append(c.hooks.Status, hooks...)
}

// Create returns a create builder for Status.
func (c *StatusClient) Create() *StatusCreate {
	mutation := newStatusMutation(c.config, OpCreate)
	return &StatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Status entities.
func (c *StatusClient) CreateBulk(builders ...*StatusCreate) *StatusCreateBulk {
	return &StatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Status.
func (c *StatusClient) Update() *StatusUpdate {
	mutation := newStatusMutation(c.config, OpUpdate)
	return &StatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusClient) UpdateOne(s *Status) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatus(s))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusClient) UpdateOneID(id int) *StatusUpdateOne {
	mutation := newStatusMutation(c.config, OpUpdateOne, withStatusID(id))
	return &StatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Status.
func (c *StatusClient) Delete() *StatusDelete {
	mutation := newStatusMutation(c.config, OpDelete)
	return &StatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusClient) DeleteOne(s *Status) *StatusDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusClient) DeleteOneID(id int) *StatusDeleteOne {
	builder := c.Delete().Where(status.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusDeleteOne{builder}
}

// Query returns a query builder for Status.
func (c *StatusClient) Query() *StatusQuery {
	return &StatusQuery{config: c.config}
}

// Get returns a Status entity by its id.
func (c *StatusClient) Get(ctx context.Context, id int) (*Status, error) {
	return c.Query().Where(status.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusClient) GetX(ctx context.Context, id int) *Status {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatusToTag queries the StatusToTag edge of a Status.
func (c *StatusClient) QueryStatusToTag(s *Status) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(status.Table, status.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, status.StatusToTagTable, status.StatusToTagColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusClient) Hooks() []Hook {
	return c.hooks.Status
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{config: c.config}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Create returns a create builder for Team.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id int) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TeamClient) DeleteOneID(id int) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{config: c.config}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id int) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id int) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeamToUser queries the TeamToUser edge of a Team.
func (c *TeamClient) QueryTeamToUser(t *Team) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.TeamToUserTable, team.TeamToUserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamToBuild queries the TeamToBuild edge of a Team.
func (c *TeamClient) QueryTeamToBuild(t *Team) *BuildQuery {
	query := &BuildQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(build.Table, build.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, team.TeamToBuildTable, team.TeamToBuildPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamToEnvironment queries the TeamToEnvironment edge of a Team.
func (c *TeamClient) QueryTeamToEnvironment(t *Team) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, team.TeamToEnvironmentTable, team.TeamToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamToTag queries the TeamToTag edge of a Team.
func (c *TeamClient) QueryTeamToTag(t *Team) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.TeamToTagTable, team.TeamToTagColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamToProvisionedNetwork queries the TeamToProvisionedNetwork edge of a Team.
func (c *TeamClient) QueryTeamToProvisionedNetwork(t *Team) *ProvisionedNetworkQuery {
	query := &ProvisionedNetworkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(provisionednetwork.Table, provisionednetwork.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, team.TeamToProvisionedNetworkTable, team.TeamToProvisionedNetworkPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamToPlan queries the TeamToPlan edge of a Team.
func (c *TeamClient) QueryTeamToPlan(t *Team) *PlanQuery {
	query := &PlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, team.TeamToPlanTable, team.TeamToPlanPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserToTag queries the UserToTag edge of a User.
func (c *UserClient) QueryUserToTag(u *User) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserToTagTable, user.UserToTagColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserToEnvironment queries the UserToEnvironment edge of a User.
func (c *UserClient) QueryUserToEnvironment(u *User) *EnvironmentQuery {
	query := &EnvironmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(environment.Table, environment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.UserToEnvironmentTable, user.UserToEnvironmentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
