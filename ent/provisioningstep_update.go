// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/status"
	"github.com/gen0cide/laforge/ent/tag"
)

// ProvisioningStepUpdate is the builder for updating ProvisioningStep entities.
type ProvisioningStepUpdate struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// Where adds a new predicate for the builder.
func (psu *ProvisioningStepUpdate) Where(ps ...predicate.ProvisioningStep) *ProvisioningStepUpdate {
	psu.mutation.predicates = append(psu.mutation.predicates, ps...)
	return psu
}

// SetProvisionerType sets the provisioner_type field.
func (psu *ProvisioningStepUpdate) SetProvisionerType(s string) *ProvisioningStepUpdate {
	psu.mutation.SetProvisionerType(s)
	return psu
}

// SetStepNumber sets the step_number field.
func (psu *ProvisioningStepUpdate) SetStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.ResetStepNumber()
	psu.mutation.SetStepNumber(i)
	return psu
}

// AddStepNumber adds i to step_number.
func (psu *ProvisioningStepUpdate) AddStepNumber(i int) *ProvisioningStepUpdate {
	psu.mutation.AddStepNumber(i)
	return psu
}

// AddProvisioningStepToTagIDs adds the ProvisioningStepToTag edge to Tag by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToTagIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToTagIDs(ids...)
	return psu
}

// AddProvisioningStepToTag adds the ProvisioningStepToTag edges to Tag.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToTag(t ...*Tag) *ProvisioningStepUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psu.AddProvisioningStepToTagIDs(ids...)
}

// AddProvisioningStepToStatuIDs adds the ProvisioningStepToStatus edge to Status by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToStatuIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToStatuIDs(ids...)
	return psu
}

// AddProvisioningStepToStatus adds the ProvisioningStepToStatus edges to Status.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToStatus(s ...*Status) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.AddProvisioningStepToStatuIDs(ids...)
}

// AddProvisioningStepToProvisionedHostIDs adds the ProvisioningStepToProvisionedHost edge to ProvisionedHost by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToProvisionedHostIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToProvisionedHostIDs(ids...)
	return psu
}

// AddProvisioningStepToProvisionedHost adds the ProvisioningStepToProvisionedHost edges to ProvisionedHost.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.AddProvisioningStepToProvisionedHostIDs(ids...)
}

// AddProvisioningStepToScriptIDs adds the ProvisioningStepToScript edge to Script by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToScriptIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToScriptIDs(ids...)
	return psu
}

// AddProvisioningStepToScript adds the ProvisioningStepToScript edges to Script.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToScript(s ...*Script) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.AddProvisioningStepToScriptIDs(ids...)
}

// AddProvisioningStepToCommandIDs adds the ProvisioningStepToCommand edge to Command by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToCommandIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToCommandIDs(ids...)
	return psu
}

// AddProvisioningStepToCommand adds the ProvisioningStepToCommand edges to Command.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToCommand(c ...*Command) *ProvisioningStepUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddProvisioningStepToCommandIDs(ids...)
}

// AddProvisioningStepToDNSRecordIDs adds the ProvisioningStepToDNSRecord edge to DNSRecord by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToDNSRecordIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToDNSRecordIDs(ids...)
	return psu
}

// AddProvisioningStepToDNSRecord adds the ProvisioningStepToDNSRecord edges to DNSRecord.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psu.AddProvisioningStepToDNSRecordIDs(ids...)
}

// AddProvisioningStepToFileDeleteIDs adds the ProvisioningStepToFileDelete edge to FileDelete by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileDeleteIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToFileDeleteIDs(ids...)
	return psu
}

// AddProvisioningStepToFileDelete adds the ProvisioningStepToFileDelete edges to FileDelete.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileDelete(f ...*FileDelete) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddProvisioningStepToFileDeleteIDs(ids...)
}

// AddProvisioningStepToFileDownloadIDs adds the ProvisioningStepToFileDownload edge to FileDownload by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileDownloadIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToFileDownloadIDs(ids...)
	return psu
}

// AddProvisioningStepToFileDownload adds the ProvisioningStepToFileDownload edges to FileDownload.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileDownload(f ...*FileDownload) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddProvisioningStepToFileDownloadIDs(ids...)
}

// AddProvisioningStepToFileExtractIDs adds the ProvisioningStepToFileExtract edge to FileExtract by ids.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileExtractIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.AddProvisioningStepToFileExtractIDs(ids...)
	return psu
}

// AddProvisioningStepToFileExtract adds the ProvisioningStepToFileExtract edges to FileExtract.
func (psu *ProvisioningStepUpdate) AddProvisioningStepToFileExtract(f ...*FileExtract) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.AddProvisioningStepToFileExtractIDs(ids...)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psu *ProvisioningStepUpdate) Mutation() *ProvisioningStepMutation {
	return psu.mutation
}

// ClearProvisioningStepToTag clears all "ProvisioningStepToTag" edges to type Tag.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToTag() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToTag()
	return psu
}

// RemoveProvisioningStepToTagIDs removes the ProvisioningStepToTag edge to Tag by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToTagIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToTagIDs(ids...)
	return psu
}

// RemoveProvisioningStepToTag removes ProvisioningStepToTag edges to Tag.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToTag(t ...*Tag) *ProvisioningStepUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psu.RemoveProvisioningStepToTagIDs(ids...)
}

// ClearProvisioningStepToStatus clears all "ProvisioningStepToStatus" edges to type Status.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToStatus() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToStatus()
	return psu
}

// RemoveProvisioningStepToStatuIDs removes the ProvisioningStepToStatus edge to Status by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToStatuIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToStatuIDs(ids...)
	return psu
}

// RemoveProvisioningStepToStatus removes ProvisioningStepToStatus edges to Status.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToStatus(s ...*Status) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.RemoveProvisioningStepToStatuIDs(ids...)
}

// ClearProvisioningStepToProvisionedHost clears all "ProvisioningStepToProvisionedHost" edges to type ProvisionedHost.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToProvisionedHost() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToProvisionedHost()
	return psu
}

// RemoveProvisioningStepToProvisionedHostIDs removes the ProvisioningStepToProvisionedHost edge to ProvisionedHost by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToProvisionedHostIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToProvisionedHostIDs(ids...)
	return psu
}

// RemoveProvisioningStepToProvisionedHost removes ProvisioningStepToProvisionedHost edges to ProvisionedHost.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psu.RemoveProvisioningStepToProvisionedHostIDs(ids...)
}

// ClearProvisioningStepToScript clears all "ProvisioningStepToScript" edges to type Script.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToScript() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToScript()
	return psu
}

// RemoveProvisioningStepToScriptIDs removes the ProvisioningStepToScript edge to Script by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToScriptIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToScriptIDs(ids...)
	return psu
}

// RemoveProvisioningStepToScript removes ProvisioningStepToScript edges to Script.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToScript(s ...*Script) *ProvisioningStepUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psu.RemoveProvisioningStepToScriptIDs(ids...)
}

// ClearProvisioningStepToCommand clears all "ProvisioningStepToCommand" edges to type Command.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToCommand() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToCommand()
	return psu
}

// RemoveProvisioningStepToCommandIDs removes the ProvisioningStepToCommand edge to Command by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToCommandIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToCommandIDs(ids...)
	return psu
}

// RemoveProvisioningStepToCommand removes ProvisioningStepToCommand edges to Command.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToCommand(c ...*Command) *ProvisioningStepUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveProvisioningStepToCommandIDs(ids...)
}

// ClearProvisioningStepToDNSRecord clears all "ProvisioningStepToDNSRecord" edges to type DNSRecord.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToDNSRecord() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToDNSRecord()
	return psu
}

// RemoveProvisioningStepToDNSRecordIDs removes the ProvisioningStepToDNSRecord edge to DNSRecord by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToDNSRecordIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToDNSRecordIDs(ids...)
	return psu
}

// RemoveProvisioningStepToDNSRecord removes ProvisioningStepToDNSRecord edges to DNSRecord.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psu.RemoveProvisioningStepToDNSRecordIDs(ids...)
}

// ClearProvisioningStepToFileDelete clears all "ProvisioningStepToFileDelete" edges to type FileDelete.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileDelete() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileDelete()
	return psu
}

// RemoveProvisioningStepToFileDeleteIDs removes the ProvisioningStepToFileDelete edge to FileDelete by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileDeleteIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToFileDeleteIDs(ids...)
	return psu
}

// RemoveProvisioningStepToFileDelete removes ProvisioningStepToFileDelete edges to FileDelete.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileDelete(f ...*FileDelete) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemoveProvisioningStepToFileDeleteIDs(ids...)
}

// ClearProvisioningStepToFileDownload clears all "ProvisioningStepToFileDownload" edges to type FileDownload.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileDownload() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileDownload()
	return psu
}

// RemoveProvisioningStepToFileDownloadIDs removes the ProvisioningStepToFileDownload edge to FileDownload by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileDownloadIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToFileDownloadIDs(ids...)
	return psu
}

// RemoveProvisioningStepToFileDownload removes ProvisioningStepToFileDownload edges to FileDownload.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileDownload(f ...*FileDownload) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemoveProvisioningStepToFileDownloadIDs(ids...)
}

// ClearProvisioningStepToFileExtract clears all "ProvisioningStepToFileExtract" edges to type FileExtract.
func (psu *ProvisioningStepUpdate) ClearProvisioningStepToFileExtract() *ProvisioningStepUpdate {
	psu.mutation.ClearProvisioningStepToFileExtract()
	return psu
}

// RemoveProvisioningStepToFileExtractIDs removes the ProvisioningStepToFileExtract edge to FileExtract by ids.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileExtractIDs(ids ...int) *ProvisioningStepUpdate {
	psu.mutation.RemoveProvisioningStepToFileExtractIDs(ids...)
	return psu
}

// RemoveProvisioningStepToFileExtract removes ProvisioningStepToFileExtract edges to FileExtract.
func (psu *ProvisioningStepUpdate) RemoveProvisioningStepToFileExtract(f ...*FileExtract) *ProvisioningStepUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psu.RemoveProvisioningStepToFileExtractIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ProvisioningStepUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(psu.hooks) == 0 {
		affected, err = psu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psu.mutation = mutation
			affected, err = psu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(psu.hooks) - 1; i >= 0; i-- {
			mut = psu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ProvisioningStepUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ProvisioningStepUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psu *ProvisioningStepUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		},
	}
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.ProvisionerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldProvisionerType,
		})
	}
	if value, ok := psu.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psu.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if psu.mutation.ProvisioningStepToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToTagIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToStatusIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToScriptIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToCommandIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToDNSRecordIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToFileDeleteIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToFileDownloadIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedProvisioningStepToFileExtractIDs(); len(nodes) > 0 && !psu.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ProvisioningStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProvisioningStepUpdateOne is the builder for updating a single ProvisioningStep entity.
type ProvisioningStepUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProvisioningStepMutation
}

// SetProvisionerType sets the provisioner_type field.
func (psuo *ProvisioningStepUpdateOne) SetProvisionerType(s string) *ProvisioningStepUpdateOne {
	psuo.mutation.SetProvisionerType(s)
	return psuo
}

// SetStepNumber sets the step_number field.
func (psuo *ProvisioningStepUpdateOne) SetStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.ResetStepNumber()
	psuo.mutation.SetStepNumber(i)
	return psuo
}

// AddStepNumber adds i to step_number.
func (psuo *ProvisioningStepUpdateOne) AddStepNumber(i int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddStepNumber(i)
	return psuo
}

// AddProvisioningStepToTagIDs adds the ProvisioningStepToTag edge to Tag by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToTagIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToTagIDs(ids...)
	return psuo
}

// AddProvisioningStepToTag adds the ProvisioningStepToTag edges to Tag.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToTag(t ...*Tag) *ProvisioningStepUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psuo.AddProvisioningStepToTagIDs(ids...)
}

// AddProvisioningStepToStatuIDs adds the ProvisioningStepToStatus edge to Status by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToStatuIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToStatuIDs(ids...)
	return psuo
}

// AddProvisioningStepToStatus adds the ProvisioningStepToStatus edges to Status.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToStatus(s ...*Status) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.AddProvisioningStepToStatuIDs(ids...)
}

// AddProvisioningStepToProvisionedHostIDs adds the ProvisioningStepToProvisionedHost edge to ProvisionedHost by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToProvisionedHostIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToProvisionedHostIDs(ids...)
	return psuo
}

// AddProvisioningStepToProvisionedHost adds the ProvisioningStepToProvisionedHost edges to ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.AddProvisioningStepToProvisionedHostIDs(ids...)
}

// AddProvisioningStepToScriptIDs adds the ProvisioningStepToScript edge to Script by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToScriptIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToScriptIDs(ids...)
	return psuo
}

// AddProvisioningStepToScript adds the ProvisioningStepToScript edges to Script.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToScript(s ...*Script) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.AddProvisioningStepToScriptIDs(ids...)
}

// AddProvisioningStepToCommandIDs adds the ProvisioningStepToCommand edge to Command by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToCommandIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToCommandIDs(ids...)
	return psuo
}

// AddProvisioningStepToCommand adds the ProvisioningStepToCommand edges to Command.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToCommand(c ...*Command) *ProvisioningStepUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddProvisioningStepToCommandIDs(ids...)
}

// AddProvisioningStepToDNSRecordIDs adds the ProvisioningStepToDNSRecord edge to DNSRecord by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToDNSRecordIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToDNSRecordIDs(ids...)
	return psuo
}

// AddProvisioningStepToDNSRecord adds the ProvisioningStepToDNSRecord edges to DNSRecord.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psuo.AddProvisioningStepToDNSRecordIDs(ids...)
}

// AddProvisioningStepToFileDeleteIDs adds the ProvisioningStepToFileDelete edge to FileDelete by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileDeleteIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToFileDeleteIDs(ids...)
	return psuo
}

// AddProvisioningStepToFileDelete adds the ProvisioningStepToFileDelete edges to FileDelete.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileDelete(f ...*FileDelete) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddProvisioningStepToFileDeleteIDs(ids...)
}

// AddProvisioningStepToFileDownloadIDs adds the ProvisioningStepToFileDownload edge to FileDownload by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileDownloadIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToFileDownloadIDs(ids...)
	return psuo
}

// AddProvisioningStepToFileDownload adds the ProvisioningStepToFileDownload edges to FileDownload.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileDownload(f ...*FileDownload) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddProvisioningStepToFileDownloadIDs(ids...)
}

// AddProvisioningStepToFileExtractIDs adds the ProvisioningStepToFileExtract edge to FileExtract by ids.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileExtractIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.AddProvisioningStepToFileExtractIDs(ids...)
	return psuo
}

// AddProvisioningStepToFileExtract adds the ProvisioningStepToFileExtract edges to FileExtract.
func (psuo *ProvisioningStepUpdateOne) AddProvisioningStepToFileExtract(f ...*FileExtract) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.AddProvisioningStepToFileExtractIDs(ids...)
}

// Mutation returns the ProvisioningStepMutation object of the builder.
func (psuo *ProvisioningStepUpdateOne) Mutation() *ProvisioningStepMutation {
	return psuo.mutation
}

// ClearProvisioningStepToTag clears all "ProvisioningStepToTag" edges to type Tag.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToTag() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToTag()
	return psuo
}

// RemoveProvisioningStepToTagIDs removes the ProvisioningStepToTag edge to Tag by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToTagIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToTagIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToTag removes ProvisioningStepToTag edges to Tag.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToTag(t ...*Tag) *ProvisioningStepUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return psuo.RemoveProvisioningStepToTagIDs(ids...)
}

// ClearProvisioningStepToStatus clears all "ProvisioningStepToStatus" edges to type Status.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToStatus() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToStatus()
	return psuo
}

// RemoveProvisioningStepToStatuIDs removes the ProvisioningStepToStatus edge to Status by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToStatuIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToStatuIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToStatus removes ProvisioningStepToStatus edges to Status.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToStatus(s ...*Status) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.RemoveProvisioningStepToStatuIDs(ids...)
}

// ClearProvisioningStepToProvisionedHost clears all "ProvisioningStepToProvisionedHost" edges to type ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToProvisionedHost() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToProvisionedHost()
	return psuo
}

// RemoveProvisioningStepToProvisionedHostIDs removes the ProvisioningStepToProvisionedHost edge to ProvisionedHost by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToProvisionedHostIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToProvisionedHostIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToProvisionedHost removes ProvisioningStepToProvisionedHost edges to ProvisionedHost.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToProvisionedHost(p ...*ProvisionedHost) *ProvisioningStepUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psuo.RemoveProvisioningStepToProvisionedHostIDs(ids...)
}

// ClearProvisioningStepToScript clears all "ProvisioningStepToScript" edges to type Script.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToScript() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToScript()
	return psuo
}

// RemoveProvisioningStepToScriptIDs removes the ProvisioningStepToScript edge to Script by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToScriptIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToScriptIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToScript removes ProvisioningStepToScript edges to Script.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToScript(s ...*Script) *ProvisioningStepUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return psuo.RemoveProvisioningStepToScriptIDs(ids...)
}

// ClearProvisioningStepToCommand clears all "ProvisioningStepToCommand" edges to type Command.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToCommand() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToCommand()
	return psuo
}

// RemoveProvisioningStepToCommandIDs removes the ProvisioningStepToCommand edge to Command by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToCommandIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToCommandIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToCommand removes ProvisioningStepToCommand edges to Command.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToCommand(c ...*Command) *ProvisioningStepUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveProvisioningStepToCommandIDs(ids...)
}

// ClearProvisioningStepToDNSRecord clears all "ProvisioningStepToDNSRecord" edges to type DNSRecord.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToDNSRecord() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToDNSRecord()
	return psuo
}

// RemoveProvisioningStepToDNSRecordIDs removes the ProvisioningStepToDNSRecord edge to DNSRecord by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToDNSRecordIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToDNSRecordIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToDNSRecord removes ProvisioningStepToDNSRecord edges to DNSRecord.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToDNSRecord(d ...*DNSRecord) *ProvisioningStepUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return psuo.RemoveProvisioningStepToDNSRecordIDs(ids...)
}

// ClearProvisioningStepToFileDelete clears all "ProvisioningStepToFileDelete" edges to type FileDelete.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileDelete() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileDelete()
	return psuo
}

// RemoveProvisioningStepToFileDeleteIDs removes the ProvisioningStepToFileDelete edge to FileDelete by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileDeleteIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToFileDeleteIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToFileDelete removes ProvisioningStepToFileDelete edges to FileDelete.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileDelete(f ...*FileDelete) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemoveProvisioningStepToFileDeleteIDs(ids...)
}

// ClearProvisioningStepToFileDownload clears all "ProvisioningStepToFileDownload" edges to type FileDownload.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileDownload() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileDownload()
	return psuo
}

// RemoveProvisioningStepToFileDownloadIDs removes the ProvisioningStepToFileDownload edge to FileDownload by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileDownloadIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToFileDownloadIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToFileDownload removes ProvisioningStepToFileDownload edges to FileDownload.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileDownload(f ...*FileDownload) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemoveProvisioningStepToFileDownloadIDs(ids...)
}

// ClearProvisioningStepToFileExtract clears all "ProvisioningStepToFileExtract" edges to type FileExtract.
func (psuo *ProvisioningStepUpdateOne) ClearProvisioningStepToFileExtract() *ProvisioningStepUpdateOne {
	psuo.mutation.ClearProvisioningStepToFileExtract()
	return psuo
}

// RemoveProvisioningStepToFileExtractIDs removes the ProvisioningStepToFileExtract edge to FileExtract by ids.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileExtractIDs(ids ...int) *ProvisioningStepUpdateOne {
	psuo.mutation.RemoveProvisioningStepToFileExtractIDs(ids...)
	return psuo
}

// RemoveProvisioningStepToFileExtract removes ProvisioningStepToFileExtract edges to FileExtract.
func (psuo *ProvisioningStepUpdateOne) RemoveProvisioningStepToFileExtract(f ...*FileExtract) *ProvisioningStepUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return psuo.RemoveProvisioningStepToFileExtractIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (psuo *ProvisioningStepUpdateOne) Save(ctx context.Context) (*ProvisioningStep, error) {
	var (
		err  error
		node *ProvisioningStep
	)
	if len(psuo.hooks) == 0 {
		node, err = psuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvisioningStepMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			psuo.mutation = mutation
			node, err = psuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(psuo.hooks) - 1; i >= 0; i-- {
			mut = psuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, psuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) SaveX(ctx context.Context) *ProvisioningStep {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ProvisioningStepUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ProvisioningStepUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (psuo *ProvisioningStepUpdateOne) sqlSave(ctx context.Context) (_node *ProvisioningStep, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   provisioningstep.Table,
			Columns: provisioningstep.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: provisioningstep.FieldID,
			},
		},
	}
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProvisioningStep.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := psuo.mutation.ProvisionerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: provisioningstep.FieldProvisionerType,
		})
	}
	if value, ok := psuo.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if value, ok := psuo.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: provisioningstep.FieldStepNumber,
		})
	}
	if psuo.mutation.ProvisioningStepToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToTagIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToTagTable,
			Columns: []string{provisioningstep.ProvisioningStepToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToStatusIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToStatusTable,
			Columns: []string{provisioningstep.ProvisioningStepToStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToProvisionedHostTable,
			Columns: provisioningstep.ProvisioningStepToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToScriptIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToScriptTable,
			Columns: []string{provisioningstep.ProvisioningStepToScriptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToCommandIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToCommandTable,
			Columns: []string{provisioningstep.ProvisioningStepToCommandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToDNSRecordIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToDNSRecordTable,
			Columns: []string{provisioningstep.ProvisioningStepToDNSRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToFileDeleteIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDeleteTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDeleteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToFileDownloadIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileDownloadTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileDownloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedProvisioningStepToFileExtractIDs(); len(nodes) > 0 && !psuo.mutation.ProvisioningStepToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ProvisioningStepToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   provisioningstep.ProvisioningStepToFileExtractTable,
			Columns: []string{provisioningstep.ProvisioningStepToFileExtractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProvisioningStep{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{provisioningstep.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
