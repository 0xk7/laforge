// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/commit"
	"github.com/gen0cide/laforge/ent/plandiff"
	"github.com/google/uuid"
)

// CommitCreate is the builder for creating a Commit entity.
type CommitCreate struct {
	config
	mutation *CommitMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (cc *CommitCreate) SetType(c commit.Type) *CommitCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetRevision sets the "revision" field.
func (cc *CommitCreate) SetRevision(i int) *CommitCreate {
	cc.mutation.SetRevision(i)
	return cc
}

// SetCommitState sets the "commit_state" field.
func (cc *CommitCreate) SetCommitState(cs commit.CommitState) *CommitCreate {
	cc.mutation.SetCommitState(cs)
	return cc
}

// SetID sets the "id" field.
func (cc *CommitCreate) SetID(u uuid.UUID) *CommitCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetCommitToBuildID sets the "CommitToBuild" edge to the Build entity by ID.
func (cc *CommitCreate) SetCommitToBuildID(id uuid.UUID) *CommitCreate {
	cc.mutation.SetCommitToBuildID(id)
	return cc
}

// SetCommitToBuild sets the "CommitToBuild" edge to the Build entity.
func (cc *CommitCreate) SetCommitToBuild(b *Build) *CommitCreate {
	return cc.SetCommitToBuildID(b.ID)
}

// AddCommitToPlanDiffIDs adds the "CommitToPlanDiffs" edge to the PlanDiff entity by IDs.
func (cc *CommitCreate) AddCommitToPlanDiffIDs(ids ...uuid.UUID) *CommitCreate {
	cc.mutation.AddCommitToPlanDiffIDs(ids...)
	return cc
}

// AddCommitToPlanDiffs adds the "CommitToPlanDiffs" edges to the PlanDiff entity.
func (cc *CommitCreate) AddCommitToPlanDiffs(p ...*PlanDiff) *CommitCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddCommitToPlanDiffIDs(ids...)
}

// Mutation returns the CommitMutation object of the builder.
func (cc *CommitCreate) Mutation() *CommitMutation {
	return cc.mutation
}

// Save creates the Commit in the database.
func (cc *CommitCreate) Save(ctx context.Context) (*Commit, error) {
	var (
		err  error
		node *Commit
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommitCreate) SaveX(ctx context.Context) *Commit {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CommitCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := commit.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommitCreate) check() error {
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := commit.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Revision(); !ok {
		return &ValidationError{Name: "revision", err: errors.New("ent: missing required field \"revision\"")}
	}
	if _, ok := cc.mutation.CommitState(); !ok {
		return &ValidationError{Name: "commit_state", err: errors.New("ent: missing required field \"commit_state\"")}
	}
	if v, ok := cc.mutation.CommitState(); ok {
		if err := commit.CommitStateValidator(v); err != nil {
			return &ValidationError{Name: "commit_state", err: fmt.Errorf("ent: validator failed for field \"commit_state\": %w", err)}
		}
	}
	if _, ok := cc.mutation.CommitToBuildID(); !ok {
		return &ValidationError{Name: "CommitToBuild", err: errors.New("ent: missing required edge \"CommitToBuild\"")}
	}
	return nil
}

func (cc *CommitCreate) sqlSave(ctx context.Context) (*Commit, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (cc *CommitCreate) createSpec() (*Commit, *sqlgraph.CreateSpec) {
	var (
		_node = &Commit{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: commit.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cc.mutation.Revision(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: commit.FieldRevision,
		})
		_node.Revision = value
	}
	if value, ok := cc.mutation.CommitState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: commit.FieldCommitState,
		})
		_node.CommitState = value
	}
	if nodes := cc.mutation.CommitToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commit.CommitToBuildTable,
			Columns: []string{commit.CommitToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.commit_commit_to_build = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CommitToPlanDiffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   commit.CommitToPlanDiffsTable,
			Columns: []string{commit.CommitToPlanDiffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: plandiff.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommitCreateBulk is the builder for creating many Commit entities in bulk.
type CommitCreateBulk struct {
	config
	builders []*CommitCreate
}

// Save creates the Commit entities in the database.
func (ccb *CommitCreateBulk) Save(ctx context.Context) ([]*Commit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Commit, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommitCreateBulk) SaveX(ctx context.Context) []*Commit {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
