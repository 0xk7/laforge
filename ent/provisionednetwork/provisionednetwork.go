// Code generated by entc, DO NOT EDIT.

package provisionednetwork

const (
	// Label holds the string label denoting the provisionednetwork type in the database.
	Label = "provisioned_network"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCidr holds the string denoting the cidr field in the database.
	FieldCidr = "cidr"

	// EdgeProvisionedNetworkToStatus holds the string denoting the provisionednetworktostatus edge name in mutations.
	EdgeProvisionedNetworkToStatus = "ProvisionedNetworkToStatus"
	// EdgeProvisionedNetworkToNetwork holds the string denoting the provisionednetworktonetwork edge name in mutations.
	EdgeProvisionedNetworkToNetwork = "ProvisionedNetworkToNetwork"
	// EdgeProvisionedNetworkToBuild holds the string denoting the provisionednetworktobuild edge name in mutations.
	EdgeProvisionedNetworkToBuild = "ProvisionedNetworkToBuild"
	// EdgeProvisionedNetworkToTeam holds the string denoting the provisionednetworktoteam edge name in mutations.
	EdgeProvisionedNetworkToTeam = "ProvisionedNetworkToTeam"
	// EdgeProvisionedNetworkToProvisionedHost holds the string denoting the provisionednetworktoprovisionedhost edge name in mutations.
	EdgeProvisionedNetworkToProvisionedHost = "ProvisionedNetworkToProvisionedHost"
	// EdgeProvisionedNetworkToPlan holds the string denoting the provisionednetworktoplan edge name in mutations.
	EdgeProvisionedNetworkToPlan = "ProvisionedNetworkToPlan"

	// Table holds the table name of the provisionednetwork in the database.
	Table = "provisioned_networks"
	// ProvisionedNetworkToStatusTable is the table the holds the ProvisionedNetworkToStatus relation/edge.
	ProvisionedNetworkToStatusTable = "status"
	// ProvisionedNetworkToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	ProvisionedNetworkToStatusInverseTable = "status"
	// ProvisionedNetworkToStatusColumn is the table column denoting the ProvisionedNetworkToStatus relation/edge.
	ProvisionedNetworkToStatusColumn = "provisioned_network_provisioned_network_to_status"
	// ProvisionedNetworkToNetworkTable is the table the holds the ProvisionedNetworkToNetwork relation/edge.
	ProvisionedNetworkToNetworkTable = "provisioned_networks"
	// ProvisionedNetworkToNetworkInverseTable is the table name for the Network entity.
	// It exists in this package in order to avoid circular dependency with the "network" package.
	ProvisionedNetworkToNetworkInverseTable = "networks"
	// ProvisionedNetworkToNetworkColumn is the table column denoting the ProvisionedNetworkToNetwork relation/edge.
	ProvisionedNetworkToNetworkColumn = "provisioned_network_provisioned_network_to_network"
	// ProvisionedNetworkToBuildTable is the table the holds the ProvisionedNetworkToBuild relation/edge.
	ProvisionedNetworkToBuildTable = "provisioned_networks"
	// ProvisionedNetworkToBuildInverseTable is the table name for the Build entity.
	// It exists in this package in order to avoid circular dependency with the "build" package.
	ProvisionedNetworkToBuildInverseTable = "builds"
	// ProvisionedNetworkToBuildColumn is the table column denoting the ProvisionedNetworkToBuild relation/edge.
	ProvisionedNetworkToBuildColumn = "provisioned_network_provisioned_network_to_build"
	// ProvisionedNetworkToTeamTable is the table the holds the ProvisionedNetworkToTeam relation/edge.
	ProvisionedNetworkToTeamTable = "provisioned_networks"
	// ProvisionedNetworkToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	ProvisionedNetworkToTeamInverseTable = "teams"
	// ProvisionedNetworkToTeamColumn is the table column denoting the ProvisionedNetworkToTeam relation/edge.
	ProvisionedNetworkToTeamColumn = "provisioned_network_provisioned_network_to_team"
	// ProvisionedNetworkToProvisionedHostTable is the table the holds the ProvisionedNetworkToProvisionedHost relation/edge. The primary key declared below.
	ProvisionedNetworkToProvisionedHostTable = "provisioned_host_ProvisionedHostToProvisionedNetwork"
	// ProvisionedNetworkToProvisionedHostInverseTable is the table name for the ProvisionedHost entity.
	// It exists in this package in order to avoid circular dependency with the "provisionedhost" package.
	ProvisionedNetworkToProvisionedHostInverseTable = "provisioned_hosts"
	// ProvisionedNetworkToPlanTable is the table the holds the ProvisionedNetworkToPlan relation/edge.
	ProvisionedNetworkToPlanTable = "plans"
	// ProvisionedNetworkToPlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	ProvisionedNetworkToPlanInverseTable = "plans"
	// ProvisionedNetworkToPlanColumn is the table column denoting the ProvisionedNetworkToPlan relation/edge.
	ProvisionedNetworkToPlanColumn = "plan_plan_to_provisioned_network"
)

// Columns holds all SQL columns for provisionednetwork fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCidr,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the ProvisionedNetwork type.
var ForeignKeys = []string{
	"provisioned_network_provisioned_network_to_network",
	"provisioned_network_provisioned_network_to_build",
	"provisioned_network_provisioned_network_to_team",
}

var (
	// ProvisionedNetworkToProvisionedHostPrimaryKey and ProvisionedNetworkToProvisionedHostColumn2 are the table columns denoting the
	// primary key for the ProvisionedNetworkToProvisionedHost relation (M2M).
	ProvisionedNetworkToProvisionedHostPrimaryKey = []string{"provisioned_host_id", "provisioned_network_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
