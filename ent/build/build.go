// Code generated by entc, DO NOT EDIT.

package build

const (
	// Label holds the string label denoting the build type in the database.
	Label = "build"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"

	// EdgeBuildToStatus holds the string denoting the buildtostatus edge name in mutations.
	EdgeBuildToStatus = "BuildToStatus"
	// EdgeBuildToEnvironment holds the string denoting the buildtoenvironment edge name in mutations.
	EdgeBuildToEnvironment = "BuildToEnvironment"
	// EdgeBuildToCompetition holds the string denoting the buildtocompetition edge name in mutations.
	EdgeBuildToCompetition = "BuildToCompetition"
	// EdgeBuildToProvisionedNetwork holds the string denoting the buildtoprovisionednetwork edge name in mutations.
	EdgeBuildToProvisionedNetwork = "BuildToProvisionedNetwork"
	// EdgeBuildToTeam holds the string denoting the buildtoteam edge name in mutations.
	EdgeBuildToTeam = "BuildToTeam"
	// EdgeBuildToPlan holds the string denoting the buildtoplan edge name in mutations.
	EdgeBuildToPlan = "BuildToPlan"

	// Table holds the table name of the build in the database.
	Table = "builds"
	// BuildToStatusTable is the table the holds the BuildToStatus relation/edge.
	BuildToStatusTable = "status"
	// BuildToStatusInverseTable is the table name for the Status entity.
	// It exists in this package in order to avoid circular dependency with the "status" package.
	BuildToStatusInverseTable = "status"
	// BuildToStatusColumn is the table column denoting the BuildToStatus relation/edge.
	BuildToStatusColumn = "build_build_to_status"
	// BuildToEnvironmentTable is the table the holds the BuildToEnvironment relation/edge.
	BuildToEnvironmentTable = "builds"
	// BuildToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	BuildToEnvironmentInverseTable = "environments"
	// BuildToEnvironmentColumn is the table column denoting the BuildToEnvironment relation/edge.
	BuildToEnvironmentColumn = "build_build_to_environment"
	// BuildToCompetitionTable is the table the holds the BuildToCompetition relation/edge.
	BuildToCompetitionTable = "builds"
	// BuildToCompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	BuildToCompetitionInverseTable = "competitions"
	// BuildToCompetitionColumn is the table column denoting the BuildToCompetition relation/edge.
	BuildToCompetitionColumn = "build_build_to_competition"
	// BuildToProvisionedNetworkTable is the table the holds the BuildToProvisionedNetwork relation/edge.
	BuildToProvisionedNetworkTable = "provisioned_networks"
	// BuildToProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	BuildToProvisionedNetworkInverseTable = "provisioned_networks"
	// BuildToProvisionedNetworkColumn is the table column denoting the BuildToProvisionedNetwork relation/edge.
	BuildToProvisionedNetworkColumn = "provisioned_network_provisioned_network_to_build"
	// BuildToTeamTable is the table the holds the BuildToTeam relation/edge.
	BuildToTeamTable = "teams"
	// BuildToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	BuildToTeamInverseTable = "teams"
	// BuildToTeamColumn is the table column denoting the BuildToTeam relation/edge.
	BuildToTeamColumn = "team_team_to_build"
	// BuildToPlanTable is the table the holds the BuildToPlan relation/edge.
	BuildToPlanTable = "plans"
	// BuildToPlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	BuildToPlanInverseTable = "plans"
	// BuildToPlanColumn is the table column denoting the BuildToPlan relation/edge.
	BuildToPlanColumn = "plan_plan_to_build"
)

// Columns holds all SQL columns for build fields.
var Columns = []string{
	FieldID,
	FieldRevision,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Build type.
var ForeignKeys = []string{
	"build_build_to_environment",
	"build_build_to_competition",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
