// Code generated by entc, DO NOT EDIT.

package build

const (
	// Label holds the string label denoting the build type in the database.
	Label = "build"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"

	// EdgeBuildToUser holds the string denoting the buildtouser edge name in mutations.
	EdgeBuildToUser = "BuildToUser"
	// EdgeBuildToTag holds the string denoting the buildtotag edge name in mutations.
	EdgeBuildToTag = "BuildToTag"
	// EdgeBuildToProvisionedNetwork holds the string denoting the buildtoprovisionednetwork edge name in mutations.
	EdgeBuildToProvisionedNetwork = "BuildToProvisionedNetwork"
	// EdgeBuildToTeam holds the string denoting the buildtoteam edge name in mutations.
	EdgeBuildToTeam = "BuildToTeam"
	// EdgeBuildToEnvironment holds the string denoting the buildtoenvironment edge name in mutations.
	EdgeBuildToEnvironment = "BuildToEnvironment"

	// Table holds the table name of the build in the database.
	Table = "builds"
	// BuildToUserTable is the table the holds the BuildToUser relation/edge.
	BuildToUserTable = "users"
	// BuildToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BuildToUserInverseTable = "users"
	// BuildToUserColumn is the table column denoting the BuildToUser relation/edge.
	BuildToUserColumn = "build_build_to_user"
	// BuildToTagTable is the table the holds the BuildToTag relation/edge.
	BuildToTagTable = "tags"
	// BuildToTagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	BuildToTagInverseTable = "tags"
	// BuildToTagColumn is the table column denoting the BuildToTag relation/edge.
	BuildToTagColumn = "build_build_to_tag"
	// BuildToProvisionedNetworkTable is the table the holds the BuildToProvisionedNetwork relation/edge. The primary key declared below.
	BuildToProvisionedNetworkTable = "build_BuildToProvisionedNetwork"
	// BuildToProvisionedNetworkInverseTable is the table name for the ProvisionedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "provisionednetwork" package.
	BuildToProvisionedNetworkInverseTable = "provisioned_networks"
	// BuildToTeamTable is the table the holds the BuildToTeam relation/edge. The primary key declared below.
	BuildToTeamTable = "team_TeamToBuild"
	// BuildToTeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	BuildToTeamInverseTable = "teams"
	// BuildToEnvironmentTable is the table the holds the BuildToEnvironment relation/edge. The primary key declared below.
	BuildToEnvironmentTable = "environment_EnvironmentToBuild"
	// BuildToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	BuildToEnvironmentInverseTable = "environments"
)

// Columns holds all SQL columns for build fields.
var Columns = []string{
	FieldID,
	FieldRevision,
	FieldConfig,
}

var (
	// BuildToProvisionedNetworkPrimaryKey and BuildToProvisionedNetworkColumn2 are the table columns denoting the
	// primary key for the BuildToProvisionedNetwork relation (M2M).
	BuildToProvisionedNetworkPrimaryKey = []string{"build_id", "provisioned_network_id"}
	// BuildToTeamPrimaryKey and BuildToTeamColumn2 are the table columns denoting the
	// primary key for the BuildToTeam relation (M2M).
	BuildToTeamPrimaryKey = []string{"team_id", "build_id"}
	// BuildToEnvironmentPrimaryKey and BuildToEnvironmentColumn2 are the table columns denoting the
	// primary key for the BuildToEnvironment relation (M2M).
	BuildToEnvironmentPrimaryKey = []string{"environment_id", "build_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
