// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/includednetwork"
)

// IncludedNetwork is the model entity for the IncludedNetwork schema.
type IncludedNetwork struct {
	config ` json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" hcl:"name,label"`
	// Hosts holds the value of the "hosts" field.
	Hosts []string `json:"hosts,omitempty" hcl:"included_hosts,attr"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncludedNetworkQuery when eager-loading is set.
	Edges IncludedNetworkEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// IncludedNetworkToTag holds the value of the IncludedNetworkToTag edge.
	HCLIncludedNetworkToTag []*Tag `json:"IncludedNetworkToTag,omitempty"`
	// IncludedNetworkToEnvironment holds the value of the IncludedNetworkToEnvironment edge.
	HCLIncludedNetworkToEnvironment []*Environment `json:"IncludedNetworkToEnvironment,omitempty"`
	//

}

// IncludedNetworkEdges holds the relations/edges for other nodes in the graph.
type IncludedNetworkEdges struct {
	// IncludedNetworkToTag holds the value of the IncludedNetworkToTag edge.
	IncludedNetworkToTag []*Tag `json:"IncludedNetworkToTag,omitempty"`
	// IncludedNetworkToEnvironment holds the value of the IncludedNetworkToEnvironment edge.
	IncludedNetworkToEnvironment []*Environment `json:"IncludedNetworkToEnvironment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IncludedNetworkToTagOrErr returns the IncludedNetworkToTag value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) IncludedNetworkToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.IncludedNetworkToTag, nil
	}
	return nil, &NotLoadedError{edge: "IncludedNetworkToTag"}
}

// IncludedNetworkToEnvironmentOrErr returns the IncludedNetworkToEnvironment value or an error if the edge
// was not loaded in eager-loading.
func (e IncludedNetworkEdges) IncludedNetworkToEnvironmentOrErr() ([]*Environment, error) {
	if e.loadedTypes[1] {
		return e.IncludedNetworkToEnvironment, nil
	}
	return nil, &NotLoadedError{edge: "IncludedNetworkToEnvironment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncludedNetwork) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case includednetwork.FieldHosts:
			values[i] = &[]byte{}
		case includednetwork.FieldID:
			values[i] = &sql.NullInt64{}
		case includednetwork.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IncludedNetwork", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncludedNetwork fields.
func (in *IncludedNetwork) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case includednetwork.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			in.ID = int(value.Int64)
		case includednetwork.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				in.Name = value.String
			}
		case includednetwork.FieldHosts:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hosts", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &in.Hosts); err != nil {
					return fmt.Errorf("unmarshal field hosts: %v", err)
				}
			}
		}
	}
	return nil
}

// QueryIncludedNetworkToTag queries the "IncludedNetworkToTag" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryIncludedNetworkToTag() *TagQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryIncludedNetworkToTag(in)
}

// QueryIncludedNetworkToEnvironment queries the "IncludedNetworkToEnvironment" edge of the IncludedNetwork entity.
func (in *IncludedNetwork) QueryIncludedNetworkToEnvironment() *EnvironmentQuery {
	return (&IncludedNetworkClient{config: in.config}).QueryIncludedNetworkToEnvironment(in)
}

// Update returns a builder for updating this IncludedNetwork.
// Note that you need to call IncludedNetwork.Unwrap() before calling this method if this IncludedNetwork
// was returned from a transaction, and the transaction was committed or rolled back.
func (in *IncludedNetwork) Update() *IncludedNetworkUpdateOne {
	return (&IncludedNetworkClient{config: in.config}).UpdateOne(in)
}

// Unwrap unwraps the IncludedNetwork entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (in *IncludedNetwork) Unwrap() *IncludedNetwork {
	tx, ok := in.config.driver.(*txDriver)
	if !ok {
		panic("ent: IncludedNetwork is not a transactional entity")
	}
	in.config.driver = tx.drv
	return in
}

// String implements the fmt.Stringer.
func (in *IncludedNetwork) String() string {
	var builder strings.Builder
	builder.WriteString("IncludedNetwork(")
	builder.WriteString(fmt.Sprintf("id=%v", in.ID))
	builder.WriteString(", name=")
	builder.WriteString(in.Name)
	builder.WriteString(", hosts=")
	builder.WriteString(fmt.Sprintf("%v", in.Hosts))
	builder.WriteByte(')')
	return builder.String()
}

// IncludedNetworks is a parsable slice of IncludedNetwork.
type IncludedNetworks []*IncludedNetwork

func (in IncludedNetworks) config(cfg config) {
	for _i := range in {
		in[_i].config = cfg
	}
}
