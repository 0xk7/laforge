// Code generated by entc, DO NOT EDIT.

package network

const (
	// Label holds the string label denoting the network type in the database.
	Label = "network"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHclID holds the string denoting the hcl_id field in the database.
	FieldHclID = "hcl_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCidr holds the string denoting the cidr field in the database.
	FieldCidr = "cidr"
	// FieldVdiVisible holds the string denoting the vdi_visible field in the database.
	FieldVdiVisible = "vdi_visible"
	// FieldVars holds the string denoting the vars field in the database.
	FieldVars = "vars"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"

	// EdgeNetworkToTag holds the string denoting the networktotag edge name in mutations.
	EdgeNetworkToTag = "NetworkToTag"
	// EdgeNetworkToEnvironment holds the string denoting the networktoenvironment edge name in mutations.
	EdgeNetworkToEnvironment = "NetworkToEnvironment"
	// EdgeNetworkToHostDependency holds the string denoting the networktohostdependency edge name in mutations.
	EdgeNetworkToHostDependency = "NetworkToHostDependency"
	// EdgeNetworkToIncludedNetwork holds the string denoting the networktoincludednetwork edge name in mutations.
	EdgeNetworkToIncludedNetwork = "NetworkToIncludedNetwork"

	// Table holds the table name of the network in the database.
	Table = "networks"
	// NetworkToTagTable is the table the holds the NetworkToTag relation/edge.
	NetworkToTagTable = "tags"
	// NetworkToTagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	NetworkToTagInverseTable = "tags"
	// NetworkToTagColumn is the table column denoting the NetworkToTag relation/edge.
	NetworkToTagColumn = "network_network_to_tag"
	// NetworkToEnvironmentTable is the table the holds the NetworkToEnvironment relation/edge. The primary key declared below.
	NetworkToEnvironmentTable = "environment_EnvironmentToNetwork"
	// NetworkToEnvironmentInverseTable is the table name for the Environment entity.
	// It exists in this package in order to avoid circular dependency with the "environment" package.
	NetworkToEnvironmentInverseTable = "environments"
	// NetworkToHostDependencyTable is the table the holds the NetworkToHostDependency relation/edge.
	NetworkToHostDependencyTable = "host_dependencies"
	// NetworkToHostDependencyInverseTable is the table name for the HostDependency entity.
	// It exists in this package in order to avoid circular dependency with the "hostdependency" package.
	NetworkToHostDependencyInverseTable = "host_dependencies"
	// NetworkToHostDependencyColumn is the table column denoting the NetworkToHostDependency relation/edge.
	NetworkToHostDependencyColumn = "host_dependency_host_dependency_to_network"
	// NetworkToIncludedNetworkTable is the table the holds the NetworkToIncludedNetwork relation/edge. The primary key declared below.
	NetworkToIncludedNetworkTable = "included_network_IncludedNetworkToNetwork"
	// NetworkToIncludedNetworkInverseTable is the table name for the IncludedNetwork entity.
	// It exists in this package in order to avoid circular dependency with the "includednetwork" package.
	NetworkToIncludedNetworkInverseTable = "included_networks"
)

// Columns holds all SQL columns for network fields.
var Columns = []string{
	FieldID,
	FieldHclID,
	FieldName,
	FieldCidr,
	FieldVdiVisible,
	FieldVars,
	FieldTags,
}

var (
	// NetworkToEnvironmentPrimaryKey and NetworkToEnvironmentColumn2 are the table columns denoting the
	// primary key for the NetworkToEnvironment relation (M2M).
	NetworkToEnvironmentPrimaryKey = []string{"environment_id", "network_id"}
	// NetworkToIncludedNetworkPrimaryKey and NetworkToIncludedNetworkColumn2 are the table columns denoting the
	// primary key for the NetworkToIncludedNetwork relation (M2M).
	NetworkToIncludedNetworkPrimaryKey = []string{"included_network_id", "network_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
