// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/filedownload"
)

// FileDownload is the model entity for the FileDownload schema.
type FileDownload struct {
	config `hcl:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SourceType holds the value of the "source_type" field.
	SourceType string `json:"source_type,omitempty" hcl:"source_type,attr"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty" hcl:"source,attr"`
	// Destination holds the value of the "destination" field.
	Destination string `json:"destination,omitempty" hcl:"destination,attr"`
	// Template holds the value of the "template" field.
	Template bool `json:"template,omitempty" hcl:"template,optional"`
	// Perms holds the value of the "perms" field.
	Perms string `json:"perms,omitempty" hcl:"perms,optional"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty" hcl:"disabled,optional"`
	// Md5 holds the value of the "md5" field.
	Md5 string `json:"md5,omitempty" hcl:"md5,optional"`
	// AbsPath holds the value of the "abs_path" field.
	AbsPath string `json:"abs_path,omitempty" hcl:"abs_path,optional"`
	// Tags holds the value of the "tags" field.
	Tags map[string]string `json:"tags,omitempty" hcl:"tags,attr"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileDownloadQuery when eager-loading is set.
	Edges                                                FileDownloadEdges `json:"edges"`
	provisioning_step_provisioning_step_to_file_download *int
}

// FileDownloadEdges holds the relations/edges for other nodes in the graph.
type FileDownloadEdges struct {
	// FileDownloadToTag holds the value of the FileDownloadToTag edge.
	FileDownloadToTag []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FileDownloadToTagOrErr returns the FileDownloadToTag value or an error if the edge
// was not loaded in eager-loading.
func (e FileDownloadEdges) FileDownloadToTagOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.FileDownloadToTag, nil
	}
	return nil, &NotLoadedError{edge: "FileDownloadToTag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileDownload) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // source_type
		&sql.NullString{}, // source
		&sql.NullString{}, // destination
		&sql.NullBool{},   // template
		&sql.NullString{}, // perms
		&sql.NullBool{},   // disabled
		&sql.NullString{}, // md5
		&sql.NullString{}, // abs_path
		&[]byte{},         // tags
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*FileDownload) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // provisioning_step_provisioning_step_to_file_download
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileDownload fields.
func (fd *FileDownload) assignValues(values ...interface{}) error {
	if m, n := len(values), len(filedownload.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	fd.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source_type", values[0])
	} else if value.Valid {
		fd.SourceType = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field source", values[1])
	} else if value.Valid {
		fd.Source = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field destination", values[2])
	} else if value.Valid {
		fd.Destination = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field template", values[3])
	} else if value.Valid {
		fd.Template = value.Bool
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field perms", values[4])
	} else if value.Valid {
		fd.Perms = value.String
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field disabled", values[5])
	} else if value.Valid {
		fd.Disabled = value.Bool
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field md5", values[6])
	} else if value.Valid {
		fd.Md5 = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field abs_path", values[7])
	} else if value.Valid {
		fd.AbsPath = value.String
	}

	if value, ok := values[8].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field tags", values[8])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &fd.Tags); err != nil {
			return fmt.Errorf("unmarshal field tags: %v", err)
		}
	}
	values = values[9:]
	if len(values) == len(filedownload.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field provisioning_step_provisioning_step_to_file_download", value)
		} else if value.Valid {
			fd.provisioning_step_provisioning_step_to_file_download = new(int)
			*fd.provisioning_step_provisioning_step_to_file_download = int(value.Int64)
		}
	}
	return nil
}

// QueryFileDownloadToTag queries the FileDownloadToTag edge of the FileDownload.
func (fd *FileDownload) QueryFileDownloadToTag() *TagQuery {
	return (&FileDownloadClient{config: fd.config}).QueryFileDownloadToTag(fd)
}

// Update returns a builder for updating this FileDownload.
// Note that, you need to call FileDownload.Unwrap() before calling this method, if this FileDownload
// was returned from a transaction, and the transaction was committed or rolled back.
func (fd *FileDownload) Update() *FileDownloadUpdateOne {
	return (&FileDownloadClient{config: fd.config}).UpdateOne(fd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (fd *FileDownload) Unwrap() *FileDownload {
	tx, ok := fd.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileDownload is not a transactional entity")
	}
	fd.config.driver = tx.drv
	return fd
}

// String implements the fmt.Stringer.
func (fd *FileDownload) String() string {
	var builder strings.Builder
	builder.WriteString("FileDownload(")
	builder.WriteString(fmt.Sprintf("id=%v", fd.ID))
	builder.WriteString(", source_type=")
	builder.WriteString(fd.SourceType)
	builder.WriteString(", source=")
	builder.WriteString(fd.Source)
	builder.WriteString(", destination=")
	builder.WriteString(fd.Destination)
	builder.WriteString(", template=")
	builder.WriteString(fmt.Sprintf("%v", fd.Template))
	builder.WriteString(", perms=")
	builder.WriteString(fd.Perms)
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", fd.Disabled))
	builder.WriteString(", md5=")
	builder.WriteString(fd.Md5)
	builder.WriteString(", abs_path=")
	builder.WriteString(fd.AbsPath)
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", fd.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// FileDownloads is a parsable slice of FileDownload.
type FileDownloads []*FileDownload

func (fd FileDownloads) config(cfg config) {
	for _i := range fd {
		fd[_i].config = cfg
	}
}
