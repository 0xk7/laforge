// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/commit"
	"github.com/google/uuid"
)

// Commit is the model entity for the Commit schema.
type Commit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type commit.Type `json:"type,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// CommitState holds the value of the "commit_state" field.
	CommitState commit.CommitState `json:"commit_state,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommitQuery when eager-loading is set.
	Edges CommitEdges `json:"edges"`

	// Edges put into the main struct to be loaded via hcl
	// CommitToBuild holds the value of the CommitToBuild edge.
	HCLCommitToBuild *Build `json:"CommitToBuild,omitempty"`
	// CommitToPlanDiffs holds the value of the CommitToPlanDiffs edge.
	HCLCommitToPlanDiffs []*PlanDiff `json:"CommitToPlanDiffs,omitempty"`
	//
	commit_commit_to_build *uuid.UUID
}

// CommitEdges holds the relations/edges for other nodes in the graph.
type CommitEdges struct {
	// CommitToBuild holds the value of the CommitToBuild edge.
	CommitToBuild *Build `json:"CommitToBuild,omitempty"`
	// CommitToPlanDiffs holds the value of the CommitToPlanDiffs edge.
	CommitToPlanDiffs []*PlanDiff `json:"CommitToPlanDiffs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommitToBuildOrErr returns the CommitToBuild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommitEdges) CommitToBuildOrErr() (*Build, error) {
	if e.loadedTypes[0] {
		if e.CommitToBuild == nil {
			// The edge CommitToBuild was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: build.Label}
		}
		return e.CommitToBuild, nil
	}
	return nil, &NotLoadedError{edge: "CommitToBuild"}
}

// CommitToPlanDiffsOrErr returns the CommitToPlanDiffs value or an error if the edge
// was not loaded in eager-loading.
func (e CommitEdges) CommitToPlanDiffsOrErr() ([]*PlanDiff, error) {
	if e.loadedTypes[1] {
		return e.CommitToPlanDiffs, nil
	}
	return nil, &NotLoadedError{edge: "CommitToPlanDiffs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commit.FieldRevision:
			values[i] = new(sql.NullInt64)
		case commit.FieldType, commit.FieldCommitState:
			values[i] = new(sql.NullString)
		case commit.FieldID:
			values[i] = new(uuid.UUID)
		case commit.ForeignKeys[0]: // commit_commit_to_build
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commit fields.
func (c *Commit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case commit.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = commit.Type(value.String)
			}
		case commit.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				c.Revision = int(value.Int64)
			}
		case commit.FieldCommitState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field commit_state", values[i])
			} else if value.Valid {
				c.CommitState = commit.CommitState(value.String)
			}
		case commit.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field commit_commit_to_build", values[i])
			} else if value != nil {
				c.commit_commit_to_build = value
			}
		}
	}
	return nil
}

// QueryCommitToBuild queries the "CommitToBuild" edge of the Commit entity.
func (c *Commit) QueryCommitToBuild() *BuildQuery {
	return (&CommitClient{config: c.config}).QueryCommitToBuild(c)
}

// QueryCommitToPlanDiffs queries the "CommitToPlanDiffs" edge of the Commit entity.
func (c *Commit) QueryCommitToPlanDiffs() *PlanDiffQuery {
	return (&CommitClient{config: c.config}).QueryCommitToPlanDiffs(c)
}

// Update returns a builder for updating this Commit.
// Note that you need to call Commit.Unwrap() before calling this method if this Commit
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commit) Update() *CommitUpdateOne {
	return (&CommitClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commit) Unwrap() *Commit {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commit is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commit) String() string {
	var builder strings.Builder
	builder.WriteString("Commit(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", revision=")
	builder.WriteString(fmt.Sprintf("%v", c.Revision))
	builder.WriteString(", commit_state=")
	builder.WriteString(fmt.Sprintf("%v", c.CommitState))
	builder.WriteByte(')')
	return builder.String()
}

// Commits is a parsable slice of Commit.
type Commits []*Commit

func (c Commits) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
