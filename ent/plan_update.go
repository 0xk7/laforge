// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/plan"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisionednetwork"
	"github.com/gen0cide/laforge/ent/provisioningstep"
	"github.com/gen0cide/laforge/ent/team"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where adds a new predicate for the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetStepNumber sets the "step_number" field.
func (pu *PlanUpdate) SetStepNumber(i int) *PlanUpdate {
	pu.mutation.ResetStepNumber()
	pu.mutation.SetStepNumber(i)
	return pu
}

// AddStepNumber adds i to the "step_number" field.
func (pu *PlanUpdate) AddStepNumber(i int) *PlanUpdate {
	pu.mutation.AddStepNumber(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PlanUpdate) SetType(pl plan.Type) *PlanUpdate {
	pu.mutation.SetType(pl)
	return pu
}

// SetBuildID sets the "build_id" field.
func (pu *PlanUpdate) SetBuildID(i int) *PlanUpdate {
	pu.mutation.ResetBuildID()
	pu.mutation.SetBuildID(i)
	return pu
}

// AddBuildID adds i to the "build_id" field.
func (pu *PlanUpdate) AddBuildID(i int) *PlanUpdate {
	pu.mutation.AddBuildID(i)
	return pu
}

// SetPrevPlanID sets the "PrevPlan" edge to the Plan entity by ID.
func (pu *PlanUpdate) SetPrevPlanID(id int) *PlanUpdate {
	pu.mutation.SetPrevPlanID(id)
	return pu
}

// SetNillablePrevPlanID sets the "PrevPlan" edge to the Plan entity by ID if the given value is not nil.
func (pu *PlanUpdate) SetNillablePrevPlanID(id *int) *PlanUpdate {
	if id != nil {
		pu = pu.SetPrevPlanID(*id)
	}
	return pu
}

// SetPrevPlan sets the "PrevPlan" edge to the Plan entity.
func (pu *PlanUpdate) SetPrevPlan(p *Plan) *PlanUpdate {
	return pu.SetPrevPlanID(p.ID)
}

// AddNextPlanIDs adds the "NextPlan" edge to the Plan entity by IDs.
func (pu *PlanUpdate) AddNextPlanIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddNextPlanIDs(ids...)
	return pu
}

// AddNextPlan adds the "NextPlan" edges to the Plan entity.
func (pu *PlanUpdate) AddNextPlan(p ...*Plan) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddNextPlanIDs(ids...)
}

// AddPlanToBuildIDs adds the "PlanToBuild" edge to the Build entity by IDs.
func (pu *PlanUpdate) AddPlanToBuildIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddPlanToBuildIDs(ids...)
	return pu
}

// AddPlanToBuild adds the "PlanToBuild" edges to the Build entity.
func (pu *PlanUpdate) AddPlanToBuild(b ...*Build) *PlanUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddPlanToBuildIDs(ids...)
}

// AddPlanToTeamIDs adds the "PlanToTeam" edge to the Team entity by IDs.
func (pu *PlanUpdate) AddPlanToTeamIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddPlanToTeamIDs(ids...)
	return pu
}

// AddPlanToTeam adds the "PlanToTeam" edges to the Team entity.
func (pu *PlanUpdate) AddPlanToTeam(t ...*Team) *PlanUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddPlanToTeamIDs(ids...)
}

// AddPlanToProvisionedNetworkIDs adds the "PlanToProvisionedNetwork" edge to the ProvisionedNetwork entity by IDs.
func (pu *PlanUpdate) AddPlanToProvisionedNetworkIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddPlanToProvisionedNetworkIDs(ids...)
	return pu
}

// AddPlanToProvisionedNetwork adds the "PlanToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (pu *PlanUpdate) AddPlanToProvisionedNetwork(p ...*ProvisionedNetwork) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlanToProvisionedNetworkIDs(ids...)
}

// AddPlanToProvisionedHostIDs adds the "PlanToProvisionedHost" edge to the ProvisionedHost entity by IDs.
func (pu *PlanUpdate) AddPlanToProvisionedHostIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddPlanToProvisionedHostIDs(ids...)
	return pu
}

// AddPlanToProvisionedHost adds the "PlanToProvisionedHost" edges to the ProvisionedHost entity.
func (pu *PlanUpdate) AddPlanToProvisionedHost(p ...*ProvisionedHost) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlanToProvisionedHostIDs(ids...)
}

// AddPlanToProvisioningStepIDs adds the "PlanToProvisioningStep" edge to the ProvisioningStep entity by IDs.
func (pu *PlanUpdate) AddPlanToProvisioningStepIDs(ids ...int) *PlanUpdate {
	pu.mutation.AddPlanToProvisioningStepIDs(ids...)
	return pu
}

// AddPlanToProvisioningStep adds the "PlanToProvisioningStep" edges to the ProvisioningStep entity.
func (pu *PlanUpdate) AddPlanToProvisioningStep(p ...*ProvisioningStep) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlanToProvisioningStepIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearPrevPlan clears the "PrevPlan" edge to the Plan entity.
func (pu *PlanUpdate) ClearPrevPlan() *PlanUpdate {
	pu.mutation.ClearPrevPlan()
	return pu
}

// ClearNextPlan clears all "NextPlan" edges to the Plan entity.
func (pu *PlanUpdate) ClearNextPlan() *PlanUpdate {
	pu.mutation.ClearNextPlan()
	return pu
}

// RemoveNextPlanIDs removes the "NextPlan" edge to Plan entities by IDs.
func (pu *PlanUpdate) RemoveNextPlanIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemoveNextPlanIDs(ids...)
	return pu
}

// RemoveNextPlan removes "NextPlan" edges to Plan entities.
func (pu *PlanUpdate) RemoveNextPlan(p ...*Plan) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveNextPlanIDs(ids...)
}

// ClearPlanToBuild clears all "PlanToBuild" edges to the Build entity.
func (pu *PlanUpdate) ClearPlanToBuild() *PlanUpdate {
	pu.mutation.ClearPlanToBuild()
	return pu
}

// RemovePlanToBuildIDs removes the "PlanToBuild" edge to Build entities by IDs.
func (pu *PlanUpdate) RemovePlanToBuildIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemovePlanToBuildIDs(ids...)
	return pu
}

// RemovePlanToBuild removes "PlanToBuild" edges to Build entities.
func (pu *PlanUpdate) RemovePlanToBuild(b ...*Build) *PlanUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemovePlanToBuildIDs(ids...)
}

// ClearPlanToTeam clears all "PlanToTeam" edges to the Team entity.
func (pu *PlanUpdate) ClearPlanToTeam() *PlanUpdate {
	pu.mutation.ClearPlanToTeam()
	return pu
}

// RemovePlanToTeamIDs removes the "PlanToTeam" edge to Team entities by IDs.
func (pu *PlanUpdate) RemovePlanToTeamIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemovePlanToTeamIDs(ids...)
	return pu
}

// RemovePlanToTeam removes "PlanToTeam" edges to Team entities.
func (pu *PlanUpdate) RemovePlanToTeam(t ...*Team) *PlanUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemovePlanToTeamIDs(ids...)
}

// ClearPlanToProvisionedNetwork clears all "PlanToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (pu *PlanUpdate) ClearPlanToProvisionedNetwork() *PlanUpdate {
	pu.mutation.ClearPlanToProvisionedNetwork()
	return pu
}

// RemovePlanToProvisionedNetworkIDs removes the "PlanToProvisionedNetwork" edge to ProvisionedNetwork entities by IDs.
func (pu *PlanUpdate) RemovePlanToProvisionedNetworkIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemovePlanToProvisionedNetworkIDs(ids...)
	return pu
}

// RemovePlanToProvisionedNetwork removes "PlanToProvisionedNetwork" edges to ProvisionedNetwork entities.
func (pu *PlanUpdate) RemovePlanToProvisionedNetwork(p ...*ProvisionedNetwork) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlanToProvisionedNetworkIDs(ids...)
}

// ClearPlanToProvisionedHost clears all "PlanToProvisionedHost" edges to the ProvisionedHost entity.
func (pu *PlanUpdate) ClearPlanToProvisionedHost() *PlanUpdate {
	pu.mutation.ClearPlanToProvisionedHost()
	return pu
}

// RemovePlanToProvisionedHostIDs removes the "PlanToProvisionedHost" edge to ProvisionedHost entities by IDs.
func (pu *PlanUpdate) RemovePlanToProvisionedHostIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemovePlanToProvisionedHostIDs(ids...)
	return pu
}

// RemovePlanToProvisionedHost removes "PlanToProvisionedHost" edges to ProvisionedHost entities.
func (pu *PlanUpdate) RemovePlanToProvisionedHost(p ...*ProvisionedHost) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlanToProvisionedHostIDs(ids...)
}

// ClearPlanToProvisioningStep clears all "PlanToProvisioningStep" edges to the ProvisioningStep entity.
func (pu *PlanUpdate) ClearPlanToProvisioningStep() *PlanUpdate {
	pu.mutation.ClearPlanToProvisioningStep()
	return pu
}

// RemovePlanToProvisioningStepIDs removes the "PlanToProvisioningStep" edge to ProvisioningStep entities by IDs.
func (pu *PlanUpdate) RemovePlanToProvisioningStepIDs(ids ...int) *PlanUpdate {
	pu.mutation.RemovePlanToProvisioningStepIDs(ids...)
	return pu
}

// RemovePlanToProvisioningStep removes "PlanToProvisioningStep" edges to ProvisioningStep entities.
func (pu *PlanUpdate) RemovePlanToProvisioningStep(p ...*ProvisioningStep) *PlanUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlanToProvisioningStepIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlanUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := plan.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := pu.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: plan.FieldType,
		})
	}
	if value, ok := pu.mutation.BuildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldBuildID,
		})
	}
	if value, ok := pu.mutation.AddedBuildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldBuildID,
		})
	}
	if pu.mutation.PrevPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.PrevPlanTable,
			Columns: []string{plan.PrevPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrevPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.PrevPlanTable,
			Columns: []string{plan.PrevPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NextPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNextPlanIDs(); len(nodes) > 0 && !pu.mutation.NextPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NextPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanToBuildIDs(); len(nodes) > 0 && !pu.mutation.PlanToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanToTeamIDs(); len(nodes) > 0 && !pu.mutation.PlanToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanToProvisionedNetworkIDs(); len(nodes) > 0 && !pu.mutation.PlanToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanToProvisionedHostIDs(); len(nodes) > 0 && !pu.mutation.PlanToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlanToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlanToProvisioningStepIDs(); len(nodes) > 0 && !pu.mutation.PlanToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanToProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// SetStepNumber sets the "step_number" field.
func (puo *PlanUpdateOne) SetStepNumber(i int) *PlanUpdateOne {
	puo.mutation.ResetStepNumber()
	puo.mutation.SetStepNumber(i)
	return puo
}

// AddStepNumber adds i to the "step_number" field.
func (puo *PlanUpdateOne) AddStepNumber(i int) *PlanUpdateOne {
	puo.mutation.AddStepNumber(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PlanUpdateOne) SetType(pl plan.Type) *PlanUpdateOne {
	puo.mutation.SetType(pl)
	return puo
}

// SetBuildID sets the "build_id" field.
func (puo *PlanUpdateOne) SetBuildID(i int) *PlanUpdateOne {
	puo.mutation.ResetBuildID()
	puo.mutation.SetBuildID(i)
	return puo
}

// AddBuildID adds i to the "build_id" field.
func (puo *PlanUpdateOne) AddBuildID(i int) *PlanUpdateOne {
	puo.mutation.AddBuildID(i)
	return puo
}

// SetPrevPlanID sets the "PrevPlan" edge to the Plan entity by ID.
func (puo *PlanUpdateOne) SetPrevPlanID(id int) *PlanUpdateOne {
	puo.mutation.SetPrevPlanID(id)
	return puo
}

// SetNillablePrevPlanID sets the "PrevPlan" edge to the Plan entity by ID if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePrevPlanID(id *int) *PlanUpdateOne {
	if id != nil {
		puo = puo.SetPrevPlanID(*id)
	}
	return puo
}

// SetPrevPlan sets the "PrevPlan" edge to the Plan entity.
func (puo *PlanUpdateOne) SetPrevPlan(p *Plan) *PlanUpdateOne {
	return puo.SetPrevPlanID(p.ID)
}

// AddNextPlanIDs adds the "NextPlan" edge to the Plan entity by IDs.
func (puo *PlanUpdateOne) AddNextPlanIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddNextPlanIDs(ids...)
	return puo
}

// AddNextPlan adds the "NextPlan" edges to the Plan entity.
func (puo *PlanUpdateOne) AddNextPlan(p ...*Plan) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddNextPlanIDs(ids...)
}

// AddPlanToBuildIDs adds the "PlanToBuild" edge to the Build entity by IDs.
func (puo *PlanUpdateOne) AddPlanToBuildIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddPlanToBuildIDs(ids...)
	return puo
}

// AddPlanToBuild adds the "PlanToBuild" edges to the Build entity.
func (puo *PlanUpdateOne) AddPlanToBuild(b ...*Build) *PlanUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddPlanToBuildIDs(ids...)
}

// AddPlanToTeamIDs adds the "PlanToTeam" edge to the Team entity by IDs.
func (puo *PlanUpdateOne) AddPlanToTeamIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddPlanToTeamIDs(ids...)
	return puo
}

// AddPlanToTeam adds the "PlanToTeam" edges to the Team entity.
func (puo *PlanUpdateOne) AddPlanToTeam(t ...*Team) *PlanUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddPlanToTeamIDs(ids...)
}

// AddPlanToProvisionedNetworkIDs adds the "PlanToProvisionedNetwork" edge to the ProvisionedNetwork entity by IDs.
func (puo *PlanUpdateOne) AddPlanToProvisionedNetworkIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddPlanToProvisionedNetworkIDs(ids...)
	return puo
}

// AddPlanToProvisionedNetwork adds the "PlanToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (puo *PlanUpdateOne) AddPlanToProvisionedNetwork(p ...*ProvisionedNetwork) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlanToProvisionedNetworkIDs(ids...)
}

// AddPlanToProvisionedHostIDs adds the "PlanToProvisionedHost" edge to the ProvisionedHost entity by IDs.
func (puo *PlanUpdateOne) AddPlanToProvisionedHostIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddPlanToProvisionedHostIDs(ids...)
	return puo
}

// AddPlanToProvisionedHost adds the "PlanToProvisionedHost" edges to the ProvisionedHost entity.
func (puo *PlanUpdateOne) AddPlanToProvisionedHost(p ...*ProvisionedHost) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlanToProvisionedHostIDs(ids...)
}

// AddPlanToProvisioningStepIDs adds the "PlanToProvisioningStep" edge to the ProvisioningStep entity by IDs.
func (puo *PlanUpdateOne) AddPlanToProvisioningStepIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.AddPlanToProvisioningStepIDs(ids...)
	return puo
}

// AddPlanToProvisioningStep adds the "PlanToProvisioningStep" edges to the ProvisioningStep entity.
func (puo *PlanUpdateOne) AddPlanToProvisioningStep(p ...*ProvisioningStep) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlanToProvisioningStepIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearPrevPlan clears the "PrevPlan" edge to the Plan entity.
func (puo *PlanUpdateOne) ClearPrevPlan() *PlanUpdateOne {
	puo.mutation.ClearPrevPlan()
	return puo
}

// ClearNextPlan clears all "NextPlan" edges to the Plan entity.
func (puo *PlanUpdateOne) ClearNextPlan() *PlanUpdateOne {
	puo.mutation.ClearNextPlan()
	return puo
}

// RemoveNextPlanIDs removes the "NextPlan" edge to Plan entities by IDs.
func (puo *PlanUpdateOne) RemoveNextPlanIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemoveNextPlanIDs(ids...)
	return puo
}

// RemoveNextPlan removes "NextPlan" edges to Plan entities.
func (puo *PlanUpdateOne) RemoveNextPlan(p ...*Plan) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveNextPlanIDs(ids...)
}

// ClearPlanToBuild clears all "PlanToBuild" edges to the Build entity.
func (puo *PlanUpdateOne) ClearPlanToBuild() *PlanUpdateOne {
	puo.mutation.ClearPlanToBuild()
	return puo
}

// RemovePlanToBuildIDs removes the "PlanToBuild" edge to Build entities by IDs.
func (puo *PlanUpdateOne) RemovePlanToBuildIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemovePlanToBuildIDs(ids...)
	return puo
}

// RemovePlanToBuild removes "PlanToBuild" edges to Build entities.
func (puo *PlanUpdateOne) RemovePlanToBuild(b ...*Build) *PlanUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemovePlanToBuildIDs(ids...)
}

// ClearPlanToTeam clears all "PlanToTeam" edges to the Team entity.
func (puo *PlanUpdateOne) ClearPlanToTeam() *PlanUpdateOne {
	puo.mutation.ClearPlanToTeam()
	return puo
}

// RemovePlanToTeamIDs removes the "PlanToTeam" edge to Team entities by IDs.
func (puo *PlanUpdateOne) RemovePlanToTeamIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemovePlanToTeamIDs(ids...)
	return puo
}

// RemovePlanToTeam removes "PlanToTeam" edges to Team entities.
func (puo *PlanUpdateOne) RemovePlanToTeam(t ...*Team) *PlanUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemovePlanToTeamIDs(ids...)
}

// ClearPlanToProvisionedNetwork clears all "PlanToProvisionedNetwork" edges to the ProvisionedNetwork entity.
func (puo *PlanUpdateOne) ClearPlanToProvisionedNetwork() *PlanUpdateOne {
	puo.mutation.ClearPlanToProvisionedNetwork()
	return puo
}

// RemovePlanToProvisionedNetworkIDs removes the "PlanToProvisionedNetwork" edge to ProvisionedNetwork entities by IDs.
func (puo *PlanUpdateOne) RemovePlanToProvisionedNetworkIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemovePlanToProvisionedNetworkIDs(ids...)
	return puo
}

// RemovePlanToProvisionedNetwork removes "PlanToProvisionedNetwork" edges to ProvisionedNetwork entities.
func (puo *PlanUpdateOne) RemovePlanToProvisionedNetwork(p ...*ProvisionedNetwork) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlanToProvisionedNetworkIDs(ids...)
}

// ClearPlanToProvisionedHost clears all "PlanToProvisionedHost" edges to the ProvisionedHost entity.
func (puo *PlanUpdateOne) ClearPlanToProvisionedHost() *PlanUpdateOne {
	puo.mutation.ClearPlanToProvisionedHost()
	return puo
}

// RemovePlanToProvisionedHostIDs removes the "PlanToProvisionedHost" edge to ProvisionedHost entities by IDs.
func (puo *PlanUpdateOne) RemovePlanToProvisionedHostIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemovePlanToProvisionedHostIDs(ids...)
	return puo
}

// RemovePlanToProvisionedHost removes "PlanToProvisionedHost" edges to ProvisionedHost entities.
func (puo *PlanUpdateOne) RemovePlanToProvisionedHost(p ...*ProvisionedHost) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlanToProvisionedHostIDs(ids...)
}

// ClearPlanToProvisioningStep clears all "PlanToProvisioningStep" edges to the ProvisioningStep entity.
func (puo *PlanUpdateOne) ClearPlanToProvisioningStep() *PlanUpdateOne {
	puo.mutation.ClearPlanToProvisioningStep()
	return puo
}

// RemovePlanToProvisioningStepIDs removes the "PlanToProvisioningStep" edge to ProvisioningStep entities by IDs.
func (puo *PlanUpdateOne) RemovePlanToProvisioningStepIDs(ids ...int) *PlanUpdateOne {
	puo.mutation.RemovePlanToProvisioningStepIDs(ids...)
	return puo
}

// RemovePlanToProvisioningStep removes "PlanToProvisioningStep" edges to ProvisioningStep entities.
func (puo *PlanUpdateOne) RemovePlanToProvisioningStep(p ...*ProvisioningStep) *PlanUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlanToProvisioningStepIDs(ids...)
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	var (
		err  error
		node *Plan
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlanUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := plan.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: plan.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Plan.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.StepNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := puo.mutation.AddedStepNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldStepNumber,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: plan.FieldType,
		})
	}
	if value, ok := puo.mutation.BuildID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldBuildID,
		})
	}
	if value, ok := puo.mutation.AddedBuildID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: plan.FieldBuildID,
		})
	}
	if puo.mutation.PrevPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.PrevPlanTable,
			Columns: []string{plan.PrevPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrevPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.PrevPlanTable,
			Columns: []string{plan.PrevPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NextPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNextPlanIDs(); len(nodes) > 0 && !puo.mutation.NextPlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NextPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.NextPlanTable,
			Columns: []string{plan.NextPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanToBuildIDs(); len(nodes) > 0 && !puo.mutation.PlanToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToBuildTable,
			Columns: plan.PlanToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanToTeamIDs(); len(nodes) > 0 && !puo.mutation.PlanToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToTeamTable,
			Columns: plan.PlanToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanToProvisionedNetworkIDs(); len(nodes) > 0 && !puo.mutation.PlanToProvisionedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanToProvisionedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedNetworkTable,
			Columns: plan.PlanToProvisionedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanToProvisionedHostIDs(); len(nodes) > 0 && !puo.mutation.PlanToProvisionedHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisionedHostTable,
			Columns: plan.PlanToProvisionedHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlanToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlanToProvisioningStepIDs(); len(nodes) > 0 && !puo.mutation.PlanToProvisioningStepCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanToProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlanToProvisioningStepTable,
			Columns: plan.PlanToProvisioningStepPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
