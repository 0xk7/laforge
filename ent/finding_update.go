// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/user"
)

// FindingUpdate is the builder for updating Finding entities.
type FindingUpdate struct {
	config
	hooks    []Hook
	mutation *FindingMutation
}

// Where adds a new predicate for the builder.
func (fu *FindingUpdate) Where(ps ...predicate.Finding) *FindingUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetName sets the name field.
func (fu *FindingUpdate) SetName(s string) *FindingUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetDescription sets the description field.
func (fu *FindingUpdate) SetDescription(s string) *FindingUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetSeverity sets the severity field.
func (fu *FindingUpdate) SetSeverity(f finding.Severity) *FindingUpdate {
	fu.mutation.SetSeverity(f)
	return fu
}

// SetDifficulty sets the difficulty field.
func (fu *FindingUpdate) SetDifficulty(f finding.Difficulty) *FindingUpdate {
	fu.mutation.SetDifficulty(f)
	return fu
}

// AddFindingToUserIDs adds the FindingToUser edge to User by ids.
func (fu *FindingUpdate) AddFindingToUserIDs(ids ...int) *FindingUpdate {
	fu.mutation.AddFindingToUserIDs(ids...)
	return fu
}

// AddFindingToUser adds the FindingToUser edges to User.
func (fu *FindingUpdate) AddFindingToUser(u ...*User) *FindingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddFindingToUserIDs(ids...)
}

// AddFindingToTagIDs adds the FindingToTag edge to Tag by ids.
func (fu *FindingUpdate) AddFindingToTagIDs(ids ...int) *FindingUpdate {
	fu.mutation.AddFindingToTagIDs(ids...)
	return fu
}

// AddFindingToTag adds the FindingToTag edges to Tag.
func (fu *FindingUpdate) AddFindingToTag(t ...*Tag) *FindingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.AddFindingToTagIDs(ids...)
}

// AddFindingToHostIDs adds the FindingToHost edge to Host by ids.
func (fu *FindingUpdate) AddFindingToHostIDs(ids ...int) *FindingUpdate {
	fu.mutation.AddFindingToHostIDs(ids...)
	return fu
}

// AddFindingToHost adds the FindingToHost edges to Host.
func (fu *FindingUpdate) AddFindingToHost(h ...*Host) *FindingUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fu.AddFindingToHostIDs(ids...)
}

// AddFindingToScriptIDs adds the FindingToScript edge to Script by ids.
func (fu *FindingUpdate) AddFindingToScriptIDs(ids ...int) *FindingUpdate {
	fu.mutation.AddFindingToScriptIDs(ids...)
	return fu
}

// AddFindingToScript adds the FindingToScript edges to Script.
func (fu *FindingUpdate) AddFindingToScript(s ...*Script) *FindingUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.AddFindingToScriptIDs(ids...)
}

// Mutation returns the FindingMutation object of the builder.
func (fu *FindingUpdate) Mutation() *FindingMutation {
	return fu.mutation
}

// ClearFindingToUser clears all "FindingToUser" edges to type User.
func (fu *FindingUpdate) ClearFindingToUser() *FindingUpdate {
	fu.mutation.ClearFindingToUser()
	return fu
}

// RemoveFindingToUserIDs removes the FindingToUser edge to User by ids.
func (fu *FindingUpdate) RemoveFindingToUserIDs(ids ...int) *FindingUpdate {
	fu.mutation.RemoveFindingToUserIDs(ids...)
	return fu
}

// RemoveFindingToUser removes FindingToUser edges to User.
func (fu *FindingUpdate) RemoveFindingToUser(u ...*User) *FindingUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveFindingToUserIDs(ids...)
}

// ClearFindingToTag clears all "FindingToTag" edges to type Tag.
func (fu *FindingUpdate) ClearFindingToTag() *FindingUpdate {
	fu.mutation.ClearFindingToTag()
	return fu
}

// RemoveFindingToTagIDs removes the FindingToTag edge to Tag by ids.
func (fu *FindingUpdate) RemoveFindingToTagIDs(ids ...int) *FindingUpdate {
	fu.mutation.RemoveFindingToTagIDs(ids...)
	return fu
}

// RemoveFindingToTag removes FindingToTag edges to Tag.
func (fu *FindingUpdate) RemoveFindingToTag(t ...*Tag) *FindingUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.RemoveFindingToTagIDs(ids...)
}

// ClearFindingToHost clears all "FindingToHost" edges to type Host.
func (fu *FindingUpdate) ClearFindingToHost() *FindingUpdate {
	fu.mutation.ClearFindingToHost()
	return fu
}

// RemoveFindingToHostIDs removes the FindingToHost edge to Host by ids.
func (fu *FindingUpdate) RemoveFindingToHostIDs(ids ...int) *FindingUpdate {
	fu.mutation.RemoveFindingToHostIDs(ids...)
	return fu
}

// RemoveFindingToHost removes FindingToHost edges to Host.
func (fu *FindingUpdate) RemoveFindingToHost(h ...*Host) *FindingUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fu.RemoveFindingToHostIDs(ids...)
}

// ClearFindingToScript clears all "FindingToScript" edges to type Script.
func (fu *FindingUpdate) ClearFindingToScript() *FindingUpdate {
	fu.mutation.ClearFindingToScript()
	return fu
}

// RemoveFindingToScriptIDs removes the FindingToScript edge to Script by ids.
func (fu *FindingUpdate) RemoveFindingToScriptIDs(ids ...int) *FindingUpdate {
	fu.mutation.RemoveFindingToScriptIDs(ids...)
	return fu
}

// RemoveFindingToScript removes FindingToScript edges to Script.
func (fu *FindingUpdate) RemoveFindingToScript(s ...*Script) *FindingUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fu.RemoveFindingToScriptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FindingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FindingUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FindingUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FindingUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FindingUpdate) check() error {
	if v, ok := fu.mutation.Severity(); ok {
		if err := finding.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Difficulty(); ok {
		if err := finding.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf("ent: validator failed for field \"difficulty\": %w", err)}
		}
	}
	return nil
}

func (fu *FindingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   finding.Table,
			Columns: finding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: finding.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldName,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldDescription,
		})
	}
	if value, ok := fu.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldSeverity,
		})
	}
	if value, ok := fu.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldDifficulty,
		})
	}
	if fu.mutation.FindingToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFindingToUserIDs(); len(nodes) > 0 && !fu.mutation.FindingToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FindingToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FindingToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFindingToTagIDs(); len(nodes) > 0 && !fu.mutation.FindingToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FindingToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FindingToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFindingToHostIDs(); len(nodes) > 0 && !fu.mutation.FindingToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FindingToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.FindingToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFindingToScriptIDs(); len(nodes) > 0 && !fu.mutation.FindingToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FindingToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FindingUpdateOne is the builder for updating a single Finding entity.
type FindingUpdateOne struct {
	config
	hooks    []Hook
	mutation *FindingMutation
}

// SetName sets the name field.
func (fuo *FindingUpdateOne) SetName(s string) *FindingUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetDescription sets the description field.
func (fuo *FindingUpdateOne) SetDescription(s string) *FindingUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetSeverity sets the severity field.
func (fuo *FindingUpdateOne) SetSeverity(f finding.Severity) *FindingUpdateOne {
	fuo.mutation.SetSeverity(f)
	return fuo
}

// SetDifficulty sets the difficulty field.
func (fuo *FindingUpdateOne) SetDifficulty(f finding.Difficulty) *FindingUpdateOne {
	fuo.mutation.SetDifficulty(f)
	return fuo
}

// AddFindingToUserIDs adds the FindingToUser edge to User by ids.
func (fuo *FindingUpdateOne) AddFindingToUserIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.AddFindingToUserIDs(ids...)
	return fuo
}

// AddFindingToUser adds the FindingToUser edges to User.
func (fuo *FindingUpdateOne) AddFindingToUser(u ...*User) *FindingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddFindingToUserIDs(ids...)
}

// AddFindingToTagIDs adds the FindingToTag edge to Tag by ids.
func (fuo *FindingUpdateOne) AddFindingToTagIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.AddFindingToTagIDs(ids...)
	return fuo
}

// AddFindingToTag adds the FindingToTag edges to Tag.
func (fuo *FindingUpdateOne) AddFindingToTag(t ...*Tag) *FindingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.AddFindingToTagIDs(ids...)
}

// AddFindingToHostIDs adds the FindingToHost edge to Host by ids.
func (fuo *FindingUpdateOne) AddFindingToHostIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.AddFindingToHostIDs(ids...)
	return fuo
}

// AddFindingToHost adds the FindingToHost edges to Host.
func (fuo *FindingUpdateOne) AddFindingToHost(h ...*Host) *FindingUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fuo.AddFindingToHostIDs(ids...)
}

// AddFindingToScriptIDs adds the FindingToScript edge to Script by ids.
func (fuo *FindingUpdateOne) AddFindingToScriptIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.AddFindingToScriptIDs(ids...)
	return fuo
}

// AddFindingToScript adds the FindingToScript edges to Script.
func (fuo *FindingUpdateOne) AddFindingToScript(s ...*Script) *FindingUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.AddFindingToScriptIDs(ids...)
}

// Mutation returns the FindingMutation object of the builder.
func (fuo *FindingUpdateOne) Mutation() *FindingMutation {
	return fuo.mutation
}

// ClearFindingToUser clears all "FindingToUser" edges to type User.
func (fuo *FindingUpdateOne) ClearFindingToUser() *FindingUpdateOne {
	fuo.mutation.ClearFindingToUser()
	return fuo
}

// RemoveFindingToUserIDs removes the FindingToUser edge to User by ids.
func (fuo *FindingUpdateOne) RemoveFindingToUserIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.RemoveFindingToUserIDs(ids...)
	return fuo
}

// RemoveFindingToUser removes FindingToUser edges to User.
func (fuo *FindingUpdateOne) RemoveFindingToUser(u ...*User) *FindingUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveFindingToUserIDs(ids...)
}

// ClearFindingToTag clears all "FindingToTag" edges to type Tag.
func (fuo *FindingUpdateOne) ClearFindingToTag() *FindingUpdateOne {
	fuo.mutation.ClearFindingToTag()
	return fuo
}

// RemoveFindingToTagIDs removes the FindingToTag edge to Tag by ids.
func (fuo *FindingUpdateOne) RemoveFindingToTagIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.RemoveFindingToTagIDs(ids...)
	return fuo
}

// RemoveFindingToTag removes FindingToTag edges to Tag.
func (fuo *FindingUpdateOne) RemoveFindingToTag(t ...*Tag) *FindingUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.RemoveFindingToTagIDs(ids...)
}

// ClearFindingToHost clears all "FindingToHost" edges to type Host.
func (fuo *FindingUpdateOne) ClearFindingToHost() *FindingUpdateOne {
	fuo.mutation.ClearFindingToHost()
	return fuo
}

// RemoveFindingToHostIDs removes the FindingToHost edge to Host by ids.
func (fuo *FindingUpdateOne) RemoveFindingToHostIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.RemoveFindingToHostIDs(ids...)
	return fuo
}

// RemoveFindingToHost removes FindingToHost edges to Host.
func (fuo *FindingUpdateOne) RemoveFindingToHost(h ...*Host) *FindingUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return fuo.RemoveFindingToHostIDs(ids...)
}

// ClearFindingToScript clears all "FindingToScript" edges to type Script.
func (fuo *FindingUpdateOne) ClearFindingToScript() *FindingUpdateOne {
	fuo.mutation.ClearFindingToScript()
	return fuo
}

// RemoveFindingToScriptIDs removes the FindingToScript edge to Script by ids.
func (fuo *FindingUpdateOne) RemoveFindingToScriptIDs(ids ...int) *FindingUpdateOne {
	fuo.mutation.RemoveFindingToScriptIDs(ids...)
	return fuo
}

// RemoveFindingToScript removes FindingToScript edges to Script.
func (fuo *FindingUpdateOne) RemoveFindingToScript(s ...*Script) *FindingUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fuo.RemoveFindingToScriptIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FindingUpdateOne) Save(ctx context.Context) (*Finding, error) {
	var (
		err  error
		node *Finding
	)
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FindingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FindingUpdateOne) SaveX(ctx context.Context) *Finding {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FindingUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FindingUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FindingUpdateOne) check() error {
	if v, ok := fuo.mutation.Severity(); ok {
		if err := finding.SeverityValidator(v); err != nil {
			return &ValidationError{Name: "severity", err: fmt.Errorf("ent: validator failed for field \"severity\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Difficulty(); ok {
		if err := finding.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf("ent: validator failed for field \"difficulty\": %w", err)}
		}
	}
	return nil
}

func (fuo *FindingUpdateOne) sqlSave(ctx context.Context) (_node *Finding, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   finding.Table,
			Columns: finding.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: finding.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Finding.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldName,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: finding.FieldDescription,
		})
	}
	if value, ok := fuo.mutation.Severity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldSeverity,
		})
	}
	if value, ok := fuo.mutation.Difficulty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: finding.FieldDifficulty,
		})
	}
	if fuo.mutation.FindingToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFindingToUserIDs(); len(nodes) > 0 && !fuo.mutation.FindingToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FindingToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToUserTable,
			Columns: []string{finding.FindingToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FindingToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFindingToTagIDs(); len(nodes) > 0 && !fuo.mutation.FindingToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FindingToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToTagTable,
			Columns: []string{finding.FindingToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FindingToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFindingToHostIDs(); len(nodes) > 0 && !fuo.mutation.FindingToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FindingToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   finding.FindingToHostTable,
			Columns: []string{finding.FindingToHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.FindingToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFindingToScriptIDs(); len(nodes) > 0 && !fuo.mutation.FindingToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FindingToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   finding.FindingToScriptTable,
			Columns: finding.FindingToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Finding{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{finding.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
