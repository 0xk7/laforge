// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/command"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/dns"
	"github.com/gen0cide/laforge/ent/dnsrecord"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/filedelete"
	"github.com/gen0cide/laforge/ent/filedownload"
	"github.com/gen0cide/laforge/ent/fileextract"
	"github.com/gen0cide/laforge/ent/finding"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/identity"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/script"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/user"
)

// EnvironmentUpdate is the builder for updating Environment entities.
type EnvironmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// Where adds a new predicate for the EnvironmentUpdate builder.
func (eu *EnvironmentUpdate) Where(ps ...predicate.Environment) *EnvironmentUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetHclID sets the "hcl_id" field.
func (eu *EnvironmentUpdate) SetHclID(s string) *EnvironmentUpdate {
	eu.mutation.SetHclID(s)
	return eu
}

// SetCompetitionID sets the "competition_id" field.
func (eu *EnvironmentUpdate) SetCompetitionID(s string) *EnvironmentUpdate {
	eu.mutation.SetCompetitionID(s)
	return eu
}

// SetName sets the "name" field.
func (eu *EnvironmentUpdate) SetName(s string) *EnvironmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EnvironmentUpdate) SetDescription(s string) *EnvironmentUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetBuilder sets the "builder" field.
func (eu *EnvironmentUpdate) SetBuilder(s string) *EnvironmentUpdate {
	eu.mutation.SetBuilder(s)
	return eu
}

// SetTeamCount sets the "team_count" field.
func (eu *EnvironmentUpdate) SetTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.ResetTeamCount()
	eu.mutation.SetTeamCount(i)
	return eu
}

// AddTeamCount adds i to the "team_count" field.
func (eu *EnvironmentUpdate) AddTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.AddTeamCount(i)
	return eu
}

// SetRevision sets the "revision" field.
func (eu *EnvironmentUpdate) SetRevision(i int) *EnvironmentUpdate {
	eu.mutation.ResetRevision()
	eu.mutation.SetRevision(i)
	return eu
}

// AddRevision adds i to the "revision" field.
func (eu *EnvironmentUpdate) AddRevision(i int) *EnvironmentUpdate {
	eu.mutation.AddRevision(i)
	return eu
}

// SetAdminCidrs sets the "admin_cidrs" field.
func (eu *EnvironmentUpdate) SetAdminCidrs(s []string) *EnvironmentUpdate {
	eu.mutation.SetAdminCidrs(s)
	return eu
}

// SetExposedVdiPorts sets the "exposed_vdi_ports" field.
func (eu *EnvironmentUpdate) SetExposedVdiPorts(s []string) *EnvironmentUpdate {
	eu.mutation.SetExposedVdiPorts(s)
	return eu
}

// SetConfig sets the "config" field.
func (eu *EnvironmentUpdate) SetConfig(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetConfig(m)
	return eu
}

// SetTags sets the "tags" field.
func (eu *EnvironmentUpdate) SetTags(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetTags(m)
	return eu
}

// AddEnvironmentToTagIDs adds the "EnvironmentToTag" edge to the Tag entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToTagIDs(ids...)
	return eu
}

// AddEnvironmentToTag adds the "EnvironmentToTag" edges to the Tag entity.
func (eu *EnvironmentUpdate) AddEnvironmentToTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddEnvironmentToTagIDs(ids...)
}

// AddEnvironmentToUserIDs adds the "EnvironmentToUser" edge to the User entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToUserIDs(ids...)
	return eu
}

// AddEnvironmentToUser adds the "EnvironmentToUser" edges to the User entity.
func (eu *EnvironmentUpdate) AddEnvironmentToUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddEnvironmentToUserIDs(ids...)
}

// AddEnvironmentToHostIDs adds the "EnvironmentToHost" edge to the Host entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToHostIDs(ids...)
	return eu
}

// AddEnvironmentToHost adds the "EnvironmentToHost" edges to the Host entity.
func (eu *EnvironmentUpdate) AddEnvironmentToHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddEnvironmentToHostIDs(ids...)
}

// AddEnvironmentToCompetitionIDs adds the "EnvironmentToCompetition" edge to the Competition entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToCompetitionIDs(ids...)
	return eu
}

// AddEnvironmentToCompetition adds the "EnvironmentToCompetition" edges to the Competition entity.
func (eu *EnvironmentUpdate) AddEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddEnvironmentToCompetitionIDs(ids...)
}

// AddEnvironmentToIdentityIDs adds the "EnvironmentToIdentity" edge to the Identity entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToIdentityIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToIdentityIDs(ids...)
	return eu
}

// AddEnvironmentToIdentity adds the "EnvironmentToIdentity" edges to the Identity entity.
func (eu *EnvironmentUpdate) AddEnvironmentToIdentity(i ...*Identity) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddEnvironmentToIdentityIDs(ids...)
}

// AddEnvironmentToCommandIDs adds the "EnvironmentToCommand" edge to the Command entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToCommandIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToCommandIDs(ids...)
	return eu
}

// AddEnvironmentToCommand adds the "EnvironmentToCommand" edges to the Command entity.
func (eu *EnvironmentUpdate) AddEnvironmentToCommand(c ...*Command) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddEnvironmentToCommandIDs(ids...)
}

// AddEnvironmentToScriptIDs adds the "EnvironmentToScript" edge to the Script entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToScriptIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToScriptIDs(ids...)
	return eu
}

// AddEnvironmentToScript adds the "EnvironmentToScript" edges to the Script entity.
func (eu *EnvironmentUpdate) AddEnvironmentToScript(s ...*Script) *EnvironmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddEnvironmentToScriptIDs(ids...)
}

// AddEnvironmentToFileDownloadIDs adds the "EnvironmentToFileDownload" edge to the FileDownload entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToFileDownloadIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToFileDownloadIDs(ids...)
	return eu
}

// AddEnvironmentToFileDownload adds the "EnvironmentToFileDownload" edges to the FileDownload entity.
func (eu *EnvironmentUpdate) AddEnvironmentToFileDownload(f ...*FileDownload) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddEnvironmentToFileDownloadIDs(ids...)
}

// AddEnvironmentToFileDeleteIDs adds the "EnvironmentToFileDelete" edge to the FileDelete entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToFileDeleteIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToFileDeleteIDs(ids...)
	return eu
}

// AddEnvironmentToFileDelete adds the "EnvironmentToFileDelete" edges to the FileDelete entity.
func (eu *EnvironmentUpdate) AddEnvironmentToFileDelete(f ...*FileDelete) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddEnvironmentToFileDeleteIDs(ids...)
}

// AddEnvironmentToFileExtractIDs adds the "EnvironmentToFileExtract" edge to the FileExtract entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToFileExtractIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToFileExtractIDs(ids...)
	return eu
}

// AddEnvironmentToFileExtract adds the "EnvironmentToFileExtract" edges to the FileExtract entity.
func (eu *EnvironmentUpdate) AddEnvironmentToFileExtract(f ...*FileExtract) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddEnvironmentToFileExtractIDs(ids...)
}

// AddEnvironmentToIncludedNetworkIDs adds the "EnvironmentToIncludedNetwork" edge to the IncludedNetwork entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToIncludedNetworkIDs(ids...)
	return eu
}

// AddEnvironmentToIncludedNetwork adds the "EnvironmentToIncludedNetwork" edges to the IncludedNetwork entity.
func (eu *EnvironmentUpdate) AddEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddEnvironmentToIncludedNetworkIDs(ids...)
}

// AddEnvironmentToFindingIDs adds the "EnvironmentToFinding" edge to the Finding entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToFindingIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToFindingIDs(ids...)
	return eu
}

// AddEnvironmentToFinding adds the "EnvironmentToFinding" edges to the Finding entity.
func (eu *EnvironmentUpdate) AddEnvironmentToFinding(f ...*Finding) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddEnvironmentToFindingIDs(ids...)
}

// AddEnvironmentToDNSRecordIDs adds the "EnvironmentToDNSRecord" edge to the DNSRecord entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToDNSRecordIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToDNSRecordIDs(ids...)
	return eu
}

// AddEnvironmentToDNSRecord adds the "EnvironmentToDNSRecord" edges to the DNSRecord entity.
func (eu *EnvironmentUpdate) AddEnvironmentToDNSRecord(d ...*DNSRecord) *EnvironmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddEnvironmentToDNSRecordIDs(ids...)
}

// AddEnvironmentToDNSIDs adds the "EnvironmentToDNS" edge to the DNS entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToDNSIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToDNSIDs(ids...)
	return eu
}

// AddEnvironmentToDNS adds the "EnvironmentToDNS" edges to the DNS entity.
func (eu *EnvironmentUpdate) AddEnvironmentToDNS(d ...*DNS) *EnvironmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddEnvironmentToDNSIDs(ids...)
}

// AddEnvironmentToNetworkIDs adds the "EnvironmentToNetwork" edge to the Network entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToNetworkIDs(ids...)
	return eu
}

// AddEnvironmentToNetwork adds the "EnvironmentToNetwork" edges to the Network entity.
func (eu *EnvironmentUpdate) AddEnvironmentToNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddEnvironmentToNetworkIDs(ids...)
}

// AddEnvironmentToHostDependencyIDs adds the "EnvironmentToHostDependency" edge to the HostDependency entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToHostDependencyIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToHostDependencyIDs(ids...)
	return eu
}

// AddEnvironmentToHostDependency adds the "EnvironmentToHostDependency" edges to the HostDependency entity.
func (eu *EnvironmentUpdate) AddEnvironmentToHostDependency(h ...*HostDependency) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddEnvironmentToHostDependencyIDs(ids...)
}

// AddEnvironmentToBuildIDs adds the "EnvironmentToBuild" edge to the Build entity by IDs.
func (eu *EnvironmentUpdate) AddEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToBuildIDs(ids...)
	return eu
}

// AddEnvironmentToBuild adds the "EnvironmentToBuild" edges to the Build entity.
func (eu *EnvironmentUpdate) AddEnvironmentToBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddEnvironmentToBuildIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (eu *EnvironmentUpdate) Mutation() *EnvironmentMutation {
	return eu.mutation
}

// ClearEnvironmentToTag clears all "EnvironmentToTag" edges to the Tag entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToTag() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToTag()
	return eu
}

// RemoveEnvironmentToTagIDs removes the "EnvironmentToTag" edge to Tag entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToTagIDs(ids...)
	return eu
}

// RemoveEnvironmentToTag removes "EnvironmentToTag" edges to Tag entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveEnvironmentToTagIDs(ids...)
}

// ClearEnvironmentToUser clears all "EnvironmentToUser" edges to the User entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToUser() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToUser()
	return eu
}

// RemoveEnvironmentToUserIDs removes the "EnvironmentToUser" edge to User entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToUserIDs(ids...)
	return eu
}

// RemoveEnvironmentToUser removes "EnvironmentToUser" edges to User entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveEnvironmentToUserIDs(ids...)
}

// ClearEnvironmentToHost clears all "EnvironmentToHost" edges to the Host entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToHost() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToHost()
	return eu
}

// RemoveEnvironmentToHostIDs removes the "EnvironmentToHost" edge to Host entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToHostIDs(ids...)
	return eu
}

// RemoveEnvironmentToHost removes "EnvironmentToHost" edges to Host entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveEnvironmentToHostIDs(ids...)
}

// ClearEnvironmentToCompetition clears all "EnvironmentToCompetition" edges to the Competition entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToCompetition() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToCompetition()
	return eu
}

// RemoveEnvironmentToCompetitionIDs removes the "EnvironmentToCompetition" edge to Competition entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToCompetitionIDs(ids...)
	return eu
}

// RemoveEnvironmentToCompetition removes "EnvironmentToCompetition" edges to Competition entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveEnvironmentToCompetitionIDs(ids...)
}

// ClearEnvironmentToIdentity clears all "EnvironmentToIdentity" edges to the Identity entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToIdentity() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToIdentity()
	return eu
}

// RemoveEnvironmentToIdentityIDs removes the "EnvironmentToIdentity" edge to Identity entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIdentityIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToIdentityIDs(ids...)
	return eu
}

// RemoveEnvironmentToIdentity removes "EnvironmentToIdentity" edges to Identity entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIdentity(i ...*Identity) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveEnvironmentToIdentityIDs(ids...)
}

// ClearEnvironmentToCommand clears all "EnvironmentToCommand" edges to the Command entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToCommand() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToCommand()
	return eu
}

// RemoveEnvironmentToCommandIDs removes the "EnvironmentToCommand" edge to Command entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCommandIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToCommandIDs(ids...)
	return eu
}

// RemoveEnvironmentToCommand removes "EnvironmentToCommand" edges to Command entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCommand(c ...*Command) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveEnvironmentToCommandIDs(ids...)
}

// ClearEnvironmentToScript clears all "EnvironmentToScript" edges to the Script entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToScript() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToScript()
	return eu
}

// RemoveEnvironmentToScriptIDs removes the "EnvironmentToScript" edge to Script entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToScriptIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToScriptIDs(ids...)
	return eu
}

// RemoveEnvironmentToScript removes "EnvironmentToScript" edges to Script entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToScript(s ...*Script) *EnvironmentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveEnvironmentToScriptIDs(ids...)
}

// ClearEnvironmentToFileDownload clears all "EnvironmentToFileDownload" edges to the FileDownload entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToFileDownload() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToFileDownload()
	return eu
}

// RemoveEnvironmentToFileDownloadIDs removes the "EnvironmentToFileDownload" edge to FileDownload entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileDownloadIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToFileDownloadIDs(ids...)
	return eu
}

// RemoveEnvironmentToFileDownload removes "EnvironmentToFileDownload" edges to FileDownload entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileDownload(f ...*FileDownload) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveEnvironmentToFileDownloadIDs(ids...)
}

// ClearEnvironmentToFileDelete clears all "EnvironmentToFileDelete" edges to the FileDelete entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToFileDelete() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToFileDelete()
	return eu
}

// RemoveEnvironmentToFileDeleteIDs removes the "EnvironmentToFileDelete" edge to FileDelete entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileDeleteIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToFileDeleteIDs(ids...)
	return eu
}

// RemoveEnvironmentToFileDelete removes "EnvironmentToFileDelete" edges to FileDelete entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileDelete(f ...*FileDelete) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveEnvironmentToFileDeleteIDs(ids...)
}

// ClearEnvironmentToFileExtract clears all "EnvironmentToFileExtract" edges to the FileExtract entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToFileExtract() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToFileExtract()
	return eu
}

// RemoveEnvironmentToFileExtractIDs removes the "EnvironmentToFileExtract" edge to FileExtract entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileExtractIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToFileExtractIDs(ids...)
	return eu
}

// RemoveEnvironmentToFileExtract removes "EnvironmentToFileExtract" edges to FileExtract entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFileExtract(f ...*FileExtract) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveEnvironmentToFileExtractIDs(ids...)
}

// ClearEnvironmentToIncludedNetwork clears all "EnvironmentToIncludedNetwork" edges to the IncludedNetwork entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToIncludedNetwork() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToIncludedNetwork()
	return eu
}

// RemoveEnvironmentToIncludedNetworkIDs removes the "EnvironmentToIncludedNetwork" edge to IncludedNetwork entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToIncludedNetworkIDs(ids...)
	return eu
}

// RemoveEnvironmentToIncludedNetwork removes "EnvironmentToIncludedNetwork" edges to IncludedNetwork entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveEnvironmentToIncludedNetworkIDs(ids...)
}

// ClearEnvironmentToFinding clears all "EnvironmentToFinding" edges to the Finding entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToFinding() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToFinding()
	return eu
}

// RemoveEnvironmentToFindingIDs removes the "EnvironmentToFinding" edge to Finding entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFindingIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToFindingIDs(ids...)
	return eu
}

// RemoveEnvironmentToFinding removes "EnvironmentToFinding" edges to Finding entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToFinding(f ...*Finding) *EnvironmentUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveEnvironmentToFindingIDs(ids...)
}

// ClearEnvironmentToDNSRecord clears all "EnvironmentToDNSRecord" edges to the DNSRecord entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToDNSRecord() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToDNSRecord()
	return eu
}

// RemoveEnvironmentToDNSRecordIDs removes the "EnvironmentToDNSRecord" edge to DNSRecord entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToDNSRecordIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToDNSRecordIDs(ids...)
	return eu
}

// RemoveEnvironmentToDNSRecord removes "EnvironmentToDNSRecord" edges to DNSRecord entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToDNSRecord(d ...*DNSRecord) *EnvironmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveEnvironmentToDNSRecordIDs(ids...)
}

// ClearEnvironmentToDNS clears all "EnvironmentToDNS" edges to the DNS entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToDNS() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToDNS()
	return eu
}

// RemoveEnvironmentToDNSIDs removes the "EnvironmentToDNS" edge to DNS entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToDNSIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToDNSIDs(ids...)
	return eu
}

// RemoveEnvironmentToDNS removes "EnvironmentToDNS" edges to DNS entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToDNS(d ...*DNS) *EnvironmentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveEnvironmentToDNSIDs(ids...)
}

// ClearEnvironmentToNetwork clears all "EnvironmentToNetwork" edges to the Network entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToNetwork() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToNetwork()
	return eu
}

// RemoveEnvironmentToNetworkIDs removes the "EnvironmentToNetwork" edge to Network entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToNetworkIDs(ids...)
	return eu
}

// RemoveEnvironmentToNetwork removes "EnvironmentToNetwork" edges to Network entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveEnvironmentToNetworkIDs(ids...)
}

// ClearEnvironmentToHostDependency clears all "EnvironmentToHostDependency" edges to the HostDependency entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToHostDependency() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToHostDependency()
	return eu
}

// RemoveEnvironmentToHostDependencyIDs removes the "EnvironmentToHostDependency" edge to HostDependency entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHostDependencyIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToHostDependencyIDs(ids...)
	return eu
}

// RemoveEnvironmentToHostDependency removes "EnvironmentToHostDependency" edges to HostDependency entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHostDependency(h ...*HostDependency) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveEnvironmentToHostDependencyIDs(ids...)
}

// ClearEnvironmentToBuild clears all "EnvironmentToBuild" edges to the Build entity.
func (eu *EnvironmentUpdate) ClearEnvironmentToBuild() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToBuild()
	return eu
}

// RemoveEnvironmentToBuildIDs removes the "EnvironmentToBuild" edge to Build entities by IDs.
func (eu *EnvironmentUpdate) RemoveEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToBuildIDs(ids...)
	return eu
}

// RemoveEnvironmentToBuild removes "EnvironmentToBuild" edges to Build entities.
func (eu *EnvironmentUpdate) RemoveEnvironmentToBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveEnvironmentToBuildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvironmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvironmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvironmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvironmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnvironmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := eu.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := eu.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := eu.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := eu.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := eu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if eu.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToTagIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToUserIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToHostIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToCompetitionIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToIdentityIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToCommandIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToScriptIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToFileDownloadIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToFileDeleteIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToFileExtractIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToIncludedNetworkIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToFindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToFindingIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToFindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToFindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToDNSRecordIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToDNSIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToDNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToNetworkIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToHostDependencyIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToBuildIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnvironmentUpdateOne is the builder for updating a single Environment entity.
type EnvironmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// SetHclID sets the "hcl_id" field.
func (euo *EnvironmentUpdateOne) SetHclID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetHclID(s)
	return euo
}

// SetCompetitionID sets the "competition_id" field.
func (euo *EnvironmentUpdateOne) SetCompetitionID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetCompetitionID(s)
	return euo
}

// SetName sets the "name" field.
func (euo *EnvironmentUpdateOne) SetName(s string) *EnvironmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EnvironmentUpdateOne) SetDescription(s string) *EnvironmentUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetBuilder sets the "builder" field.
func (euo *EnvironmentUpdateOne) SetBuilder(s string) *EnvironmentUpdateOne {
	euo.mutation.SetBuilder(s)
	return euo
}

// SetTeamCount sets the "team_count" field.
func (euo *EnvironmentUpdateOne) SetTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetTeamCount()
	euo.mutation.SetTeamCount(i)
	return euo
}

// AddTeamCount adds i to the "team_count" field.
func (euo *EnvironmentUpdateOne) AddTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.AddTeamCount(i)
	return euo
}

// SetRevision sets the "revision" field.
func (euo *EnvironmentUpdateOne) SetRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetRevision()
	euo.mutation.SetRevision(i)
	return euo
}

// AddRevision adds i to the "revision" field.
func (euo *EnvironmentUpdateOne) AddRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.AddRevision(i)
	return euo
}

// SetAdminCidrs sets the "admin_cidrs" field.
func (euo *EnvironmentUpdateOne) SetAdminCidrs(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetAdminCidrs(s)
	return euo
}

// SetExposedVdiPorts sets the "exposed_vdi_ports" field.
func (euo *EnvironmentUpdateOne) SetExposedVdiPorts(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetExposedVdiPorts(s)
	return euo
}

// SetConfig sets the "config" field.
func (euo *EnvironmentUpdateOne) SetConfig(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetConfig(m)
	return euo
}

// SetTags sets the "tags" field.
func (euo *EnvironmentUpdateOne) SetTags(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetTags(m)
	return euo
}

// AddEnvironmentToTagIDs adds the "EnvironmentToTag" edge to the Tag entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToTagIDs(ids...)
	return euo
}

// AddEnvironmentToTag adds the "EnvironmentToTag" edges to the Tag entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddEnvironmentToTagIDs(ids...)
}

// AddEnvironmentToUserIDs adds the "EnvironmentToUser" edge to the User entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToUserIDs(ids...)
	return euo
}

// AddEnvironmentToUser adds the "EnvironmentToUser" edges to the User entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddEnvironmentToUserIDs(ids...)
}

// AddEnvironmentToHostIDs adds the "EnvironmentToHost" edge to the Host entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToHostIDs(ids...)
	return euo
}

// AddEnvironmentToHost adds the "EnvironmentToHost" edges to the Host entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddEnvironmentToHostIDs(ids...)
}

// AddEnvironmentToCompetitionIDs adds the "EnvironmentToCompetition" edge to the Competition entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToCompetitionIDs(ids...)
	return euo
}

// AddEnvironmentToCompetition adds the "EnvironmentToCompetition" edges to the Competition entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddEnvironmentToCompetitionIDs(ids...)
}

// AddEnvironmentToIdentityIDs adds the "EnvironmentToIdentity" edge to the Identity entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIdentityIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToIdentityIDs(ids...)
	return euo
}

// AddEnvironmentToIdentity adds the "EnvironmentToIdentity" edges to the Identity entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIdentity(i ...*Identity) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddEnvironmentToIdentityIDs(ids...)
}

// AddEnvironmentToCommandIDs adds the "EnvironmentToCommand" edge to the Command entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCommandIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToCommandIDs(ids...)
	return euo
}

// AddEnvironmentToCommand adds the "EnvironmentToCommand" edges to the Command entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCommand(c ...*Command) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddEnvironmentToCommandIDs(ids...)
}

// AddEnvironmentToScriptIDs adds the "EnvironmentToScript" edge to the Script entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToScriptIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToScriptIDs(ids...)
	return euo
}

// AddEnvironmentToScript adds the "EnvironmentToScript" edges to the Script entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToScript(s ...*Script) *EnvironmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddEnvironmentToScriptIDs(ids...)
}

// AddEnvironmentToFileDownloadIDs adds the "EnvironmentToFileDownload" edge to the FileDownload entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileDownloadIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToFileDownloadIDs(ids...)
	return euo
}

// AddEnvironmentToFileDownload adds the "EnvironmentToFileDownload" edges to the FileDownload entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileDownload(f ...*FileDownload) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddEnvironmentToFileDownloadIDs(ids...)
}

// AddEnvironmentToFileDeleteIDs adds the "EnvironmentToFileDelete" edge to the FileDelete entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileDeleteIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToFileDeleteIDs(ids...)
	return euo
}

// AddEnvironmentToFileDelete adds the "EnvironmentToFileDelete" edges to the FileDelete entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileDelete(f ...*FileDelete) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddEnvironmentToFileDeleteIDs(ids...)
}

// AddEnvironmentToFileExtractIDs adds the "EnvironmentToFileExtract" edge to the FileExtract entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileExtractIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToFileExtractIDs(ids...)
	return euo
}

// AddEnvironmentToFileExtract adds the "EnvironmentToFileExtract" edges to the FileExtract entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFileExtract(f ...*FileExtract) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddEnvironmentToFileExtractIDs(ids...)
}

// AddEnvironmentToIncludedNetworkIDs adds the "EnvironmentToIncludedNetwork" edge to the IncludedNetwork entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToIncludedNetworkIDs(ids...)
	return euo
}

// AddEnvironmentToIncludedNetwork adds the "EnvironmentToIncludedNetwork" edges to the IncludedNetwork entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddEnvironmentToIncludedNetworkIDs(ids...)
}

// AddEnvironmentToFindingIDs adds the "EnvironmentToFinding" edge to the Finding entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFindingIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToFindingIDs(ids...)
	return euo
}

// AddEnvironmentToFinding adds the "EnvironmentToFinding" edges to the Finding entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToFinding(f ...*Finding) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddEnvironmentToFindingIDs(ids...)
}

// AddEnvironmentToDNSRecordIDs adds the "EnvironmentToDNSRecord" edge to the DNSRecord entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToDNSRecordIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToDNSRecordIDs(ids...)
	return euo
}

// AddEnvironmentToDNSRecord adds the "EnvironmentToDNSRecord" edges to the DNSRecord entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToDNSRecord(d ...*DNSRecord) *EnvironmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddEnvironmentToDNSRecordIDs(ids...)
}

// AddEnvironmentToDNSIDs adds the "EnvironmentToDNS" edge to the DNS entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToDNSIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToDNSIDs(ids...)
	return euo
}

// AddEnvironmentToDNS adds the "EnvironmentToDNS" edges to the DNS entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToDNS(d ...*DNS) *EnvironmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddEnvironmentToDNSIDs(ids...)
}

// AddEnvironmentToNetworkIDs adds the "EnvironmentToNetwork" edge to the Network entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToNetworkIDs(ids...)
	return euo
}

// AddEnvironmentToNetwork adds the "EnvironmentToNetwork" edges to the Network entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddEnvironmentToNetworkIDs(ids...)
}

// AddEnvironmentToHostDependencyIDs adds the "EnvironmentToHostDependency" edge to the HostDependency entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHostDependencyIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToHostDependencyIDs(ids...)
	return euo
}

// AddEnvironmentToHostDependency adds the "EnvironmentToHostDependency" edges to the HostDependency entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHostDependency(h ...*HostDependency) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddEnvironmentToHostDependencyIDs(ids...)
}

// AddEnvironmentToBuildIDs adds the "EnvironmentToBuild" edge to the Build entity by IDs.
func (euo *EnvironmentUpdateOne) AddEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToBuildIDs(ids...)
	return euo
}

// AddEnvironmentToBuild adds the "EnvironmentToBuild" edges to the Build entity.
func (euo *EnvironmentUpdateOne) AddEnvironmentToBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddEnvironmentToBuildIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (euo *EnvironmentUpdateOne) Mutation() *EnvironmentMutation {
	return euo.mutation
}

// ClearEnvironmentToTag clears all "EnvironmentToTag" edges to the Tag entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToTag() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToTag()
	return euo
}

// RemoveEnvironmentToTagIDs removes the "EnvironmentToTag" edge to Tag entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToTagIDs(ids...)
	return euo
}

// RemoveEnvironmentToTag removes "EnvironmentToTag" edges to Tag entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveEnvironmentToTagIDs(ids...)
}

// ClearEnvironmentToUser clears all "EnvironmentToUser" edges to the User entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToUser() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToUser()
	return euo
}

// RemoveEnvironmentToUserIDs removes the "EnvironmentToUser" edge to User entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToUserIDs(ids...)
	return euo
}

// RemoveEnvironmentToUser removes "EnvironmentToUser" edges to User entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveEnvironmentToUserIDs(ids...)
}

// ClearEnvironmentToHost clears all "EnvironmentToHost" edges to the Host entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToHost() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToHost()
	return euo
}

// RemoveEnvironmentToHostIDs removes the "EnvironmentToHost" edge to Host entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToHostIDs(ids...)
	return euo
}

// RemoveEnvironmentToHost removes "EnvironmentToHost" edges to Host entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveEnvironmentToHostIDs(ids...)
}

// ClearEnvironmentToCompetition clears all "EnvironmentToCompetition" edges to the Competition entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToCompetition() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToCompetition()
	return euo
}

// RemoveEnvironmentToCompetitionIDs removes the "EnvironmentToCompetition" edge to Competition entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToCompetitionIDs(ids...)
	return euo
}

// RemoveEnvironmentToCompetition removes "EnvironmentToCompetition" edges to Competition entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveEnvironmentToCompetitionIDs(ids...)
}

// ClearEnvironmentToIdentity clears all "EnvironmentToIdentity" edges to the Identity entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToIdentity() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToIdentity()
	return euo
}

// RemoveEnvironmentToIdentityIDs removes the "EnvironmentToIdentity" edge to Identity entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIdentityIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToIdentityIDs(ids...)
	return euo
}

// RemoveEnvironmentToIdentity removes "EnvironmentToIdentity" edges to Identity entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIdentity(i ...*Identity) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveEnvironmentToIdentityIDs(ids...)
}

// ClearEnvironmentToCommand clears all "EnvironmentToCommand" edges to the Command entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToCommand() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToCommand()
	return euo
}

// RemoveEnvironmentToCommandIDs removes the "EnvironmentToCommand" edge to Command entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCommandIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToCommandIDs(ids...)
	return euo
}

// RemoveEnvironmentToCommand removes "EnvironmentToCommand" edges to Command entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCommand(c ...*Command) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveEnvironmentToCommandIDs(ids...)
}

// ClearEnvironmentToScript clears all "EnvironmentToScript" edges to the Script entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToScript() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToScript()
	return euo
}

// RemoveEnvironmentToScriptIDs removes the "EnvironmentToScript" edge to Script entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToScriptIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToScriptIDs(ids...)
	return euo
}

// RemoveEnvironmentToScript removes "EnvironmentToScript" edges to Script entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToScript(s ...*Script) *EnvironmentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveEnvironmentToScriptIDs(ids...)
}

// ClearEnvironmentToFileDownload clears all "EnvironmentToFileDownload" edges to the FileDownload entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToFileDownload() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToFileDownload()
	return euo
}

// RemoveEnvironmentToFileDownloadIDs removes the "EnvironmentToFileDownload" edge to FileDownload entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileDownloadIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToFileDownloadIDs(ids...)
	return euo
}

// RemoveEnvironmentToFileDownload removes "EnvironmentToFileDownload" edges to FileDownload entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileDownload(f ...*FileDownload) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveEnvironmentToFileDownloadIDs(ids...)
}

// ClearEnvironmentToFileDelete clears all "EnvironmentToFileDelete" edges to the FileDelete entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToFileDelete() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToFileDelete()
	return euo
}

// RemoveEnvironmentToFileDeleteIDs removes the "EnvironmentToFileDelete" edge to FileDelete entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileDeleteIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToFileDeleteIDs(ids...)
	return euo
}

// RemoveEnvironmentToFileDelete removes "EnvironmentToFileDelete" edges to FileDelete entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileDelete(f ...*FileDelete) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveEnvironmentToFileDeleteIDs(ids...)
}

// ClearEnvironmentToFileExtract clears all "EnvironmentToFileExtract" edges to the FileExtract entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToFileExtract() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToFileExtract()
	return euo
}

// RemoveEnvironmentToFileExtractIDs removes the "EnvironmentToFileExtract" edge to FileExtract entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileExtractIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToFileExtractIDs(ids...)
	return euo
}

// RemoveEnvironmentToFileExtract removes "EnvironmentToFileExtract" edges to FileExtract entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFileExtract(f ...*FileExtract) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveEnvironmentToFileExtractIDs(ids...)
}

// ClearEnvironmentToIncludedNetwork clears all "EnvironmentToIncludedNetwork" edges to the IncludedNetwork entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToIncludedNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToIncludedNetwork()
	return euo
}

// RemoveEnvironmentToIncludedNetworkIDs removes the "EnvironmentToIncludedNetwork" edge to IncludedNetwork entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToIncludedNetworkIDs(ids...)
	return euo
}

// RemoveEnvironmentToIncludedNetwork removes "EnvironmentToIncludedNetwork" edges to IncludedNetwork entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveEnvironmentToIncludedNetworkIDs(ids...)
}

// ClearEnvironmentToFinding clears all "EnvironmentToFinding" edges to the Finding entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToFinding() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToFinding()
	return euo
}

// RemoveEnvironmentToFindingIDs removes the "EnvironmentToFinding" edge to Finding entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFindingIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToFindingIDs(ids...)
	return euo
}

// RemoveEnvironmentToFinding removes "EnvironmentToFinding" edges to Finding entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToFinding(f ...*Finding) *EnvironmentUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveEnvironmentToFindingIDs(ids...)
}

// ClearEnvironmentToDNSRecord clears all "EnvironmentToDNSRecord" edges to the DNSRecord entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToDNSRecord() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToDNSRecord()
	return euo
}

// RemoveEnvironmentToDNSRecordIDs removes the "EnvironmentToDNSRecord" edge to DNSRecord entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToDNSRecordIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToDNSRecordIDs(ids...)
	return euo
}

// RemoveEnvironmentToDNSRecord removes "EnvironmentToDNSRecord" edges to DNSRecord entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToDNSRecord(d ...*DNSRecord) *EnvironmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveEnvironmentToDNSRecordIDs(ids...)
}

// ClearEnvironmentToDNS clears all "EnvironmentToDNS" edges to the DNS entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToDNS() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToDNS()
	return euo
}

// RemoveEnvironmentToDNSIDs removes the "EnvironmentToDNS" edge to DNS entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToDNSIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToDNSIDs(ids...)
	return euo
}

// RemoveEnvironmentToDNS removes "EnvironmentToDNS" edges to DNS entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToDNS(d ...*DNS) *EnvironmentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveEnvironmentToDNSIDs(ids...)
}

// ClearEnvironmentToNetwork clears all "EnvironmentToNetwork" edges to the Network entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToNetwork()
	return euo
}

// RemoveEnvironmentToNetworkIDs removes the "EnvironmentToNetwork" edge to Network entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToNetworkIDs(ids...)
	return euo
}

// RemoveEnvironmentToNetwork removes "EnvironmentToNetwork" edges to Network entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveEnvironmentToNetworkIDs(ids...)
}

// ClearEnvironmentToHostDependency clears all "EnvironmentToHostDependency" edges to the HostDependency entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToHostDependency() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToHostDependency()
	return euo
}

// RemoveEnvironmentToHostDependencyIDs removes the "EnvironmentToHostDependency" edge to HostDependency entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHostDependencyIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToHostDependencyIDs(ids...)
	return euo
}

// RemoveEnvironmentToHostDependency removes "EnvironmentToHostDependency" edges to HostDependency entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHostDependency(h ...*HostDependency) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveEnvironmentToHostDependencyIDs(ids...)
}

// ClearEnvironmentToBuild clears all "EnvironmentToBuild" edges to the Build entity.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToBuild() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToBuild()
	return euo
}

// RemoveEnvironmentToBuildIDs removes the "EnvironmentToBuild" edge to Build entities by IDs.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToBuildIDs(ids...)
	return euo
}

// RemoveEnvironmentToBuild removes "EnvironmentToBuild" edges to Build entities.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveEnvironmentToBuildIDs(ids...)
}

// Save executes the query and returns the updated Environment entity.
func (euo *EnvironmentUpdateOne) Save(ctx context.Context) (*Environment, error) {
	var (
		err  error
		node *Environment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) SaveX(ctx context.Context) *Environment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvironmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnvironmentUpdateOne) sqlSave(ctx context.Context) (_node *Environment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Environment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := euo.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := euo.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := euo.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := euo.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := euo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if euo.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToTagIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToUserIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToHostIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToCompetitionIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToIdentityIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToIdentityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToIdentityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIdentityTable,
			Columns: environment.EnvironmentToIdentityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: identity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToCommandIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToCommandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToCommandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCommandTable,
			Columns: environment.EnvironmentToCommandPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: command.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToScriptIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToScriptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToScriptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToScriptTable,
			Columns: environment.EnvironmentToScriptPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: script.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToFileDownloadIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToFileDownloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToFileDownloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDownloadTable,
			Columns: environment.EnvironmentToFileDownloadPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedownload.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToFileDeleteIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToFileDeleteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToFileDeleteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileDeleteTable,
			Columns: environment.EnvironmentToFileDeletePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: filedelete.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToFileExtractIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToFileExtractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToFileExtractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFileExtractTable,
			Columns: environment.EnvironmentToFileExtractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fileextract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToIncludedNetworkIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToFindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToFindingIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToFindingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToFindingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToFindingTable,
			Columns: environment.EnvironmentToFindingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: finding.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToDNSRecordIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToDNSRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToDNSRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSRecordTable,
			Columns: environment.EnvironmentToDNSRecordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dnsrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToDNSIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToDNSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToDNSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToDNSTable,
			Columns: environment.EnvironmentToDNSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dns.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToNetworkIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToHostDependencyIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToHostDependencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToHostDependencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostDependencyTable,
			Columns: []string{environment.EnvironmentToHostDependencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hostdependency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToBuildIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   environment.EnvironmentToBuildTable,
			Columns: []string{environment.EnvironmentToBuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Environment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
