// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gen0cide/laforge/ent/build"
	"github.com/gen0cide/laforge/ent/competition"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/includednetwork"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
	"github.com/gen0cide/laforge/ent/tag"
	"github.com/gen0cide/laforge/ent/team"
	"github.com/gen0cide/laforge/ent/user"
)

// EnvironmentUpdate is the builder for updating Environment entities.
type EnvironmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// Where adds a new predicate for the builder.
func (eu *EnvironmentUpdate) Where(ps ...predicate.Environment) *EnvironmentUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetHclID sets the hcl_id field.
func (eu *EnvironmentUpdate) SetHclID(s string) *EnvironmentUpdate {
	eu.mutation.SetHclID(s)
	return eu
}

// SetCompetitionID sets the competition_id field.
func (eu *EnvironmentUpdate) SetCompetitionID(s string) *EnvironmentUpdate {
	eu.mutation.SetCompetitionID(s)
	return eu
}

// SetName sets the name field.
func (eu *EnvironmentUpdate) SetName(s string) *EnvironmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDescription sets the description field.
func (eu *EnvironmentUpdate) SetDescription(s string) *EnvironmentUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetBuilder sets the builder field.
func (eu *EnvironmentUpdate) SetBuilder(s string) *EnvironmentUpdate {
	eu.mutation.SetBuilder(s)
	return eu
}

// SetTeamCount sets the team_count field.
func (eu *EnvironmentUpdate) SetTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.ResetTeamCount()
	eu.mutation.SetTeamCount(i)
	return eu
}

// AddTeamCount adds i to team_count.
func (eu *EnvironmentUpdate) AddTeamCount(i int) *EnvironmentUpdate {
	eu.mutation.AddTeamCount(i)
	return eu
}

// SetRevision sets the revision field.
func (eu *EnvironmentUpdate) SetRevision(i int) *EnvironmentUpdate {
	eu.mutation.ResetRevision()
	eu.mutation.SetRevision(i)
	return eu
}

// AddRevision adds i to revision.
func (eu *EnvironmentUpdate) AddRevision(i int) *EnvironmentUpdate {
	eu.mutation.AddRevision(i)
	return eu
}

// SetAdminCidrs sets the admin_cidrs field.
func (eu *EnvironmentUpdate) SetAdminCidrs(s []string) *EnvironmentUpdate {
	eu.mutation.SetAdminCidrs(s)
	return eu
}

// SetExposedVdiPorts sets the exposed_vdi_ports field.
func (eu *EnvironmentUpdate) SetExposedVdiPorts(s []string) *EnvironmentUpdate {
	eu.mutation.SetExposedVdiPorts(s)
	return eu
}

// SetConfig sets the config field.
func (eu *EnvironmentUpdate) SetConfig(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetConfig(m)
	return eu
}

// SetTags sets the tags field.
func (eu *EnvironmentUpdate) SetTags(m map[string]string) *EnvironmentUpdate {
	eu.mutation.SetTags(m)
	return eu
}

// AddEnvironmentToTagIDs adds the EnvironmentToTag edge to Tag by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToTagIDs(ids...)
	return eu
}

// AddEnvironmentToTag adds the EnvironmentToTag edges to Tag.
func (eu *EnvironmentUpdate) AddEnvironmentToTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddEnvironmentToTagIDs(ids...)
}

// AddEnvironmentToUserIDs adds the EnvironmentToUser edge to User by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToUserIDs(ids...)
	return eu
}

// AddEnvironmentToUser adds the EnvironmentToUser edges to User.
func (eu *EnvironmentUpdate) AddEnvironmentToUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddEnvironmentToUserIDs(ids...)
}

// AddEnvironmentToHostIDs adds the EnvironmentToHost edge to Host by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToHostIDs(ids...)
	return eu
}

// AddEnvironmentToHost adds the EnvironmentToHost edges to Host.
func (eu *EnvironmentUpdate) AddEnvironmentToHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddEnvironmentToHostIDs(ids...)
}

// AddEnvironmentToCompetitionIDs adds the EnvironmentToCompetition edge to Competition by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToCompetitionIDs(ids...)
	return eu
}

// AddEnvironmentToCompetition adds the EnvironmentToCompetition edges to Competition.
func (eu *EnvironmentUpdate) AddEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddEnvironmentToCompetitionIDs(ids...)
}

// AddEnvironmentToBuildIDs adds the EnvironmentToBuild edge to Build by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToBuildIDs(ids...)
	return eu
}

// AddEnvironmentToBuild adds the EnvironmentToBuild edges to Build.
func (eu *EnvironmentUpdate) AddEnvironmentToBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.AddEnvironmentToBuildIDs(ids...)
}

// AddEnvironmentToIncludedNetworkIDs adds the EnvironmentToIncludedNetwork edge to IncludedNetwork by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToIncludedNetworkIDs(ids...)
	return eu
}

// AddEnvironmentToIncludedNetwork adds the EnvironmentToIncludedNetwork edges to IncludedNetwork.
func (eu *EnvironmentUpdate) AddEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddEnvironmentToIncludedNetworkIDs(ids...)
}

// AddEnvironmentToNetworkIDs adds the EnvironmentToNetwork edge to Network by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToNetworkIDs(ids...)
	return eu
}

// AddEnvironmentToNetwork adds the EnvironmentToNetwork edges to Network.
func (eu *EnvironmentUpdate) AddEnvironmentToNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.AddEnvironmentToNetworkIDs(ids...)
}

// AddEnvironmentToTeamIDs adds the EnvironmentToTeam edge to Team by ids.
func (eu *EnvironmentUpdate) AddEnvironmentToTeamIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.AddEnvironmentToTeamIDs(ids...)
	return eu
}

// AddEnvironmentToTeam adds the EnvironmentToTeam edges to Team.
func (eu *EnvironmentUpdate) AddEnvironmentToTeam(t ...*Team) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddEnvironmentToTeamIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (eu *EnvironmentUpdate) Mutation() *EnvironmentMutation {
	return eu.mutation
}

// ClearEnvironmentToTag clears all "EnvironmentToTag" edges to type Tag.
func (eu *EnvironmentUpdate) ClearEnvironmentToTag() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToTag()
	return eu
}

// RemoveEnvironmentToTagIDs removes the EnvironmentToTag edge to Tag by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTagIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToTagIDs(ids...)
	return eu
}

// RemoveEnvironmentToTag removes EnvironmentToTag edges to Tag.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTag(t ...*Tag) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveEnvironmentToTagIDs(ids...)
}

// ClearEnvironmentToUser clears all "EnvironmentToUser" edges to type User.
func (eu *EnvironmentUpdate) ClearEnvironmentToUser() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToUser()
	return eu
}

// RemoveEnvironmentToUserIDs removes the EnvironmentToUser edge to User by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToUserIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToUserIDs(ids...)
	return eu
}

// RemoveEnvironmentToUser removes EnvironmentToUser edges to User.
func (eu *EnvironmentUpdate) RemoveEnvironmentToUser(u ...*User) *EnvironmentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveEnvironmentToUserIDs(ids...)
}

// ClearEnvironmentToHost clears all "EnvironmentToHost" edges to type Host.
func (eu *EnvironmentUpdate) ClearEnvironmentToHost() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToHost()
	return eu
}

// RemoveEnvironmentToHostIDs removes the EnvironmentToHost edge to Host by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHostIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToHostIDs(ids...)
	return eu
}

// RemoveEnvironmentToHost removes EnvironmentToHost edges to Host.
func (eu *EnvironmentUpdate) RemoveEnvironmentToHost(h ...*Host) *EnvironmentUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveEnvironmentToHostIDs(ids...)
}

// ClearEnvironmentToCompetition clears all "EnvironmentToCompetition" edges to type Competition.
func (eu *EnvironmentUpdate) ClearEnvironmentToCompetition() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToCompetition()
	return eu
}

// RemoveEnvironmentToCompetitionIDs removes the EnvironmentToCompetition edge to Competition by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToCompetitionIDs(ids...)
	return eu
}

// RemoveEnvironmentToCompetition removes EnvironmentToCompetition edges to Competition.
func (eu *EnvironmentUpdate) RemoveEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveEnvironmentToCompetitionIDs(ids...)
}

// ClearEnvironmentToBuild clears all "EnvironmentToBuild" edges to type Build.
func (eu *EnvironmentUpdate) ClearEnvironmentToBuild() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToBuild()
	return eu
}

// RemoveEnvironmentToBuildIDs removes the EnvironmentToBuild edge to Build by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToBuildIDs(ids...)
	return eu
}

// RemoveEnvironmentToBuild removes EnvironmentToBuild edges to Build.
func (eu *EnvironmentUpdate) RemoveEnvironmentToBuild(b ...*Build) *EnvironmentUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return eu.RemoveEnvironmentToBuildIDs(ids...)
}

// ClearEnvironmentToIncludedNetwork clears all "EnvironmentToIncludedNetwork" edges to type IncludedNetwork.
func (eu *EnvironmentUpdate) ClearEnvironmentToIncludedNetwork() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToIncludedNetwork()
	return eu
}

// RemoveEnvironmentToIncludedNetworkIDs removes the EnvironmentToIncludedNetwork edge to IncludedNetwork by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToIncludedNetworkIDs(ids...)
	return eu
}

// RemoveEnvironmentToIncludedNetwork removes EnvironmentToIncludedNetwork edges to IncludedNetwork.
func (eu *EnvironmentUpdate) RemoveEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveEnvironmentToIncludedNetworkIDs(ids...)
}

// ClearEnvironmentToNetwork clears all "EnvironmentToNetwork" edges to type Network.
func (eu *EnvironmentUpdate) ClearEnvironmentToNetwork() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToNetwork()
	return eu
}

// RemoveEnvironmentToNetworkIDs removes the EnvironmentToNetwork edge to Network by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToNetworkIDs(ids...)
	return eu
}

// RemoveEnvironmentToNetwork removes EnvironmentToNetwork edges to Network.
func (eu *EnvironmentUpdate) RemoveEnvironmentToNetwork(n ...*Network) *EnvironmentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return eu.RemoveEnvironmentToNetworkIDs(ids...)
}

// ClearEnvironmentToTeam clears all "EnvironmentToTeam" edges to type Team.
func (eu *EnvironmentUpdate) ClearEnvironmentToTeam() *EnvironmentUpdate {
	eu.mutation.ClearEnvironmentToTeam()
	return eu
}

// RemoveEnvironmentToTeamIDs removes the EnvironmentToTeam edge to Team by ids.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTeamIDs(ids ...int) *EnvironmentUpdate {
	eu.mutation.RemoveEnvironmentToTeamIDs(ids...)
	return eu
}

// RemoveEnvironmentToTeam removes EnvironmentToTeam edges to Team.
func (eu *EnvironmentUpdate) RemoveEnvironmentToTeam(t ...*Team) *EnvironmentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveEnvironmentToTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnvironmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnvironmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnvironmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnvironmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EnvironmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := eu.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := eu.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := eu.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := eu.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := eu.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := eu.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := eu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if eu.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToTagIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToUserIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToHostIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToCompetitionIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToBuildIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToIncludedNetworkIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToNetworkIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnvironmentToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEnvironmentToTeamIDs(); len(nodes) > 0 && !eu.mutation.EnvironmentToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnvironmentToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EnvironmentUpdateOne is the builder for updating a single Environment entity.
type EnvironmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *EnvironmentMutation
}

// SetHclID sets the hcl_id field.
func (euo *EnvironmentUpdateOne) SetHclID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetHclID(s)
	return euo
}

// SetCompetitionID sets the competition_id field.
func (euo *EnvironmentUpdateOne) SetCompetitionID(s string) *EnvironmentUpdateOne {
	euo.mutation.SetCompetitionID(s)
	return euo
}

// SetName sets the name field.
func (euo *EnvironmentUpdateOne) SetName(s string) *EnvironmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDescription sets the description field.
func (euo *EnvironmentUpdateOne) SetDescription(s string) *EnvironmentUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetBuilder sets the builder field.
func (euo *EnvironmentUpdateOne) SetBuilder(s string) *EnvironmentUpdateOne {
	euo.mutation.SetBuilder(s)
	return euo
}

// SetTeamCount sets the team_count field.
func (euo *EnvironmentUpdateOne) SetTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetTeamCount()
	euo.mutation.SetTeamCount(i)
	return euo
}

// AddTeamCount adds i to team_count.
func (euo *EnvironmentUpdateOne) AddTeamCount(i int) *EnvironmentUpdateOne {
	euo.mutation.AddTeamCount(i)
	return euo
}

// SetRevision sets the revision field.
func (euo *EnvironmentUpdateOne) SetRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.ResetRevision()
	euo.mutation.SetRevision(i)
	return euo
}

// AddRevision adds i to revision.
func (euo *EnvironmentUpdateOne) AddRevision(i int) *EnvironmentUpdateOne {
	euo.mutation.AddRevision(i)
	return euo
}

// SetAdminCidrs sets the admin_cidrs field.
func (euo *EnvironmentUpdateOne) SetAdminCidrs(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetAdminCidrs(s)
	return euo
}

// SetExposedVdiPorts sets the exposed_vdi_ports field.
func (euo *EnvironmentUpdateOne) SetExposedVdiPorts(s []string) *EnvironmentUpdateOne {
	euo.mutation.SetExposedVdiPorts(s)
	return euo
}

// SetConfig sets the config field.
func (euo *EnvironmentUpdateOne) SetConfig(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetConfig(m)
	return euo
}

// SetTags sets the tags field.
func (euo *EnvironmentUpdateOne) SetTags(m map[string]string) *EnvironmentUpdateOne {
	euo.mutation.SetTags(m)
	return euo
}

// AddEnvironmentToTagIDs adds the EnvironmentToTag edge to Tag by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToTagIDs(ids...)
	return euo
}

// AddEnvironmentToTag adds the EnvironmentToTag edges to Tag.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddEnvironmentToTagIDs(ids...)
}

// AddEnvironmentToUserIDs adds the EnvironmentToUser edge to User by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToUserIDs(ids...)
	return euo
}

// AddEnvironmentToUser adds the EnvironmentToUser edges to User.
func (euo *EnvironmentUpdateOne) AddEnvironmentToUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddEnvironmentToUserIDs(ids...)
}

// AddEnvironmentToHostIDs adds the EnvironmentToHost edge to Host by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToHostIDs(ids...)
	return euo
}

// AddEnvironmentToHost adds the EnvironmentToHost edges to Host.
func (euo *EnvironmentUpdateOne) AddEnvironmentToHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddEnvironmentToHostIDs(ids...)
}

// AddEnvironmentToCompetitionIDs adds the EnvironmentToCompetition edge to Competition by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToCompetitionIDs(ids...)
	return euo
}

// AddEnvironmentToCompetition adds the EnvironmentToCompetition edges to Competition.
func (euo *EnvironmentUpdateOne) AddEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddEnvironmentToCompetitionIDs(ids...)
}

// AddEnvironmentToBuildIDs adds the EnvironmentToBuild edge to Build by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToBuildIDs(ids...)
	return euo
}

// AddEnvironmentToBuild adds the EnvironmentToBuild edges to Build.
func (euo *EnvironmentUpdateOne) AddEnvironmentToBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.AddEnvironmentToBuildIDs(ids...)
}

// AddEnvironmentToIncludedNetworkIDs adds the EnvironmentToIncludedNetwork edge to IncludedNetwork by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToIncludedNetworkIDs(ids...)
	return euo
}

// AddEnvironmentToIncludedNetwork adds the EnvironmentToIncludedNetwork edges to IncludedNetwork.
func (euo *EnvironmentUpdateOne) AddEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddEnvironmentToIncludedNetworkIDs(ids...)
}

// AddEnvironmentToNetworkIDs adds the EnvironmentToNetwork edge to Network by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToNetworkIDs(ids...)
	return euo
}

// AddEnvironmentToNetwork adds the EnvironmentToNetwork edges to Network.
func (euo *EnvironmentUpdateOne) AddEnvironmentToNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.AddEnvironmentToNetworkIDs(ids...)
}

// AddEnvironmentToTeamIDs adds the EnvironmentToTeam edge to Team by ids.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTeamIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.AddEnvironmentToTeamIDs(ids...)
	return euo
}

// AddEnvironmentToTeam adds the EnvironmentToTeam edges to Team.
func (euo *EnvironmentUpdateOne) AddEnvironmentToTeam(t ...*Team) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddEnvironmentToTeamIDs(ids...)
}

// Mutation returns the EnvironmentMutation object of the builder.
func (euo *EnvironmentUpdateOne) Mutation() *EnvironmentMutation {
	return euo.mutation
}

// ClearEnvironmentToTag clears all "EnvironmentToTag" edges to type Tag.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToTag() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToTag()
	return euo
}

// RemoveEnvironmentToTagIDs removes the EnvironmentToTag edge to Tag by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTagIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToTagIDs(ids...)
	return euo
}

// RemoveEnvironmentToTag removes EnvironmentToTag edges to Tag.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTag(t ...*Tag) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveEnvironmentToTagIDs(ids...)
}

// ClearEnvironmentToUser clears all "EnvironmentToUser" edges to type User.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToUser() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToUser()
	return euo
}

// RemoveEnvironmentToUserIDs removes the EnvironmentToUser edge to User by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToUserIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToUserIDs(ids...)
	return euo
}

// RemoveEnvironmentToUser removes EnvironmentToUser edges to User.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToUser(u ...*User) *EnvironmentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveEnvironmentToUserIDs(ids...)
}

// ClearEnvironmentToHost clears all "EnvironmentToHost" edges to type Host.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToHost() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToHost()
	return euo
}

// RemoveEnvironmentToHostIDs removes the EnvironmentToHost edge to Host by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHostIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToHostIDs(ids...)
	return euo
}

// RemoveEnvironmentToHost removes EnvironmentToHost edges to Host.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToHost(h ...*Host) *EnvironmentUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveEnvironmentToHostIDs(ids...)
}

// ClearEnvironmentToCompetition clears all "EnvironmentToCompetition" edges to type Competition.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToCompetition() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToCompetition()
	return euo
}

// RemoveEnvironmentToCompetitionIDs removes the EnvironmentToCompetition edge to Competition by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCompetitionIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToCompetitionIDs(ids...)
	return euo
}

// RemoveEnvironmentToCompetition removes EnvironmentToCompetition edges to Competition.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToCompetition(c ...*Competition) *EnvironmentUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveEnvironmentToCompetitionIDs(ids...)
}

// ClearEnvironmentToBuild clears all "EnvironmentToBuild" edges to type Build.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToBuild() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToBuild()
	return euo
}

// RemoveEnvironmentToBuildIDs removes the EnvironmentToBuild edge to Build by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToBuildIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToBuildIDs(ids...)
	return euo
}

// RemoveEnvironmentToBuild removes EnvironmentToBuild edges to Build.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToBuild(b ...*Build) *EnvironmentUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return euo.RemoveEnvironmentToBuildIDs(ids...)
}

// ClearEnvironmentToIncludedNetwork clears all "EnvironmentToIncludedNetwork" edges to type IncludedNetwork.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToIncludedNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToIncludedNetwork()
	return euo
}

// RemoveEnvironmentToIncludedNetworkIDs removes the EnvironmentToIncludedNetwork edge to IncludedNetwork by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIncludedNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToIncludedNetworkIDs(ids...)
	return euo
}

// RemoveEnvironmentToIncludedNetwork removes EnvironmentToIncludedNetwork edges to IncludedNetwork.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToIncludedNetwork(i ...*IncludedNetwork) *EnvironmentUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveEnvironmentToIncludedNetworkIDs(ids...)
}

// ClearEnvironmentToNetwork clears all "EnvironmentToNetwork" edges to type Network.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToNetwork() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToNetwork()
	return euo
}

// RemoveEnvironmentToNetworkIDs removes the EnvironmentToNetwork edge to Network by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToNetworkIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToNetworkIDs(ids...)
	return euo
}

// RemoveEnvironmentToNetwork removes EnvironmentToNetwork edges to Network.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToNetwork(n ...*Network) *EnvironmentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return euo.RemoveEnvironmentToNetworkIDs(ids...)
}

// ClearEnvironmentToTeam clears all "EnvironmentToTeam" edges to type Team.
func (euo *EnvironmentUpdateOne) ClearEnvironmentToTeam() *EnvironmentUpdateOne {
	euo.mutation.ClearEnvironmentToTeam()
	return euo
}

// RemoveEnvironmentToTeamIDs removes the EnvironmentToTeam edge to Team by ids.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTeamIDs(ids ...int) *EnvironmentUpdateOne {
	euo.mutation.RemoveEnvironmentToTeamIDs(ids...)
	return euo
}

// RemoveEnvironmentToTeam removes EnvironmentToTeam edges to Team.
func (euo *EnvironmentUpdateOne) RemoveEnvironmentToTeam(t ...*Team) *EnvironmentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveEnvironmentToTeamIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EnvironmentUpdateOne) Save(ctx context.Context) (*Environment, error) {
	var (
		err  error
		node *Environment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnvironmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) SaveX(ctx context.Context) *Environment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnvironmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnvironmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EnvironmentUpdateOne) sqlSave(ctx context.Context) (_node *Environment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   environment.Table,
			Columns: environment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: environment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Environment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.HclID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldHclID,
		})
	}
	if value, ok := euo.mutation.CompetitionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldCompetitionID,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldName,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldDescription,
		})
	}
	if value, ok := euo.mutation.Builder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: environment.FieldBuilder,
		})
	}
	if value, ok := euo.mutation.TeamCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.AddedTeamCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldTeamCount,
		})
	}
	if value, ok := euo.mutation.Revision(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AddedRevision(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: environment.FieldRevision,
		})
	}
	if value, ok := euo.mutation.AdminCidrs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldAdminCidrs,
		})
	}
	if value, ok := euo.mutation.ExposedVdiPorts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldExposedVdiPorts,
		})
	}
	if value, ok := euo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldConfig,
		})
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: environment.FieldTags,
		})
	}
	if euo.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToTagIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   environment.EnvironmentToTagTable,
			Columns: []string{environment.EnvironmentToTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToUserIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToUserTable,
			Columns: environment.EnvironmentToUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToHostIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToHostTable,
			Columns: environment.EnvironmentToHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToCompetitionIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToCompetitionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToCompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToCompetitionTable,
			Columns: environment.EnvironmentToCompetitionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: competition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToBuildIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToBuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToBuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   environment.EnvironmentToBuildTable,
			Columns: environment.EnvironmentToBuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: build.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToIncludedNetworkIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToIncludedNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToIncludedNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToIncludedNetworkTable,
			Columns: environment.EnvironmentToIncludedNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: includednetwork.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToNetworkIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToNetworkTable,
			Columns: environment.EnvironmentToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnvironmentToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEnvironmentToTeamIDs(); len(nodes) > 0 && !euo.mutation.EnvironmentToTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnvironmentToTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   environment.EnvironmentToTeamTable,
			Columns: environment.EnvironmentToTeamPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Environment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{environment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
