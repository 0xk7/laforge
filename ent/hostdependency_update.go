// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/environment"
	"github.com/gen0cide/laforge/ent/host"
	"github.com/gen0cide/laforge/ent/hostdependency"
	"github.com/gen0cide/laforge/ent/network"
	"github.com/gen0cide/laforge/ent/predicate"
)

// HostDependencyUpdate is the builder for updating HostDependency entities.
type HostDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *HostDependencyMutation
}

// Where adds a new predicate for the HostDependencyUpdate builder.
func (hdu *HostDependencyUpdate) Where(ps ...predicate.HostDependency) *HostDependencyUpdate {
	hdu.mutation.predicates = append(hdu.mutation.predicates, ps...)
	return hdu
}

// SetHostID sets the "host_id" field.
func (hdu *HostDependencyUpdate) SetHostID(s string) *HostDependencyUpdate {
	hdu.mutation.SetHostID(s)
	return hdu
}

// SetNetworkID sets the "network_id" field.
func (hdu *HostDependencyUpdate) SetNetworkID(s string) *HostDependencyUpdate {
	hdu.mutation.SetNetworkID(s)
	return hdu
}

// AddHostDependencyToDependOnHostIDs adds the "HostDependencyToDependOnHost" edge to the Host entity by IDs.
func (hdu *HostDependencyUpdate) AddHostDependencyToDependOnHostIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.AddHostDependencyToDependOnHostIDs(ids...)
	return hdu
}

// AddHostDependencyToDependOnHost adds the "HostDependencyToDependOnHost" edges to the Host entity.
func (hdu *HostDependencyUpdate) AddHostDependencyToDependOnHost(h ...*Host) *HostDependencyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hdu.AddHostDependencyToDependOnHostIDs(ids...)
}

// AddHostDependencyToDependByHostIDs adds the "HostDependencyToDependByHost" edge to the Host entity by IDs.
func (hdu *HostDependencyUpdate) AddHostDependencyToDependByHostIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.AddHostDependencyToDependByHostIDs(ids...)
	return hdu
}

// AddHostDependencyToDependByHost adds the "HostDependencyToDependByHost" edges to the Host entity.
func (hdu *HostDependencyUpdate) AddHostDependencyToDependByHost(h ...*Host) *HostDependencyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hdu.AddHostDependencyToDependByHostIDs(ids...)
}

// AddHostDependencyToNetworkIDs adds the "HostDependencyToNetwork" edge to the Network entity by IDs.
func (hdu *HostDependencyUpdate) AddHostDependencyToNetworkIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.AddHostDependencyToNetworkIDs(ids...)
	return hdu
}

// AddHostDependencyToNetwork adds the "HostDependencyToNetwork" edges to the Network entity.
func (hdu *HostDependencyUpdate) AddHostDependencyToNetwork(n ...*Network) *HostDependencyUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hdu.AddHostDependencyToNetworkIDs(ids...)
}

// AddHostDependencyToEnvironmentIDs adds the "HostDependencyToEnvironment" edge to the Environment entity by IDs.
func (hdu *HostDependencyUpdate) AddHostDependencyToEnvironmentIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.AddHostDependencyToEnvironmentIDs(ids...)
	return hdu
}

// AddHostDependencyToEnvironment adds the "HostDependencyToEnvironment" edges to the Environment entity.
func (hdu *HostDependencyUpdate) AddHostDependencyToEnvironment(e ...*Environment) *HostDependencyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hdu.AddHostDependencyToEnvironmentIDs(ids...)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hdu *HostDependencyUpdate) Mutation() *HostDependencyMutation {
	return hdu.mutation
}

// ClearHostDependencyToDependOnHost clears all "HostDependencyToDependOnHost" edges to the Host entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToDependOnHost() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToDependOnHost()
	return hdu
}

// RemoveHostDependencyToDependOnHostIDs removes the "HostDependencyToDependOnHost" edge to Host entities by IDs.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToDependOnHostIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.RemoveHostDependencyToDependOnHostIDs(ids...)
	return hdu
}

// RemoveHostDependencyToDependOnHost removes "HostDependencyToDependOnHost" edges to Host entities.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToDependOnHost(h ...*Host) *HostDependencyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hdu.RemoveHostDependencyToDependOnHostIDs(ids...)
}

// ClearHostDependencyToDependByHost clears all "HostDependencyToDependByHost" edges to the Host entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToDependByHost() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToDependByHost()
	return hdu
}

// RemoveHostDependencyToDependByHostIDs removes the "HostDependencyToDependByHost" edge to Host entities by IDs.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToDependByHostIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.RemoveHostDependencyToDependByHostIDs(ids...)
	return hdu
}

// RemoveHostDependencyToDependByHost removes "HostDependencyToDependByHost" edges to Host entities.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToDependByHost(h ...*Host) *HostDependencyUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hdu.RemoveHostDependencyToDependByHostIDs(ids...)
}

// ClearHostDependencyToNetwork clears all "HostDependencyToNetwork" edges to the Network entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToNetwork() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToNetwork()
	return hdu
}

// RemoveHostDependencyToNetworkIDs removes the "HostDependencyToNetwork" edge to Network entities by IDs.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToNetworkIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.RemoveHostDependencyToNetworkIDs(ids...)
	return hdu
}

// RemoveHostDependencyToNetwork removes "HostDependencyToNetwork" edges to Network entities.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToNetwork(n ...*Network) *HostDependencyUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hdu.RemoveHostDependencyToNetworkIDs(ids...)
}

// ClearHostDependencyToEnvironment clears all "HostDependencyToEnvironment" edges to the Environment entity.
func (hdu *HostDependencyUpdate) ClearHostDependencyToEnvironment() *HostDependencyUpdate {
	hdu.mutation.ClearHostDependencyToEnvironment()
	return hdu
}

// RemoveHostDependencyToEnvironmentIDs removes the "HostDependencyToEnvironment" edge to Environment entities by IDs.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToEnvironmentIDs(ids ...int) *HostDependencyUpdate {
	hdu.mutation.RemoveHostDependencyToEnvironmentIDs(ids...)
	return hdu
}

// RemoveHostDependencyToEnvironment removes "HostDependencyToEnvironment" edges to Environment entities.
func (hdu *HostDependencyUpdate) RemoveHostDependencyToEnvironment(e ...*Environment) *HostDependencyUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hdu.RemoveHostDependencyToEnvironmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hdu *HostDependencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hdu.hooks) == 0 {
		affected, err = hdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostDependencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hdu.mutation = mutation
			affected, err = hdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hdu.hooks) - 1; i >= 0; i-- {
			mut = hdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hdu *HostDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := hdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hdu *HostDependencyUpdate) Exec(ctx context.Context) error {
	_, err := hdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdu *HostDependencyUpdate) ExecX(ctx context.Context) {
	if err := hdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hdu *HostDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostdependency.Table,
			Columns: hostdependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hostdependency.FieldID,
			},
		},
	}
	if ps := hdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hdu.mutation.HostID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldHostID,
		})
	}
	if value, ok := hdu.mutation.NetworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldNetworkID,
		})
	}
	if hdu.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.RemovedHostDependencyToDependOnHostIDs(); len(nodes) > 0 && !hdu.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToDependOnHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.RemovedHostDependencyToDependByHostIDs(); len(nodes) > 0 && !hdu.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToDependByHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.RemovedHostDependencyToNetworkIDs(); len(nodes) > 0 && !hdu.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hdu.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.RemovedHostDependencyToEnvironmentIDs(); len(nodes) > 0 && !hdu.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hdu.mutation.HostDependencyToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HostDependencyUpdateOne is the builder for updating a single HostDependency entity.
type HostDependencyUpdateOne struct {
	config
	hooks    []Hook
	mutation *HostDependencyMutation
}

// SetHostID sets the "host_id" field.
func (hduo *HostDependencyUpdateOne) SetHostID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetHostID(s)
	return hduo
}

// SetNetworkID sets the "network_id" field.
func (hduo *HostDependencyUpdateOne) SetNetworkID(s string) *HostDependencyUpdateOne {
	hduo.mutation.SetNetworkID(s)
	return hduo
}

// AddHostDependencyToDependOnHostIDs adds the "HostDependencyToDependOnHost" edge to the Host entity by IDs.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToDependOnHostIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.AddHostDependencyToDependOnHostIDs(ids...)
	return hduo
}

// AddHostDependencyToDependOnHost adds the "HostDependencyToDependOnHost" edges to the Host entity.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToDependOnHost(h ...*Host) *HostDependencyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hduo.AddHostDependencyToDependOnHostIDs(ids...)
}

// AddHostDependencyToDependByHostIDs adds the "HostDependencyToDependByHost" edge to the Host entity by IDs.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToDependByHostIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.AddHostDependencyToDependByHostIDs(ids...)
	return hduo
}

// AddHostDependencyToDependByHost adds the "HostDependencyToDependByHost" edges to the Host entity.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToDependByHost(h ...*Host) *HostDependencyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hduo.AddHostDependencyToDependByHostIDs(ids...)
}

// AddHostDependencyToNetworkIDs adds the "HostDependencyToNetwork" edge to the Network entity by IDs.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToNetworkIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.AddHostDependencyToNetworkIDs(ids...)
	return hduo
}

// AddHostDependencyToNetwork adds the "HostDependencyToNetwork" edges to the Network entity.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToNetwork(n ...*Network) *HostDependencyUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hduo.AddHostDependencyToNetworkIDs(ids...)
}

// AddHostDependencyToEnvironmentIDs adds the "HostDependencyToEnvironment" edge to the Environment entity by IDs.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToEnvironmentIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.AddHostDependencyToEnvironmentIDs(ids...)
	return hduo
}

// AddHostDependencyToEnvironment adds the "HostDependencyToEnvironment" edges to the Environment entity.
func (hduo *HostDependencyUpdateOne) AddHostDependencyToEnvironment(e ...*Environment) *HostDependencyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hduo.AddHostDependencyToEnvironmentIDs(ids...)
}

// Mutation returns the HostDependencyMutation object of the builder.
func (hduo *HostDependencyUpdateOne) Mutation() *HostDependencyMutation {
	return hduo.mutation
}

// ClearHostDependencyToDependOnHost clears all "HostDependencyToDependOnHost" edges to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToDependOnHost() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToDependOnHost()
	return hduo
}

// RemoveHostDependencyToDependOnHostIDs removes the "HostDependencyToDependOnHost" edge to Host entities by IDs.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToDependOnHostIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.RemoveHostDependencyToDependOnHostIDs(ids...)
	return hduo
}

// RemoveHostDependencyToDependOnHost removes "HostDependencyToDependOnHost" edges to Host entities.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToDependOnHost(h ...*Host) *HostDependencyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hduo.RemoveHostDependencyToDependOnHostIDs(ids...)
}

// ClearHostDependencyToDependByHost clears all "HostDependencyToDependByHost" edges to the Host entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToDependByHost() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToDependByHost()
	return hduo
}

// RemoveHostDependencyToDependByHostIDs removes the "HostDependencyToDependByHost" edge to Host entities by IDs.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToDependByHostIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.RemoveHostDependencyToDependByHostIDs(ids...)
	return hduo
}

// RemoveHostDependencyToDependByHost removes "HostDependencyToDependByHost" edges to Host entities.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToDependByHost(h ...*Host) *HostDependencyUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hduo.RemoveHostDependencyToDependByHostIDs(ids...)
}

// ClearHostDependencyToNetwork clears all "HostDependencyToNetwork" edges to the Network entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToNetwork() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToNetwork()
	return hduo
}

// RemoveHostDependencyToNetworkIDs removes the "HostDependencyToNetwork" edge to Network entities by IDs.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToNetworkIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.RemoveHostDependencyToNetworkIDs(ids...)
	return hduo
}

// RemoveHostDependencyToNetwork removes "HostDependencyToNetwork" edges to Network entities.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToNetwork(n ...*Network) *HostDependencyUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return hduo.RemoveHostDependencyToNetworkIDs(ids...)
}

// ClearHostDependencyToEnvironment clears all "HostDependencyToEnvironment" edges to the Environment entity.
func (hduo *HostDependencyUpdateOne) ClearHostDependencyToEnvironment() *HostDependencyUpdateOne {
	hduo.mutation.ClearHostDependencyToEnvironment()
	return hduo
}

// RemoveHostDependencyToEnvironmentIDs removes the "HostDependencyToEnvironment" edge to Environment entities by IDs.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToEnvironmentIDs(ids ...int) *HostDependencyUpdateOne {
	hduo.mutation.RemoveHostDependencyToEnvironmentIDs(ids...)
	return hduo
}

// RemoveHostDependencyToEnvironment removes "HostDependencyToEnvironment" edges to Environment entities.
func (hduo *HostDependencyUpdateOne) RemoveHostDependencyToEnvironment(e ...*Environment) *HostDependencyUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hduo.RemoveHostDependencyToEnvironmentIDs(ids...)
}

// Save executes the query and returns the updated HostDependency entity.
func (hduo *HostDependencyUpdateOne) Save(ctx context.Context) (*HostDependency, error) {
	var (
		err  error
		node *HostDependency
	)
	if len(hduo.hooks) == 0 {
		node, err = hduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HostDependencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hduo.mutation = mutation
			node, err = hduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hduo.hooks) - 1; i >= 0; i-- {
			mut = hduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) SaveX(ctx context.Context) *HostDependency {
	node, err := hduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hduo *HostDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := hduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hduo *HostDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := hduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hduo *HostDependencyUpdateOne) sqlSave(ctx context.Context) (_node *HostDependency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hostdependency.Table,
			Columns: hostdependency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hostdependency.FieldID,
			},
		},
	}
	id, ok := hduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing HostDependency.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := hduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hduo.mutation.HostID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldHostID,
		})
	}
	if value, ok := hduo.mutation.NetworkID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hostdependency.FieldNetworkID,
		})
	}
	if hduo.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.RemovedHostDependencyToDependOnHostIDs(); len(nodes) > 0 && !hduo.mutation.HostDependencyToDependOnHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToDependOnHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependOnHostTable,
			Columns: hostdependency.HostDependencyToDependOnHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.RemovedHostDependencyToDependByHostIDs(); len(nodes) > 0 && !hduo.mutation.HostDependencyToDependByHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToDependByHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToDependByHostTable,
			Columns: hostdependency.HostDependencyToDependByHostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.RemovedHostDependencyToNetworkIDs(); len(nodes) > 0 && !hduo.mutation.HostDependencyToNetworkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToNetworkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hostdependency.HostDependencyToNetworkTable,
			Columns: hostdependency.HostDependencyToNetworkPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: network.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hduo.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.RemovedHostDependencyToEnvironmentIDs(); len(nodes) > 0 && !hduo.mutation.HostDependencyToEnvironmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hduo.mutation.HostDependencyToEnvironmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hostdependency.HostDependencyToEnvironmentTable,
			Columns: hostdependency.HostDependencyToEnvironmentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: environment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostDependency{config: hduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostdependency.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
