// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AgentStatusColumns holds the columns for the "agent_status" table.
	AgentStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "up_time", Type: field.TypeInt64},
		{Name: "boot_time", Type: field.TypeInt64},
		{Name: "num_procs", Type: field.TypeInt64},
		{Name: "os", Type: field.TypeString},
		{Name: "host_id", Type: field.TypeString},
		{Name: "load1", Type: field.TypeFloat64},
		{Name: "load5", Type: field.TypeFloat64},
		{Name: "load15", Type: field.TypeFloat64},
		{Name: "total_mem", Type: field.TypeInt64},
		{Name: "free_mem", Type: field.TypeInt64},
		{Name: "used_mem", Type: field.TypeInt64},
		{Name: "timestamp", Type: field.TypeInt64},
	}
	// AgentStatusTable holds the schema information for the "agent_status" table.
	AgentStatusTable = &schema.Table{
		Name:        "agent_status",
		Columns:     AgentStatusColumns,
		PrimaryKey:  []*schema.Column{AgentStatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// BuildsColumns holds the columns for the "builds" table.
	BuildsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "revision", Type: field.TypeInt},
		{Name: "build_build_to_environment", Type: field.TypeInt, Nullable: true},
	}
	// BuildsTable holds the schema information for the "builds" table.
	BuildsTable = &schema.Table{
		Name:       "builds",
		Columns:    BuildsColumns,
		PrimaryKey: []*schema.Column{BuildsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "builds_environments_BuildToEnvironment",
				Columns: []*schema.Column{BuildsColumns[2]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CommandsColumns holds the columns for the "commands" table.
	CommandsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "program", Type: field.TypeString},
		{Name: "args", Type: field.TypeJSON},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// CommandsTable holds the schema information for the "commands" table.
	CommandsTable = &schema.Table{
		Name:        "commands",
		Columns:     CommandsColumns,
		PrimaryKey:  []*schema.Column{CommandsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CompetitionsColumns holds the columns for the "competitions" table.
	CompetitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "root_password", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// CompetitionsTable holds the schema information for the "competitions" table.
	CompetitionsTable = &schema.Table{
		Name:        "competitions",
		Columns:     CompetitionsColumns,
		PrimaryKey:  []*schema.Column{CompetitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DnSsColumns holds the columns for the "dn_ss" table.
	DnSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "root_domain", Type: field.TypeString},
		{Name: "dns_servers", Type: field.TypeJSON},
		{Name: "ntp_servers", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
	}
	// DnSsTable holds the schema information for the "dn_ss" table.
	DnSsTable = &schema.Table{
		Name:        "dn_ss",
		Columns:     DnSsColumns,
		PrimaryKey:  []*schema.Column{DnSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DNSRecordsColumns holds the columns for the "dns_records" table.
	DNSRecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "values", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeString},
		{Name: "zone", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "tags", Type: field.TypeJSON},
	}
	// DNSRecordsTable holds the schema information for the "dns_records" table.
	DNSRecordsTable = &schema.Table{
		Name:        "dns_records",
		Columns:     DNSRecordsColumns,
		PrimaryKey:  []*schema.Column{DNSRecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DisksColumns holds the columns for the "disks" table.
	DisksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "size", Type: field.TypeInt},
	}
	// DisksTable holds the schema information for the "disks" table.
	DisksTable = &schema.Table{
		Name:        "disks",
		Columns:     DisksColumns,
		PrimaryKey:  []*schema.Column{DisksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// EnvironmentsColumns holds the columns for the "environments" table.
	EnvironmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "competition_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "builder", Type: field.TypeString},
		{Name: "team_count", Type: field.TypeInt},
		{Name: "revision", Type: field.TypeInt},
		{Name: "admin_cidrs", Type: field.TypeJSON},
		{Name: "exposed_vdi_ports", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// EnvironmentsTable holds the schema information for the "environments" table.
	EnvironmentsTable = &schema.Table{
		Name:        "environments",
		Columns:     EnvironmentsColumns,
		PrimaryKey:  []*schema.Column{EnvironmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileDeletesColumns holds the columns for the "file_deletes" table.
	FileDeletesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
	}
	// FileDeletesTable holds the schema information for the "file_deletes" table.
	FileDeletesTable = &schema.Table{
		Name:        "file_deletes",
		Columns:     FileDeletesColumns,
		PrimaryKey:  []*schema.Column{FileDeletesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileDownloadsColumns holds the columns for the "file_downloads" table.
	FileDownloadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "source_type", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "template", Type: field.TypeBool},
		{Name: "perms", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "md5", Type: field.TypeString},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
	}
	// FileDownloadsTable holds the schema information for the "file_downloads" table.
	FileDownloadsTable = &schema.Table{
		Name:        "file_downloads",
		Columns:     FileDownloadsColumns,
		PrimaryKey:  []*schema.Column{FileDownloadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileExtractsColumns holds the columns for the "file_extracts" table.
	FileExtractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
	}
	// FileExtractsTable holds the schema information for the "file_extracts" table.
	FileExtractsTable = &schema.Table{
		Name:        "file_extracts",
		Columns:     FileExtractsColumns,
		PrimaryKey:  []*schema.Column{FileExtractsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FindingsColumns holds the columns for the "findings" table.
	FindingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "severity", Type: field.TypeEnum, Enums: []string{"ZeroSeverity", "LowSeverity", "MediumSeverity", "HighSeverity", "CriticalSeverity", "NullSeverity"}},
		{Name: "difficulty", Type: field.TypeEnum, Enums: []string{"ZeroDifficulty", "NoviceDifficulty", "AdvancedDifficulty", "ExpertDifficulty", "NullDifficulty"}},
		{Name: "tags", Type: field.TypeJSON},
	}
	// FindingsTable holds the schema information for the "findings" table.
	FindingsTable = &schema.Table{
		Name:        "findings",
		Columns:     FindingsColumns,
		PrimaryKey:  []*schema.Column{FindingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// GinFileMiddlewaresColumns holds the columns for the "gin_file_middlewares" table.
	GinFileMiddlewaresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "url_id", Type: field.TypeString},
		{Name: "file_path", Type: field.TypeString},
		{Name: "accessed", Type: field.TypeBool},
	}
	// GinFileMiddlewaresTable holds the schema information for the "gin_file_middlewares" table.
	GinFileMiddlewaresTable = &schema.Table{
		Name:        "gin_file_middlewares",
		Columns:     GinFileMiddlewaresColumns,
		PrimaryKey:  []*schema.Column{GinFileMiddlewaresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "os", Type: field.TypeString},
		{Name: "last_octet", Type: field.TypeInt},
		{Name: "instance_size", Type: field.TypeString},
		{Name: "allow_mac_changes", Type: field.TypeBool},
		{Name: "exposed_tcp_ports", Type: field.TypeJSON},
		{Name: "exposed_udp_ports", Type: field.TypeJSON},
		{Name: "override_password", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "user_groups", Type: field.TypeJSON},
		{Name: "provision_steps", Type: field.TypeJSON, Nullable: true},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "finding_finding_to_host", Type: field.TypeInt, Nullable: true},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "hosts_findings_FindingToHost",
				Columns: []*schema.Column{HostsColumns[15]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HostDependenciesColumns holds the columns for the "host_dependencies" table.
	HostDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "host_id", Type: field.TypeString},
		{Name: "network_id", Type: field.TypeString},
		{Name: "environment_environment_to_host_dependency", Type: field.TypeInt, Nullable: true},
		{Name: "host_dependency_host_dependency_to_depend_on_host", Type: field.TypeInt, Nullable: true},
		{Name: "host_dependency_host_dependency_to_depend_by_host", Type: field.TypeInt, Nullable: true},
		{Name: "host_dependency_host_dependency_to_network", Type: field.TypeInt, Nullable: true},
	}
	// HostDependenciesTable holds the schema information for the "host_dependencies" table.
	HostDependenciesTable = &schema.Table{
		Name:       "host_dependencies",
		Columns:    HostDependenciesColumns,
		PrimaryKey: []*schema.Column{HostDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "host_dependencies_environments_EnvironmentToHostDependency",
				Columns: []*schema.Column{HostDependenciesColumns[3]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "host_dependencies_hosts_HostDependencyToDependOnHost",
				Columns: []*schema.Column{HostDependenciesColumns[4]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "host_dependencies_hosts_HostDependencyToDependByHost",
				Columns: []*schema.Column{HostDependenciesColumns[5]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "host_dependencies_networks_HostDependencyToNetwork",
				Columns: []*schema.Column{HostDependenciesColumns[6]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IdentitiesColumns holds the columns for the "identities" table.
	IdentitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "avatar_file", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// IdentitiesTable holds the schema information for the "identities" table.
	IdentitiesTable = &schema.Table{
		Name:        "identities",
		Columns:     IdentitiesColumns,
		PrimaryKey:  []*schema.Column{IdentitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// IncludedNetworksColumns holds the columns for the "included_networks" table.
	IncludedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "hosts", Type: field.TypeJSON},
	}
	// IncludedNetworksTable holds the schema information for the "included_networks" table.
	IncludedNetworksTable = &schema.Table{
		Name:        "included_networks",
		Columns:     IncludedNetworksColumns,
		PrimaryKey:  []*schema.Column{IncludedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// NetworksColumns holds the columns for the "networks" table.
	NetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
		{Name: "vdi_visible", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
	}
	// NetworksTable holds the schema information for the "networks" table.
	NetworksTable = &schema.Table{
		Name:        "networks",
		Columns:     NetworksColumns,
		PrimaryKey:  []*schema.Column{NetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PlansColumns holds the columns for the "plans" table.
	PlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "step_number", Type: field.TypeInt},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"start_build", "start_team", "provision_network", "provision_host", "execute_step"}},
		{Name: "build_id", Type: field.TypeInt},
		{Name: "plan_plan_to_build", Type: field.TypeInt, Nullable: true},
		{Name: "plan_plan_to_team", Type: field.TypeInt, Nullable: true},
		{Name: "plan_plan_to_provisioned_host", Type: field.TypeInt, Nullable: true},
	}
	// PlansTable holds the schema information for the "plans" table.
	PlansTable = &schema.Table{
		Name:       "plans",
		Columns:    PlansColumns,
		PrimaryKey: []*schema.Column{PlansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "plans_builds_PlanToBuild",
				Columns: []*schema.Column{PlansColumns[4]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "plans_teams_PlanToTeam",
				Columns: []*schema.Column{PlansColumns[5]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "plans_provisioned_hosts_PlanToProvisionedHost",
				Columns: []*schema.Column{PlansColumns[6]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvisionedHostsColumns holds the columns for the "provisioned_hosts" table.
	ProvisionedHostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "subnet_ip", Type: field.TypeString},
		{Name: "gin_file_middleware_gin_file_middleware_to_provisioned_host", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_provisioned_network", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_host", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_end_step_plan", Type: field.TypeInt, Nullable: true},
	}
	// ProvisionedHostsTable holds the schema information for the "provisioned_hosts" table.
	ProvisionedHostsTable = &schema.Table{
		Name:       "provisioned_hosts",
		Columns:    ProvisionedHostsColumns,
		PrimaryKey: []*schema.Column{ProvisionedHostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioned_hosts_gin_file_middlewares_GinFileMiddlewareToProvisionedHost",
				Columns: []*schema.Column{ProvisionedHostsColumns[2]},

				RefColumns: []*schema.Column{GinFileMiddlewaresColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_hosts_provisioned_networks_ProvisionedHostToProvisionedNetwork",
				Columns: []*schema.Column{ProvisionedHostsColumns[3]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_hosts_hosts_ProvisionedHostToHost",
				Columns: []*schema.Column{ProvisionedHostsColumns[4]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_hosts_plans_ProvisionedHostToEndStepPlan",
				Columns: []*schema.Column{ProvisionedHostsColumns[5]},

				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvisionedNetworksColumns holds the columns for the "provisioned_networks" table.
	ProvisionedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
		{Name: "plan_plan_to_provisioned_network", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_network", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_build", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_team", Type: field.TypeInt, Nullable: true},
	}
	// ProvisionedNetworksTable holds the schema information for the "provisioned_networks" table.
	ProvisionedNetworksTable = &schema.Table{
		Name:       "provisioned_networks",
		Columns:    ProvisionedNetworksColumns,
		PrimaryKey: []*schema.Column{ProvisionedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioned_networks_plans_PlanToProvisionedNetwork",
				Columns: []*schema.Column{ProvisionedNetworksColumns[3]},

				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_networks_networks_ProvisionedNetworkToNetwork",
				Columns: []*schema.Column{ProvisionedNetworksColumns[4]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_networks_builds_ProvisionedNetworkToBuild",
				Columns: []*schema.Column{ProvisionedNetworksColumns[5]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioned_networks_teams_ProvisionedNetworkToTeam",
				Columns: []*schema.Column{ProvisionedNetworksColumns[6]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvisioningStepsColumns holds the columns for the "provisioning_steps" table.
	ProvisioningStepsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Script", "Command", "DNSRecord", "FileDelete", "FileDownload", "FileExtract"}},
		{Name: "step_number", Type: field.TypeInt},
		{Name: "gin_file_middleware_gin_file_middleware_to_provisioning_step", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "plan_plan_to_provisioning_step", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_provisioned_host", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_script", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_command", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_dns_record", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_delete", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_download", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_file_extract", Type: field.TypeInt, Nullable: true},
	}
	// ProvisioningStepsTable holds the schema information for the "provisioning_steps" table.
	ProvisioningStepsTable = &schema.Table{
		Name:       "provisioning_steps",
		Columns:    ProvisioningStepsColumns,
		PrimaryKey: []*schema.Column{ProvisioningStepsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioning_steps_gin_file_middlewares_GinFileMiddlewareToProvisioningStep",
				Columns: []*schema.Column{ProvisioningStepsColumns[3]},

				RefColumns: []*schema.Column{GinFileMiddlewaresColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_plans_PlanToProvisioningStep",
				Columns: []*schema.Column{ProvisioningStepsColumns[4]},

				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_provisioned_hosts_ProvisioningStepToProvisionedHost",
				Columns: []*schema.Column{ProvisioningStepsColumns[5]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_scripts_ProvisioningStepToScript",
				Columns: []*schema.Column{ProvisioningStepsColumns[6]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_commands_ProvisioningStepToCommand",
				Columns: []*schema.Column{ProvisioningStepsColumns[7]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_dns_records_ProvisioningStepToDNSRecord",
				Columns: []*schema.Column{ProvisioningStepsColumns[8]},

				RefColumns: []*schema.Column{DNSRecordsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_file_deletes_ProvisioningStepToFileDelete",
				Columns: []*schema.Column{ProvisioningStepsColumns[9]},

				RefColumns: []*schema.Column{FileDeletesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_file_downloads_ProvisioningStepToFileDownload",
				Columns: []*schema.Column{ProvisioningStepsColumns[10]},

				RefColumns: []*schema.Column{FileDownloadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "provisioning_steps_file_extracts_ProvisioningStepToFileExtract",
				Columns: []*schema.Column{ProvisioningStepsColumns[11]},

				RefColumns: []*schema.Column{FileExtractsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ScriptsColumns holds the columns for the "scripts" table.
	ScriptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "language", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "source_type", Type: field.TypeString},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "args", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
	}
	// ScriptsTable holds the schema information for the "scripts" table.
	ScriptsTable = &schema.Table{
		Name:        "scripts",
		Columns:     ScriptsColumns,
		PrimaryKey:  []*schema.Column{ScriptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"PLANNING", "AWAITING", "INPROGRESS", "FAILED", "COMPLETE", "TAINTED"}},
		{Name: "status_for", Type: field.TypeEnum, Enums: []string{"Build", "Team", "ProvisionedNetwork", "ProvisionedHost", "ProvisioningStep"}},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "failed", Type: field.TypeBool},
		{Name: "completed", Type: field.TypeBool},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "build_build_to_status", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_status", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_status", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_status", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "team_team_to_status", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:       "status",
		Columns:    StatusColumns,
		PrimaryKey: []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "status_builds_BuildToStatus",
				Columns: []*schema.Column{StatusColumns[8]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_provisioned_hosts_ProvisionedHostToStatus",
				Columns: []*schema.Column{StatusColumns[9]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_provisioned_networks_ProvisionedNetworkToStatus",
				Columns: []*schema.Column{StatusColumns[10]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_provisioning_steps_ProvisioningStepToStatus",
				Columns: []*schema.Column{StatusColumns[11]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_teams_TeamToStatus",
				Columns: []*schema.Column{StatusColumns[12]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeJSON},
		{Name: "agent_status_agent_status_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "command_command_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "competition_competition_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "dns_dns_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "dns_record_dns_record_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "disk_disk_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "environment_environment_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_delete_file_delete_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_download_file_download_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_extract_file_extract_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "finding_finding_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "host_host_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "included_network_included_network_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "network_network_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "script_script_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "user_user_to_tag", Type: field.TypeInt, Nullable: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "tags_agent_status_AgentStatusToTag",
				Columns: []*schema.Column{TagsColumns[4]},

				RefColumns: []*schema.Column{AgentStatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_commands_CommandToTag",
				Columns: []*schema.Column{TagsColumns[5]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_competitions_CompetitionToTag",
				Columns: []*schema.Column{TagsColumns[6]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_dn_ss_DNSToTag",
				Columns: []*schema.Column{TagsColumns[7]},

				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_dns_records_DNSRecordToTag",
				Columns: []*schema.Column{TagsColumns[8]},

				RefColumns: []*schema.Column{DNSRecordsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_disks_DiskToTag",
				Columns: []*schema.Column{TagsColumns[9]},

				RefColumns: []*schema.Column{DisksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_environments_EnvironmentToTag",
				Columns: []*schema.Column{TagsColumns[10]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_deletes_FileDeleteToTag",
				Columns: []*schema.Column{TagsColumns[11]},

				RefColumns: []*schema.Column{FileDeletesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_downloads_FileDownloadToTag",
				Columns: []*schema.Column{TagsColumns[12]},

				RefColumns: []*schema.Column{FileDownloadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_extracts_FileExtractToTag",
				Columns: []*schema.Column{TagsColumns[13]},

				RefColumns: []*schema.Column{FileExtractsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_findings_FindingToTag",
				Columns: []*schema.Column{TagsColumns[14]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_hosts_HostToTag",
				Columns: []*schema.Column{TagsColumns[15]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_included_networks_IncludedNetworkToTag",
				Columns: []*schema.Column{TagsColumns[16]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_networks_NetworkToTag",
				Columns: []*schema.Column{TagsColumns[17]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_scripts_ScriptToTag",
				Columns: []*schema.Column{TagsColumns[18]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_users_UserToTag",
				Columns: []*schema.Column{TagsColumns[19]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "team_number", Type: field.TypeInt},
		{Name: "team_team_to_build", Type: field.TypeInt, Nullable: true},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:       "teams",
		Columns:    TeamsColumns,
		PrimaryKey: []*schema.Column{TeamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "teams_builds_TeamToBuild",
				Columns: []*schema.Column{TeamsColumns[2]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "uuid", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "hcl_id", Type: field.TypeString},
		{Name: "command_command_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "finding_finding_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "host_host_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "script_script_to_user", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "users_commands_CommandToUser",
				Columns: []*schema.Column{UsersColumns[5]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_findings_FindingToUser",
				Columns: []*schema.Column{UsersColumns[6]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_hosts_HostToUser",
				Columns: []*schema.Column{UsersColumns[7]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_scripts_ScriptToUser",
				Columns: []*schema.Column{UsersColumns[8]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AgentStatusAgentStatusToProvisionedHostColumns holds the columns for the "agent_status_AgentStatusToProvisionedHost" table.
	AgentStatusAgentStatusToProvisionedHostColumns = []*schema.Column{
		{Name: "agent_status_id", Type: field.TypeInt},
		{Name: "provisioned_host_id", Type: field.TypeInt},
	}
	// AgentStatusAgentStatusToProvisionedHostTable holds the schema information for the "agent_status_AgentStatusToProvisionedHost" table.
	AgentStatusAgentStatusToProvisionedHostTable = &schema.Table{
		Name:       "agent_status_AgentStatusToProvisionedHost",
		Columns:    AgentStatusAgentStatusToProvisionedHostColumns,
		PrimaryKey: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[0], AgentStatusAgentStatusToProvisionedHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "agent_status_AgentStatusToProvisionedHost_agent_status_id",
				Columns: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[0]},

				RefColumns: []*schema.Column{AgentStatusColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "agent_status_AgentStatusToProvisionedHost_provisioned_host_id",
				Columns: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[1]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CompetitionCompetitionToDNSColumns holds the columns for the "competition_CompetitionToDNS" table.
	CompetitionCompetitionToDNSColumns = []*schema.Column{
		{Name: "competition_id", Type: field.TypeInt},
		{Name: "dns_id", Type: field.TypeInt},
	}
	// CompetitionCompetitionToDNSTable holds the schema information for the "competition_CompetitionToDNS" table.
	CompetitionCompetitionToDNSTable = &schema.Table{
		Name:       "competition_CompetitionToDNS",
		Columns:    CompetitionCompetitionToDNSColumns,
		PrimaryKey: []*schema.Column{CompetitionCompetitionToDNSColumns[0], CompetitionCompetitionToDNSColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "competition_CompetitionToDNS_competition_id",
				Columns: []*schema.Column{CompetitionCompetitionToDNSColumns[0]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "competition_CompetitionToDNS_dns_id",
				Columns: []*schema.Column{CompetitionCompetitionToDNSColumns[1]},

				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToUserColumns holds the columns for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToUserTable holds the schema information for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserTable = &schema.Table{
		Name:       "environment_EnvironmentToUser",
		Columns:    EnvironmentEnvironmentToUserColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToUserColumns[0], EnvironmentEnvironmentToUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToUser_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToUserColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToUser_user_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToUserColumns[1]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToHostColumns holds the columns for the "environment_EnvironmentToHost" table.
	EnvironmentEnvironmentToHostColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "host_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToHostTable holds the schema information for the "environment_EnvironmentToHost" table.
	EnvironmentEnvironmentToHostTable = &schema.Table{
		Name:       "environment_EnvironmentToHost",
		Columns:    EnvironmentEnvironmentToHostColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToHostColumns[0], EnvironmentEnvironmentToHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToHost_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToHostColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToHost_host_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToHostColumns[1]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToCompetitionColumns holds the columns for the "environment_EnvironmentToCompetition" table.
	EnvironmentEnvironmentToCompetitionColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "competition_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToCompetitionTable holds the schema information for the "environment_EnvironmentToCompetition" table.
	EnvironmentEnvironmentToCompetitionTable = &schema.Table{
		Name:       "environment_EnvironmentToCompetition",
		Columns:    EnvironmentEnvironmentToCompetitionColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[0], EnvironmentEnvironmentToCompetitionColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToCompetition_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToCompetition_competition_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[1]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToIdentityColumns holds the columns for the "environment_EnvironmentToIdentity" table.
	EnvironmentEnvironmentToIdentityColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "identity_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToIdentityTable holds the schema information for the "environment_EnvironmentToIdentity" table.
	EnvironmentEnvironmentToIdentityTable = &schema.Table{
		Name:       "environment_EnvironmentToIdentity",
		Columns:    EnvironmentEnvironmentToIdentityColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToIdentityColumns[0], EnvironmentEnvironmentToIdentityColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToIdentity_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToIdentityColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToIdentity_identity_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToIdentityColumns[1]},

				RefColumns: []*schema.Column{IdentitiesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToCommandColumns holds the columns for the "environment_EnvironmentToCommand" table.
	EnvironmentEnvironmentToCommandColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "command_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToCommandTable holds the schema information for the "environment_EnvironmentToCommand" table.
	EnvironmentEnvironmentToCommandTable = &schema.Table{
		Name:       "environment_EnvironmentToCommand",
		Columns:    EnvironmentEnvironmentToCommandColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToCommandColumns[0], EnvironmentEnvironmentToCommandColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToCommand_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCommandColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToCommand_command_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCommandColumns[1]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToScriptColumns holds the columns for the "environment_EnvironmentToScript" table.
	EnvironmentEnvironmentToScriptColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "script_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToScriptTable holds the schema information for the "environment_EnvironmentToScript" table.
	EnvironmentEnvironmentToScriptTable = &schema.Table{
		Name:       "environment_EnvironmentToScript",
		Columns:    EnvironmentEnvironmentToScriptColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToScriptColumns[0], EnvironmentEnvironmentToScriptColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToScript_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToScriptColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToScript_script_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToScriptColumns[1]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToFileDownloadColumns holds the columns for the "environment_EnvironmentToFileDownload" table.
	EnvironmentEnvironmentToFileDownloadColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "file_download_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToFileDownloadTable holds the schema information for the "environment_EnvironmentToFileDownload" table.
	EnvironmentEnvironmentToFileDownloadTable = &schema.Table{
		Name:       "environment_EnvironmentToFileDownload",
		Columns:    EnvironmentEnvironmentToFileDownloadColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToFileDownloadColumns[0], EnvironmentEnvironmentToFileDownloadColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToFileDownload_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileDownloadColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToFileDownload_file_download_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileDownloadColumns[1]},

				RefColumns: []*schema.Column{FileDownloadsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToFileDeleteColumns holds the columns for the "environment_EnvironmentToFileDelete" table.
	EnvironmentEnvironmentToFileDeleteColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "file_delete_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToFileDeleteTable holds the schema information for the "environment_EnvironmentToFileDelete" table.
	EnvironmentEnvironmentToFileDeleteTable = &schema.Table{
		Name:       "environment_EnvironmentToFileDelete",
		Columns:    EnvironmentEnvironmentToFileDeleteColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToFileDeleteColumns[0], EnvironmentEnvironmentToFileDeleteColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToFileDelete_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileDeleteColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToFileDelete_file_delete_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileDeleteColumns[1]},

				RefColumns: []*schema.Column{FileDeletesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToFileExtractColumns holds the columns for the "environment_EnvironmentToFileExtract" table.
	EnvironmentEnvironmentToFileExtractColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "file_extract_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToFileExtractTable holds the schema information for the "environment_EnvironmentToFileExtract" table.
	EnvironmentEnvironmentToFileExtractTable = &schema.Table{
		Name:       "environment_EnvironmentToFileExtract",
		Columns:    EnvironmentEnvironmentToFileExtractColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToFileExtractColumns[0], EnvironmentEnvironmentToFileExtractColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToFileExtract_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileExtractColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToFileExtract_file_extract_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFileExtractColumns[1]},

				RefColumns: []*schema.Column{FileExtractsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToIncludedNetworkColumns holds the columns for the "environment_EnvironmentToIncludedNetwork" table.
	EnvironmentEnvironmentToIncludedNetworkColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "included_network_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToIncludedNetworkTable holds the schema information for the "environment_EnvironmentToIncludedNetwork" table.
	EnvironmentEnvironmentToIncludedNetworkTable = &schema.Table{
		Name:       "environment_EnvironmentToIncludedNetwork",
		Columns:    EnvironmentEnvironmentToIncludedNetworkColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[0], EnvironmentEnvironmentToIncludedNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToIncludedNetwork_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToIncludedNetwork_included_network_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToIncludedNetworkColumns[1]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToFindingColumns holds the columns for the "environment_EnvironmentToFinding" table.
	EnvironmentEnvironmentToFindingColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "finding_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToFindingTable holds the schema information for the "environment_EnvironmentToFinding" table.
	EnvironmentEnvironmentToFindingTable = &schema.Table{
		Name:       "environment_EnvironmentToFinding",
		Columns:    EnvironmentEnvironmentToFindingColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToFindingColumns[0], EnvironmentEnvironmentToFindingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToFinding_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFindingColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToFinding_finding_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToFindingColumns[1]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToDNSRecordColumns holds the columns for the "environment_EnvironmentToDNSRecord" table.
	EnvironmentEnvironmentToDNSRecordColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "dns_record_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToDNSRecordTable holds the schema information for the "environment_EnvironmentToDNSRecord" table.
	EnvironmentEnvironmentToDNSRecordTable = &schema.Table{
		Name:       "environment_EnvironmentToDNSRecord",
		Columns:    EnvironmentEnvironmentToDNSRecordColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToDNSRecordColumns[0], EnvironmentEnvironmentToDNSRecordColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToDNSRecord_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToDNSRecordColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToDNSRecord_dns_record_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToDNSRecordColumns[1]},

				RefColumns: []*schema.Column{DNSRecordsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToDNSColumns holds the columns for the "environment_EnvironmentToDNS" table.
	EnvironmentEnvironmentToDNSColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "dns_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToDNSTable holds the schema information for the "environment_EnvironmentToDNS" table.
	EnvironmentEnvironmentToDNSTable = &schema.Table{
		Name:       "environment_EnvironmentToDNS",
		Columns:    EnvironmentEnvironmentToDNSColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToDNSColumns[0], EnvironmentEnvironmentToDNSColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToDNS_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToDNSColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToDNS_dns_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToDNSColumns[1]},

				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToNetworkColumns holds the columns for the "environment_EnvironmentToNetwork" table.
	EnvironmentEnvironmentToNetworkColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "network_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToNetworkTable holds the schema information for the "environment_EnvironmentToNetwork" table.
	EnvironmentEnvironmentToNetworkTable = &schema.Table{
		Name:       "environment_EnvironmentToNetwork",
		Columns:    EnvironmentEnvironmentToNetworkColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToNetworkColumns[0], EnvironmentEnvironmentToNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToNetwork_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToNetworkColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToNetwork_network_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToNetworkColumns[1]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HostHostToDiskColumns holds the columns for the "host_HostToDisk" table.
	HostHostToDiskColumns = []*schema.Column{
		{Name: "host_id", Type: field.TypeInt},
		{Name: "disk_id", Type: field.TypeInt},
	}
	// HostHostToDiskTable holds the schema information for the "host_HostToDisk" table.
	HostHostToDiskTable = &schema.Table{
		Name:       "host_HostToDisk",
		Columns:    HostHostToDiskColumns,
		PrimaryKey: []*schema.Column{HostHostToDiskColumns[0], HostHostToDiskColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "host_HostToDisk_host_id",
				Columns: []*schema.Column{HostHostToDiskColumns[0]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "host_HostToDisk_disk_id",
				Columns: []*schema.Column{HostHostToDiskColumns[1]},

				RefColumns: []*schema.Column{DisksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncludedNetworkIncludedNetworkToHostColumns holds the columns for the "included_network_IncludedNetworkToHost" table.
	IncludedNetworkIncludedNetworkToHostColumns = []*schema.Column{
		{Name: "included_network_id", Type: field.TypeInt},
		{Name: "host_id", Type: field.TypeInt},
	}
	// IncludedNetworkIncludedNetworkToHostTable holds the schema information for the "included_network_IncludedNetworkToHost" table.
	IncludedNetworkIncludedNetworkToHostTable = &schema.Table{
		Name:       "included_network_IncludedNetworkToHost",
		Columns:    IncludedNetworkIncludedNetworkToHostColumns,
		PrimaryKey: []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[0], IncludedNetworkIncludedNetworkToHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "included_network_IncludedNetworkToHost_included_network_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[0]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "included_network_IncludedNetworkToHost_host_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToHostColumns[1]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncludedNetworkIncludedNetworkToNetworkColumns holds the columns for the "included_network_IncludedNetworkToNetwork" table.
	IncludedNetworkIncludedNetworkToNetworkColumns = []*schema.Column{
		{Name: "included_network_id", Type: field.TypeInt},
		{Name: "network_id", Type: field.TypeInt},
	}
	// IncludedNetworkIncludedNetworkToNetworkTable holds the schema information for the "included_network_IncludedNetworkToNetwork" table.
	IncludedNetworkIncludedNetworkToNetworkTable = &schema.Table{
		Name:       "included_network_IncludedNetworkToNetwork",
		Columns:    IncludedNetworkIncludedNetworkToNetworkColumns,
		PrimaryKey: []*schema.Column{IncludedNetworkIncludedNetworkToNetworkColumns[0], IncludedNetworkIncludedNetworkToNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "included_network_IncludedNetworkToNetwork_included_network_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToNetworkColumns[0]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "included_network_IncludedNetworkToNetwork_network_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToNetworkColumns[1]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanNextPlanColumns holds the columns for the "plan_NextPlan" table.
	PlanNextPlanColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeInt},
		{Name: "PrevPlan_id", Type: field.TypeInt},
	}
	// PlanNextPlanTable holds the schema information for the "plan_NextPlan" table.
	PlanNextPlanTable = &schema.Table{
		Name:       "plan_NextPlan",
		Columns:    PlanNextPlanColumns,
		PrimaryKey: []*schema.Column{PlanNextPlanColumns[0], PlanNextPlanColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "plan_NextPlan_plan_id",
				Columns: []*schema.Column{PlanNextPlanColumns[0]},

				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "plan_NextPlan_PrevPlan_id",
				Columns: []*schema.Column{PlanNextPlanColumns[1]},

				RefColumns: []*schema.Column{PlansColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ScriptScriptToFindingColumns holds the columns for the "script_ScriptToFinding" table.
	ScriptScriptToFindingColumns = []*schema.Column{
		{Name: "script_id", Type: field.TypeInt},
		{Name: "finding_id", Type: field.TypeInt},
	}
	// ScriptScriptToFindingTable holds the schema information for the "script_ScriptToFinding" table.
	ScriptScriptToFindingTable = &schema.Table{
		Name:       "script_ScriptToFinding",
		Columns:    ScriptScriptToFindingColumns,
		PrimaryKey: []*schema.Column{ScriptScriptToFindingColumns[0], ScriptScriptToFindingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "script_ScriptToFinding_script_id",
				Columns: []*schema.Column{ScriptScriptToFindingColumns[0]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "script_ScriptToFinding_finding_id",
				Columns: []*schema.Column{ScriptScriptToFindingColumns[1]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AgentStatusTable,
		BuildsTable,
		CommandsTable,
		CompetitionsTable,
		DnSsTable,
		DNSRecordsTable,
		DisksTable,
		EnvironmentsTable,
		FileDeletesTable,
		FileDownloadsTable,
		FileExtractsTable,
		FindingsTable,
		GinFileMiddlewaresTable,
		HostsTable,
		HostDependenciesTable,
		IdentitiesTable,
		IncludedNetworksTable,
		NetworksTable,
		PlansTable,
		ProvisionedHostsTable,
		ProvisionedNetworksTable,
		ProvisioningStepsTable,
		ScriptsTable,
		StatusTable,
		TagsTable,
		TeamsTable,
		UsersTable,
		AgentStatusAgentStatusToProvisionedHostTable,
		CompetitionCompetitionToDNSTable,
		EnvironmentEnvironmentToUserTable,
		EnvironmentEnvironmentToHostTable,
		EnvironmentEnvironmentToCompetitionTable,
		EnvironmentEnvironmentToIdentityTable,
		EnvironmentEnvironmentToCommandTable,
		EnvironmentEnvironmentToScriptTable,
		EnvironmentEnvironmentToFileDownloadTable,
		EnvironmentEnvironmentToFileDeleteTable,
		EnvironmentEnvironmentToFileExtractTable,
		EnvironmentEnvironmentToIncludedNetworkTable,
		EnvironmentEnvironmentToFindingTable,
		EnvironmentEnvironmentToDNSRecordTable,
		EnvironmentEnvironmentToDNSTable,
		EnvironmentEnvironmentToNetworkTable,
		HostHostToDiskTable,
		IncludedNetworkIncludedNetworkToHostTable,
		IncludedNetworkIncludedNetworkToNetworkTable,
		PlanNextPlanTable,
		ScriptScriptToFindingTable,
	}
)

func init() {
	BuildsTable.ForeignKeys[0].RefTable = EnvironmentsTable
	HostsTable.ForeignKeys[0].RefTable = FindingsTable
	HostDependenciesTable.ForeignKeys[0].RefTable = EnvironmentsTable
	HostDependenciesTable.ForeignKeys[1].RefTable = HostsTable
	HostDependenciesTable.ForeignKeys[2].RefTable = HostsTable
	HostDependenciesTable.ForeignKeys[3].RefTable = NetworksTable
	PlansTable.ForeignKeys[0].RefTable = BuildsTable
	PlansTable.ForeignKeys[1].RefTable = TeamsTable
	PlansTable.ForeignKeys[2].RefTable = ProvisionedHostsTable
	ProvisionedHostsTable.ForeignKeys[0].RefTable = GinFileMiddlewaresTable
	ProvisionedHostsTable.ForeignKeys[1].RefTable = ProvisionedNetworksTable
	ProvisionedHostsTable.ForeignKeys[2].RefTable = HostsTable
	ProvisionedHostsTable.ForeignKeys[3].RefTable = PlansTable
	ProvisionedNetworksTable.ForeignKeys[0].RefTable = PlansTable
	ProvisionedNetworksTable.ForeignKeys[1].RefTable = NetworksTable
	ProvisionedNetworksTable.ForeignKeys[2].RefTable = BuildsTable
	ProvisionedNetworksTable.ForeignKeys[3].RefTable = TeamsTable
	ProvisioningStepsTable.ForeignKeys[0].RefTable = GinFileMiddlewaresTable
	ProvisioningStepsTable.ForeignKeys[1].RefTable = PlansTable
	ProvisioningStepsTable.ForeignKeys[2].RefTable = ProvisionedHostsTable
	ProvisioningStepsTable.ForeignKeys[3].RefTable = ScriptsTable
	ProvisioningStepsTable.ForeignKeys[4].RefTable = CommandsTable
	ProvisioningStepsTable.ForeignKeys[5].RefTable = DNSRecordsTable
	ProvisioningStepsTable.ForeignKeys[6].RefTable = FileDeletesTable
	ProvisioningStepsTable.ForeignKeys[7].RefTable = FileDownloadsTable
	ProvisioningStepsTable.ForeignKeys[8].RefTable = FileExtractsTable
	StatusTable.ForeignKeys[0].RefTable = BuildsTable
	StatusTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	StatusTable.ForeignKeys[2].RefTable = ProvisionedNetworksTable
	StatusTable.ForeignKeys[3].RefTable = ProvisioningStepsTable
	StatusTable.ForeignKeys[4].RefTable = TeamsTable
	TagsTable.ForeignKeys[0].RefTable = AgentStatusTable
	TagsTable.ForeignKeys[1].RefTable = CommandsTable
	TagsTable.ForeignKeys[2].RefTable = CompetitionsTable
	TagsTable.ForeignKeys[3].RefTable = DnSsTable
	TagsTable.ForeignKeys[4].RefTable = DNSRecordsTable
	TagsTable.ForeignKeys[5].RefTable = DisksTable
	TagsTable.ForeignKeys[6].RefTable = EnvironmentsTable
	TagsTable.ForeignKeys[7].RefTable = FileDeletesTable
	TagsTable.ForeignKeys[8].RefTable = FileDownloadsTable
	TagsTable.ForeignKeys[9].RefTable = FileExtractsTable
	TagsTable.ForeignKeys[10].RefTable = FindingsTable
	TagsTable.ForeignKeys[11].RefTable = HostsTable
	TagsTable.ForeignKeys[12].RefTable = IncludedNetworksTable
	TagsTable.ForeignKeys[13].RefTable = NetworksTable
	TagsTable.ForeignKeys[14].RefTable = ScriptsTable
	TagsTable.ForeignKeys[15].RefTable = UsersTable
	TeamsTable.ForeignKeys[0].RefTable = BuildsTable
	UsersTable.ForeignKeys[0].RefTable = CommandsTable
	UsersTable.ForeignKeys[1].RefTable = FindingsTable
	UsersTable.ForeignKeys[2].RefTable = HostsTable
	UsersTable.ForeignKeys[3].RefTable = ScriptsTable
	AgentStatusAgentStatusToProvisionedHostTable.ForeignKeys[0].RefTable = AgentStatusTable
	AgentStatusAgentStatusToProvisionedHostTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	CompetitionCompetitionToDNSTable.ForeignKeys[0].RefTable = CompetitionsTable
	CompetitionCompetitionToDNSTable.ForeignKeys[1].RefTable = DnSsTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[1].RefTable = UsersTable
	EnvironmentEnvironmentToHostTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToHostTable.ForeignKeys[1].RefTable = HostsTable
	EnvironmentEnvironmentToCompetitionTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToCompetitionTable.ForeignKeys[1].RefTable = CompetitionsTable
	EnvironmentEnvironmentToIdentityTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToIdentityTable.ForeignKeys[1].RefTable = IdentitiesTable
	EnvironmentEnvironmentToCommandTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToCommandTable.ForeignKeys[1].RefTable = CommandsTable
	EnvironmentEnvironmentToScriptTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToScriptTable.ForeignKeys[1].RefTable = ScriptsTable
	EnvironmentEnvironmentToFileDownloadTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToFileDownloadTable.ForeignKeys[1].RefTable = FileDownloadsTable
	EnvironmentEnvironmentToFileDeleteTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToFileDeleteTable.ForeignKeys[1].RefTable = FileDeletesTable
	EnvironmentEnvironmentToFileExtractTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToFileExtractTable.ForeignKeys[1].RefTable = FileExtractsTable
	EnvironmentEnvironmentToIncludedNetworkTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToIncludedNetworkTable.ForeignKeys[1].RefTable = IncludedNetworksTable
	EnvironmentEnvironmentToFindingTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToFindingTable.ForeignKeys[1].RefTable = FindingsTable
	EnvironmentEnvironmentToDNSRecordTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToDNSRecordTable.ForeignKeys[1].RefTable = DNSRecordsTable
	EnvironmentEnvironmentToDNSTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToDNSTable.ForeignKeys[1].RefTable = DnSsTable
	EnvironmentEnvironmentToNetworkTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToNetworkTable.ForeignKeys[1].RefTable = NetworksTable
	HostHostToDiskTable.ForeignKeys[0].RefTable = HostsTable
	HostHostToDiskTable.ForeignKeys[1].RefTable = DisksTable
	IncludedNetworkIncludedNetworkToHostTable.ForeignKeys[0].RefTable = IncludedNetworksTable
	IncludedNetworkIncludedNetworkToHostTable.ForeignKeys[1].RefTable = HostsTable
	IncludedNetworkIncludedNetworkToNetworkTable.ForeignKeys[0].RefTable = IncludedNetworksTable
	IncludedNetworkIncludedNetworkToNetworkTable.ForeignKeys[1].RefTable = NetworksTable
	PlanNextPlanTable.ForeignKeys[0].RefTable = PlansTable
	PlanNextPlanTable.ForeignKeys[1].RefTable = PlansTable
	ScriptScriptToFindingTable.ForeignKeys[0].RefTable = ScriptsTable
	ScriptScriptToFindingTable.ForeignKeys[1].RefTable = FindingsTable
}
