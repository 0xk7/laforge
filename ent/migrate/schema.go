// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// AgentStatusColumns holds the columns for the "agent_status" table.
	AgentStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "up_time", Type: field.TypeInt64},
		{Name: "boot_time", Type: field.TypeInt64},
		{Name: "num_procs", Type: field.TypeInt64},
		{Name: "os", Type: field.TypeString},
		{Name: "host_id", Type: field.TypeString},
		{Name: "load1", Type: field.TypeFloat64},
		{Name: "load5", Type: field.TypeFloat64},
		{Name: "load15", Type: field.TypeFloat64},
		{Name: "total_mem", Type: field.TypeInt64},
		{Name: "free_mem", Type: field.TypeInt64},
		{Name: "used_mem", Type: field.TypeInt64},
		{Name: "timestamp", Type: field.TypeInt64},
	}
	// AgentStatusTable holds the schema information for the "agent_status" table.
	AgentStatusTable = &schema.Table{
		Name:        "agent_status",
		Columns:     AgentStatusColumns,
		PrimaryKey:  []*schema.Column{AgentStatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// BuildsColumns holds the columns for the "builds" table.
	BuildsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "revision", Type: field.TypeInt},
		{Name: "config", Type: field.TypeJSON},
	}
	// BuildsTable holds the schema information for the "builds" table.
	BuildsTable = &schema.Table{
		Name:        "builds",
		Columns:     BuildsColumns,
		PrimaryKey:  []*schema.Column{BuildsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CommandsColumns holds the columns for the "commands" table.
	CommandsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "program", Type: field.TypeString},
		{Name: "args", Type: field.TypeJSON},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "provisioning_step_provisioning_step_to_command", Type: field.TypeInt, Nullable: true},
	}
	// CommandsTable holds the schema information for the "commands" table.
	CommandsTable = &schema.Table{
		Name:       "commands",
		Columns:    CommandsColumns,
		PrimaryKey: []*schema.Column{CommandsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "commands_provisioning_steps_ProvisioningStepToCommand",
				Columns: []*schema.Column{CommandsColumns[11]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CompetitionsColumns holds the columns for the "competitions" table.
	CompetitionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "root_password", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON},
	}
	// CompetitionsTable holds the schema information for the "competitions" table.
	CompetitionsTable = &schema.Table{
		Name:        "competitions",
		Columns:     CompetitionsColumns,
		PrimaryKey:  []*schema.Column{CompetitionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DnSsColumns holds the columns for the "dn_ss" table.
	DnSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "root_domain", Type: field.TypeString},
		{Name: "dns_servers", Type: field.TypeJSON},
		{Name: "ntp_servers", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
		{Name: "competition_competition_to_dns", Type: field.TypeInt, Nullable: true},
	}
	// DnSsTable holds the schema information for the "dn_ss" table.
	DnSsTable = &schema.Table{
		Name:       "dn_ss",
		Columns:    DnSsColumns,
		PrimaryKey: []*schema.Column{DnSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "dn_ss_competitions_CompetitionToDNS",
				Columns: []*schema.Column{DnSsColumns[6]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DNSRecordsColumns holds the columns for the "dns_records" table.
	DNSRecordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "values", Type: field.TypeJSON},
		{Name: "type", Type: field.TypeString},
		{Name: "zone", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "provisioning_step_provisioning_step_to_dns_record", Type: field.TypeInt, Nullable: true},
	}
	// DNSRecordsTable holds the schema information for the "dns_records" table.
	DNSRecordsTable = &schema.Table{
		Name:       "dns_records",
		Columns:    DNSRecordsColumns,
		PrimaryKey: []*schema.Column{DNSRecordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "dns_records_provisioning_steps_ProvisioningStepToDNSRecord",
				Columns: []*schema.Column{DNSRecordsColumns[7]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DisksColumns holds the columns for the "disks" table.
	DisksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "size", Type: field.TypeInt},
		{Name: "host_host_to_disk", Type: field.TypeInt, Nullable: true},
	}
	// DisksTable holds the schema information for the "disks" table.
	DisksTable = &schema.Table{
		Name:       "disks",
		Columns:    DisksColumns,
		PrimaryKey: []*schema.Column{DisksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "disks_hosts_HostToDisk",
				Columns: []*schema.Column{DisksColumns[2]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// EnvironmentsColumns holds the columns for the "environments" table.
	EnvironmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "competition_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "builder", Type: field.TypeString},
		{Name: "team_count", Type: field.TypeInt},
		{Name: "revision", Type: field.TypeInt},
		{Name: "admin_cidrs", Type: field.TypeJSON},
		{Name: "exposed_vdi_ports", Type: field.TypeJSON},
		{Name: "config", Type: field.TypeJSON},
	}
	// EnvironmentsTable holds the schema information for the "environments" table.
	EnvironmentsTable = &schema.Table{
		Name:        "environments",
		Columns:     EnvironmentsColumns,
		PrimaryKey:  []*schema.Column{EnvironmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileDeletesColumns holds the columns for the "file_deletes" table.
	FileDeletesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
	}
	// FileDeletesTable holds the schema information for the "file_deletes" table.
	FileDeletesTable = &schema.Table{
		Name:        "file_deletes",
		Columns:     FileDeletesColumns,
		PrimaryKey:  []*schema.Column{FileDeletesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileDownloadsColumns holds the columns for the "file_downloads" table.
	FileDownloadsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "source_type", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "template", Type: field.TypeBool},
		{Name: "mode", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "md5", Type: field.TypeString},
		{Name: "abs_path", Type: field.TypeString},
	}
	// FileDownloadsTable holds the schema information for the "file_downloads" table.
	FileDownloadsTable = &schema.Table{
		Name:        "file_downloads",
		Columns:     FileDownloadsColumns,
		PrimaryKey:  []*schema.Column{FileDownloadsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FileExtractsColumns holds the columns for the "file_extracts" table.
	FileExtractsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "type", Type: field.TypeString},
	}
	// FileExtractsTable holds the schema information for the "file_extracts" table.
	FileExtractsTable = &schema.Table{
		Name:        "file_extracts",
		Columns:     FileExtractsColumns,
		PrimaryKey:  []*schema.Column{FileExtractsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FindingsColumns holds the columns for the "findings" table.
	FindingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "severity", Type: field.TypeEnum, Enums: []string{"ZeroSeverity", "LowSeverity", "MediumSeverity", "HighSeverity", "CriticalSeverity", "NullSeverity"}},
		{Name: "difficulty", Type: field.TypeEnum, Enums: []string{"ZeroDifficulty", "NoviceDifficulty", "AdvancedDifficulty", "ExpertDifficulty", "NullDifficulty"}},
	}
	// FindingsTable holds the schema information for the "findings" table.
	FindingsTable = &schema.Table{
		Name:        "findings",
		Columns:     FindingsColumns,
		PrimaryKey:  []*schema.Column{FindingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hostname", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "os", Type: field.TypeString},
		{Name: "last_octet", Type: field.TypeInt},
		{Name: "allow_mac_changes", Type: field.TypeBool},
		{Name: "exposed_tcp_ports", Type: field.TypeJSON},
		{Name: "exposed_udp_ports", Type: field.TypeJSON},
		{Name: "override_password", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "user_groups", Type: field.TypeJSON},
		{Name: "depends_on", Type: field.TypeJSON, Nullable: true},
		{Name: "scripts", Type: field.TypeJSON, Nullable: true},
		{Name: "commands", Type: field.TypeJSON, Nullable: true},
		{Name: "remote_files", Type: field.TypeJSON, Nullable: true},
		{Name: "dns_records", Type: field.TypeJSON, Nullable: true},
		{Name: "finding_finding_to_host", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_host", Type: field.TypeInt, Nullable: true},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "hosts_findings_FindingToHost",
				Columns: []*schema.Column{HostsColumns[16]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "hosts_provisioned_hosts_ProvisionedHostToHost",
				Columns: []*schema.Column{HostsColumns[17]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IncludedNetworksColumns holds the columns for the "included_networks" table.
	IncludedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "hosts", Type: field.TypeJSON},
	}
	// IncludedNetworksTable holds the schema information for the "included_networks" table.
	IncludedNetworksTable = &schema.Table{
		Name:        "included_networks",
		Columns:     IncludedNetworksColumns,
		PrimaryKey:  []*schema.Column{IncludedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// NetworksColumns holds the columns for the "networks" table.
	NetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
		{Name: "vdi_visible", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "provisioned_network_provisioned_network_to_network", Type: field.TypeInt, Nullable: true},
	}
	// NetworksTable holds the schema information for the "networks" table.
	NetworksTable = &schema.Table{
		Name:       "networks",
		Columns:    NetworksColumns,
		PrimaryKey: []*schema.Column{NetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "networks_provisioned_networks_ProvisionedNetworkToNetwork",
				Columns: []*schema.Column{NetworksColumns[5]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvisionedHostsColumns holds the columns for the "provisioned_hosts" table.
	ProvisionedHostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "subnet_ip", Type: field.TypeString},
	}
	// ProvisionedHostsTable holds the schema information for the "provisioned_hosts" table.
	ProvisionedHostsTable = &schema.Table{
		Name:        "provisioned_hosts",
		Columns:     ProvisionedHostsColumns,
		PrimaryKey:  []*schema.Column{ProvisionedHostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ProvisionedNetworksColumns holds the columns for the "provisioned_networks" table.
	ProvisionedNetworksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "cidr", Type: field.TypeString},
	}
	// ProvisionedNetworksTable holds the schema information for the "provisioned_networks" table.
	ProvisionedNetworksTable = &schema.Table{
		Name:        "provisioned_networks",
		Columns:     ProvisionedNetworksColumns,
		PrimaryKey:  []*schema.Column{ProvisionedNetworksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ProvisioningStepsColumns holds the columns for the "provisioning_steps" table.
	ProvisioningStepsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provisioner_type", Type: field.TypeString},
		{Name: "step_number", Type: field.TypeInt},
	}
	// ProvisioningStepsTable holds the schema information for the "provisioning_steps" table.
	ProvisioningStepsTable = &schema.Table{
		Name:        "provisioning_steps",
		Columns:     ProvisioningStepsColumns,
		PrimaryKey:  []*schema.Column{ProvisioningStepsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RemoteFilesColumns holds the columns for the "remote_files" table.
	RemoteFilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "source_type", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "destination", Type: field.TypeString},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "template", Type: field.TypeBool},
		{Name: "perms", Type: field.TypeString},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "md5", Type: field.TypeString},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "ext", Type: field.TypeString},
		{Name: "provisioning_step_provisioning_step_to_remote_file", Type: field.TypeInt, Nullable: true},
	}
	// RemoteFilesTable holds the schema information for the "remote_files" table.
	RemoteFilesTable = &schema.Table{
		Name:       "remote_files",
		Columns:    RemoteFilesColumns,
		PrimaryKey: []*schema.Column{RemoteFilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "remote_files_provisioning_steps_ProvisioningStepToRemoteFile",
				Columns: []*schema.Column{RemoteFilesColumns[11]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ScriptsColumns holds the columns for the "scripts" table.
	ScriptsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "language", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "source_type", Type: field.TypeString},
		{Name: "cooldown", Type: field.TypeInt},
		{Name: "timeout", Type: field.TypeInt},
		{Name: "ignore_errors", Type: field.TypeBool},
		{Name: "args", Type: field.TypeJSON},
		{Name: "disabled", Type: field.TypeBool},
		{Name: "vars", Type: field.TypeJSON},
		{Name: "abs_path", Type: field.TypeString},
		{Name: "provisioning_step_provisioning_step_to_script", Type: field.TypeInt, Nullable: true},
	}
	// ScriptsTable holds the schema information for the "scripts" table.
	ScriptsTable = &schema.Table{
		Name:       "scripts",
		Columns:    ScriptsColumns,
		PrimaryKey: []*schema.Column{ScriptsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "scripts_provisioning_steps_ProvisioningStepToScript",
				Columns: []*schema.Column{ScriptsColumns[13]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StatusColumns holds the columns for the "status" table.
	StatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"AWAITING", "INPROGRESS", "FAILED", "COMPLETE", "TAINTED"}},
		{Name: "started_at", Type: field.TypeTime},
		{Name: "ended_at", Type: field.TypeTime},
		{Name: "failed", Type: field.TypeBool},
		{Name: "completed", Type: field.TypeBool},
		{Name: "error", Type: field.TypeString},
		{Name: "provisioned_host_provisioned_host_to_status", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_status", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_status", Type: field.TypeInt, Nullable: true},
	}
	// StatusTable holds the schema information for the "status" table.
	StatusTable = &schema.Table{
		Name:       "status",
		Columns:    StatusColumns,
		PrimaryKey: []*schema.Column{StatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "status_provisioned_hosts_ProvisionedHostToStatus",
				Columns: []*schema.Column{StatusColumns[7]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_provisioned_networks_ProvisionedNetworkToStatus",
				Columns: []*schema.Column{StatusColumns[8]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "status_provisioning_steps_ProvisioningStepToStatus",
				Columns: []*schema.Column{StatusColumns[9]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeJSON},
		{Name: "agent_status_agent_status_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "build_build_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "command_command_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "competition_competition_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "dns_dns_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "dns_record_dns_record_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "disk_disk_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "environment_environment_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_delete_file_delete_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_download_file_download_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "file_extract_file_extract_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "finding_finding_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "host_host_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "included_network_included_network_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "network_network_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_host_provisioned_host_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "provisioned_network_provisioned_network_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "provisioning_step_provisioning_step_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "remote_file_remote_file_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "script_script_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "status_status_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "team_team_to_tag", Type: field.TypeInt, Nullable: true},
		{Name: "user_user_to_tag", Type: field.TypeInt, Nullable: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "tags_agent_status_AgentStatusToTag",
				Columns: []*schema.Column{TagsColumns[4]},

				RefColumns: []*schema.Column{AgentStatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_builds_BuildToTag",
				Columns: []*schema.Column{TagsColumns[5]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_commands_CommandToTag",
				Columns: []*schema.Column{TagsColumns[6]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_competitions_CompetitionToTag",
				Columns: []*schema.Column{TagsColumns[7]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_dn_ss_DNSToTag",
				Columns: []*schema.Column{TagsColumns[8]},

				RefColumns: []*schema.Column{DnSsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_dns_records_DNSRecordToTag",
				Columns: []*schema.Column{TagsColumns[9]},

				RefColumns: []*schema.Column{DNSRecordsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_disks_DiskToTag",
				Columns: []*schema.Column{TagsColumns[10]},

				RefColumns: []*schema.Column{DisksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_environments_EnvironmentToTag",
				Columns: []*schema.Column{TagsColumns[11]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_deletes_FileDeleteToTag",
				Columns: []*schema.Column{TagsColumns[12]},

				RefColumns: []*schema.Column{FileDeletesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_downloads_FileDownloadToTag",
				Columns: []*schema.Column{TagsColumns[13]},

				RefColumns: []*schema.Column{FileDownloadsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_file_extracts_FileExtractToTag",
				Columns: []*schema.Column{TagsColumns[14]},

				RefColumns: []*schema.Column{FileExtractsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_findings_FindingToTag",
				Columns: []*schema.Column{TagsColumns[15]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_hosts_HostToTag",
				Columns: []*schema.Column{TagsColumns[16]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_included_networks_IncludedNetworkToTag",
				Columns: []*schema.Column{TagsColumns[17]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_networks_NetworkToTag",
				Columns: []*schema.Column{TagsColumns[18]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_provisioned_hosts_ProvisionedHostToTag",
				Columns: []*schema.Column{TagsColumns[19]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_provisioned_networks_ProvisionedNetworkToTag",
				Columns: []*schema.Column{TagsColumns[20]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_provisioning_steps_ProvisioningStepToTag",
				Columns: []*schema.Column{TagsColumns[21]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_remote_files_RemoteFileToTag",
				Columns: []*schema.Column{TagsColumns[22]},

				RefColumns: []*schema.Column{RemoteFilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_scripts_ScriptToTag",
				Columns: []*schema.Column{TagsColumns[23]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_status_StatusToTag",
				Columns: []*schema.Column{TagsColumns[24]},

				RefColumns: []*schema.Column{StatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_teams_TeamToTag",
				Columns: []*schema.Column{TagsColumns[25]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "tags_users_UserToTag",
				Columns: []*schema.Column{TagsColumns[26]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TeamsColumns holds the columns for the "teams" table.
	TeamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "team_number", Type: field.TypeInt},
		{Name: "config", Type: field.TypeJSON},
		{Name: "revision", Type: field.TypeInt64},
	}
	// TeamsTable holds the schema information for the "teams" table.
	TeamsTable = &schema.Table{
		Name:        "teams",
		Columns:     TeamsColumns,
		PrimaryKey:  []*schema.Column{TeamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "uuid", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "build_build_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "command_command_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "finding_finding_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "host_host_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "script_script_to_user", Type: field.TypeInt, Nullable: true},
		{Name: "team_team_to_user", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "users_builds_BuildToUser",
				Columns: []*schema.Column{UsersColumns[4]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_commands_CommandToUser",
				Columns: []*schema.Column{UsersColumns[5]},

				RefColumns: []*schema.Column{CommandsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_findings_FindingToUser",
				Columns: []*schema.Column{UsersColumns[6]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_hosts_HostToUser",
				Columns: []*schema.Column{UsersColumns[7]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_scripts_ScriptToUser",
				Columns: []*schema.Column{UsersColumns[8]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "users_teams_TeamToUser",
				Columns: []*schema.Column{UsersColumns[9]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AgentStatusAgentStatusToProvisionedHostColumns holds the columns for the "agent_status_AgentStatusToProvisionedHost" table.
	AgentStatusAgentStatusToProvisionedHostColumns = []*schema.Column{
		{Name: "agent_status_id", Type: field.TypeInt},
		{Name: "provisioned_host_id", Type: field.TypeInt},
	}
	// AgentStatusAgentStatusToProvisionedHostTable holds the schema information for the "agent_status_AgentStatusToProvisionedHost" table.
	AgentStatusAgentStatusToProvisionedHostTable = &schema.Table{
		Name:       "agent_status_AgentStatusToProvisionedHost",
		Columns:    AgentStatusAgentStatusToProvisionedHostColumns,
		PrimaryKey: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[0], AgentStatusAgentStatusToProvisionedHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "agent_status_AgentStatusToProvisionedHost_agent_status_id",
				Columns: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[0]},

				RefColumns: []*schema.Column{AgentStatusColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "agent_status_AgentStatusToProvisionedHost_provisioned_host_id",
				Columns: []*schema.Column{AgentStatusAgentStatusToProvisionedHostColumns[1]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BuildBuildToProvisionedNetworkColumns holds the columns for the "build_BuildToProvisionedNetwork" table.
	BuildBuildToProvisionedNetworkColumns = []*schema.Column{
		{Name: "build_id", Type: field.TypeInt},
		{Name: "provisioned_network_id", Type: field.TypeInt},
	}
	// BuildBuildToProvisionedNetworkTable holds the schema information for the "build_BuildToProvisionedNetwork" table.
	BuildBuildToProvisionedNetworkTable = &schema.Table{
		Name:       "build_BuildToProvisionedNetwork",
		Columns:    BuildBuildToProvisionedNetworkColumns,
		PrimaryKey: []*schema.Column{BuildBuildToProvisionedNetworkColumns[0], BuildBuildToProvisionedNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "build_BuildToProvisionedNetwork_build_id",
				Columns: []*schema.Column{BuildBuildToProvisionedNetworkColumns[0]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "build_BuildToProvisionedNetwork_provisioned_network_id",
				Columns: []*schema.Column{BuildBuildToProvisionedNetworkColumns[1]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToUserColumns holds the columns for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToUserTable holds the schema information for the "environment_EnvironmentToUser" table.
	EnvironmentEnvironmentToUserTable = &schema.Table{
		Name:       "environment_EnvironmentToUser",
		Columns:    EnvironmentEnvironmentToUserColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToUserColumns[0], EnvironmentEnvironmentToUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToUser_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToUserColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToUser_user_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToUserColumns[1]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToHostColumns holds the columns for the "environment_EnvironmentToHost" table.
	EnvironmentEnvironmentToHostColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "host_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToHostTable holds the schema information for the "environment_EnvironmentToHost" table.
	EnvironmentEnvironmentToHostTable = &schema.Table{
		Name:       "environment_EnvironmentToHost",
		Columns:    EnvironmentEnvironmentToHostColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToHostColumns[0], EnvironmentEnvironmentToHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToHost_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToHostColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToHost_host_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToHostColumns[1]},

				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToCompetitionColumns holds the columns for the "environment_EnvironmentToCompetition" table.
	EnvironmentEnvironmentToCompetitionColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "competition_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToCompetitionTable holds the schema information for the "environment_EnvironmentToCompetition" table.
	EnvironmentEnvironmentToCompetitionTable = &schema.Table{
		Name:       "environment_EnvironmentToCompetition",
		Columns:    EnvironmentEnvironmentToCompetitionColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[0], EnvironmentEnvironmentToCompetitionColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToCompetition_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToCompetition_competition_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToCompetitionColumns[1]},

				RefColumns: []*schema.Column{CompetitionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// EnvironmentEnvironmentToBuildColumns holds the columns for the "environment_EnvironmentToBuild" table.
	EnvironmentEnvironmentToBuildColumns = []*schema.Column{
		{Name: "environment_id", Type: field.TypeInt},
		{Name: "build_id", Type: field.TypeInt},
	}
	// EnvironmentEnvironmentToBuildTable holds the schema information for the "environment_EnvironmentToBuild" table.
	EnvironmentEnvironmentToBuildTable = &schema.Table{
		Name:       "environment_EnvironmentToBuild",
		Columns:    EnvironmentEnvironmentToBuildColumns,
		PrimaryKey: []*schema.Column{EnvironmentEnvironmentToBuildColumns[0], EnvironmentEnvironmentToBuildColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "environment_EnvironmentToBuild_environment_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToBuildColumns[0]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "environment_EnvironmentToBuild_build_id",
				Columns: []*schema.Column{EnvironmentEnvironmentToBuildColumns[1]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// FindingFindingToScriptColumns holds the columns for the "finding_FindingToScript" table.
	FindingFindingToScriptColumns = []*schema.Column{
		{Name: "finding_id", Type: field.TypeInt},
		{Name: "script_id", Type: field.TypeInt},
	}
	// FindingFindingToScriptTable holds the schema information for the "finding_FindingToScript" table.
	FindingFindingToScriptTable = &schema.Table{
		Name:       "finding_FindingToScript",
		Columns:    FindingFindingToScriptColumns,
		PrimaryKey: []*schema.Column{FindingFindingToScriptColumns[0], FindingFindingToScriptColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "finding_FindingToScript_finding_id",
				Columns: []*schema.Column{FindingFindingToScriptColumns[0]},

				RefColumns: []*schema.Column{FindingsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "finding_FindingToScript_script_id",
				Columns: []*schema.Column{FindingFindingToScriptColumns[1]},

				RefColumns: []*schema.Column{ScriptsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// IncludedNetworkIncludedNetworkToEnvironmentColumns holds the columns for the "included_network_IncludedNetworkToEnvironment" table.
	IncludedNetworkIncludedNetworkToEnvironmentColumns = []*schema.Column{
		{Name: "included_network_id", Type: field.TypeInt},
		{Name: "environment_id", Type: field.TypeInt},
	}
	// IncludedNetworkIncludedNetworkToEnvironmentTable holds the schema information for the "included_network_IncludedNetworkToEnvironment" table.
	IncludedNetworkIncludedNetworkToEnvironmentTable = &schema.Table{
		Name:       "included_network_IncludedNetworkToEnvironment",
		Columns:    IncludedNetworkIncludedNetworkToEnvironmentColumns,
		PrimaryKey: []*schema.Column{IncludedNetworkIncludedNetworkToEnvironmentColumns[0], IncludedNetworkIncludedNetworkToEnvironmentColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "included_network_IncludedNetworkToEnvironment_included_network_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToEnvironmentColumns[0]},

				RefColumns: []*schema.Column{IncludedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "included_network_IncludedNetworkToEnvironment_environment_id",
				Columns: []*schema.Column{IncludedNetworkIncludedNetworkToEnvironmentColumns[1]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// NetworkNetworkToEnvironmentColumns holds the columns for the "network_NetworkToEnvironment" table.
	NetworkNetworkToEnvironmentColumns = []*schema.Column{
		{Name: "network_id", Type: field.TypeInt},
		{Name: "environment_id", Type: field.TypeInt},
	}
	// NetworkNetworkToEnvironmentTable holds the schema information for the "network_NetworkToEnvironment" table.
	NetworkNetworkToEnvironmentTable = &schema.Table{
		Name:       "network_NetworkToEnvironment",
		Columns:    NetworkNetworkToEnvironmentColumns,
		PrimaryKey: []*schema.Column{NetworkNetworkToEnvironmentColumns[0], NetworkNetworkToEnvironmentColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "network_NetworkToEnvironment_network_id",
				Columns: []*schema.Column{NetworkNetworkToEnvironmentColumns[0]},

				RefColumns: []*schema.Column{NetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "network_NetworkToEnvironment_environment_id",
				Columns: []*schema.Column{NetworkNetworkToEnvironmentColumns[1]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProvisionedHostProvisionedHostToProvisionedNetworkColumns holds the columns for the "provisioned_host_ProvisionedHostToProvisionedNetwork" table.
	ProvisionedHostProvisionedHostToProvisionedNetworkColumns = []*schema.Column{
		{Name: "provisioned_host_id", Type: field.TypeInt},
		{Name: "provisioned_network_id", Type: field.TypeInt},
	}
	// ProvisionedHostProvisionedHostToProvisionedNetworkTable holds the schema information for the "provisioned_host_ProvisionedHostToProvisionedNetwork" table.
	ProvisionedHostProvisionedHostToProvisionedNetworkTable = &schema.Table{
		Name:       "provisioned_host_ProvisionedHostToProvisionedNetwork",
		Columns:    ProvisionedHostProvisionedHostToProvisionedNetworkColumns,
		PrimaryKey: []*schema.Column{ProvisionedHostProvisionedHostToProvisionedNetworkColumns[0], ProvisionedHostProvisionedHostToProvisionedNetworkColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioned_host_ProvisionedHostToProvisionedNetwork_provisioned_host_id",
				Columns: []*schema.Column{ProvisionedHostProvisionedHostToProvisionedNetworkColumns[0]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "provisioned_host_ProvisionedHostToProvisionedNetwork_provisioned_network_id",
				Columns: []*schema.Column{ProvisionedHostProvisionedHostToProvisionedNetworkColumns[1]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProvisionedNetworkProvisionedNetworkToTeamColumns holds the columns for the "provisioned_network_ProvisionedNetworkToTeam" table.
	ProvisionedNetworkProvisionedNetworkToTeamColumns = []*schema.Column{
		{Name: "provisioned_network_id", Type: field.TypeInt},
		{Name: "team_id", Type: field.TypeInt},
	}
	// ProvisionedNetworkProvisionedNetworkToTeamTable holds the schema information for the "provisioned_network_ProvisionedNetworkToTeam" table.
	ProvisionedNetworkProvisionedNetworkToTeamTable = &schema.Table{
		Name:       "provisioned_network_ProvisionedNetworkToTeam",
		Columns:    ProvisionedNetworkProvisionedNetworkToTeamColumns,
		PrimaryKey: []*schema.Column{ProvisionedNetworkProvisionedNetworkToTeamColumns[0], ProvisionedNetworkProvisionedNetworkToTeamColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioned_network_ProvisionedNetworkToTeam_provisioned_network_id",
				Columns: []*schema.Column{ProvisionedNetworkProvisionedNetworkToTeamColumns[0]},

				RefColumns: []*schema.Column{ProvisionedNetworksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "provisioned_network_ProvisionedNetworkToTeam_team_id",
				Columns: []*schema.Column{ProvisionedNetworkProvisionedNetworkToTeamColumns[1]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProvisioningStepProvisioningStepToProvisionedHostColumns holds the columns for the "provisioning_step_ProvisioningStepToProvisionedHost" table.
	ProvisioningStepProvisioningStepToProvisionedHostColumns = []*schema.Column{
		{Name: "provisioning_step_id", Type: field.TypeInt},
		{Name: "provisioned_host_id", Type: field.TypeInt},
	}
	// ProvisioningStepProvisioningStepToProvisionedHostTable holds the schema information for the "provisioning_step_ProvisioningStepToProvisionedHost" table.
	ProvisioningStepProvisioningStepToProvisionedHostTable = &schema.Table{
		Name:       "provisioning_step_ProvisioningStepToProvisionedHost",
		Columns:    ProvisioningStepProvisioningStepToProvisionedHostColumns,
		PrimaryKey: []*schema.Column{ProvisioningStepProvisioningStepToProvisionedHostColumns[0], ProvisioningStepProvisioningStepToProvisionedHostColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "provisioning_step_ProvisioningStepToProvisionedHost_provisioning_step_id",
				Columns: []*schema.Column{ProvisioningStepProvisioningStepToProvisionedHostColumns[0]},

				RefColumns: []*schema.Column{ProvisioningStepsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "provisioning_step_ProvisioningStepToProvisionedHost_provisioned_host_id",
				Columns: []*schema.Column{ProvisioningStepProvisioningStepToProvisionedHostColumns[1]},

				RefColumns: []*schema.Column{ProvisionedHostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamTeamToBuildColumns holds the columns for the "team_TeamToBuild" table.
	TeamTeamToBuildColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "build_id", Type: field.TypeInt},
	}
	// TeamTeamToBuildTable holds the schema information for the "team_TeamToBuild" table.
	TeamTeamToBuildTable = &schema.Table{
		Name:       "team_TeamToBuild",
		Columns:    TeamTeamToBuildColumns,
		PrimaryKey: []*schema.Column{TeamTeamToBuildColumns[0], TeamTeamToBuildColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "team_TeamToBuild_team_id",
				Columns: []*schema.Column{TeamTeamToBuildColumns[0]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "team_TeamToBuild_build_id",
				Columns: []*schema.Column{TeamTeamToBuildColumns[1]},

				RefColumns: []*schema.Column{BuildsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TeamTeamToEnvironmentColumns holds the columns for the "team_TeamToEnvironment" table.
	TeamTeamToEnvironmentColumns = []*schema.Column{
		{Name: "team_id", Type: field.TypeInt},
		{Name: "environment_id", Type: field.TypeInt},
	}
	// TeamTeamToEnvironmentTable holds the schema information for the "team_TeamToEnvironment" table.
	TeamTeamToEnvironmentTable = &schema.Table{
		Name:       "team_TeamToEnvironment",
		Columns:    TeamTeamToEnvironmentColumns,
		PrimaryKey: []*schema.Column{TeamTeamToEnvironmentColumns[0], TeamTeamToEnvironmentColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "team_TeamToEnvironment_team_id",
				Columns: []*schema.Column{TeamTeamToEnvironmentColumns[0]},

				RefColumns: []*schema.Column{TeamsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "team_TeamToEnvironment_environment_id",
				Columns: []*schema.Column{TeamTeamToEnvironmentColumns[1]},

				RefColumns: []*schema.Column{EnvironmentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AgentStatusTable,
		BuildsTable,
		CommandsTable,
		CompetitionsTable,
		DnSsTable,
		DNSRecordsTable,
		DisksTable,
		EnvironmentsTable,
		FileDeletesTable,
		FileDownloadsTable,
		FileExtractsTable,
		FindingsTable,
		HostsTable,
		IncludedNetworksTable,
		NetworksTable,
		ProvisionedHostsTable,
		ProvisionedNetworksTable,
		ProvisioningStepsTable,
		RemoteFilesTable,
		ScriptsTable,
		StatusTable,
		TagsTable,
		TeamsTable,
		UsersTable,
		AgentStatusAgentStatusToProvisionedHostTable,
		BuildBuildToProvisionedNetworkTable,
		EnvironmentEnvironmentToUserTable,
		EnvironmentEnvironmentToHostTable,
		EnvironmentEnvironmentToCompetitionTable,
		EnvironmentEnvironmentToBuildTable,
		FindingFindingToScriptTable,
		IncludedNetworkIncludedNetworkToEnvironmentTable,
		NetworkNetworkToEnvironmentTable,
		ProvisionedHostProvisionedHostToProvisionedNetworkTable,
		ProvisionedNetworkProvisionedNetworkToTeamTable,
		ProvisioningStepProvisioningStepToProvisionedHostTable,
		TeamTeamToBuildTable,
		TeamTeamToEnvironmentTable,
	}
)

func init() {
	CommandsTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	DnSsTable.ForeignKeys[0].RefTable = CompetitionsTable
	DNSRecordsTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	DisksTable.ForeignKeys[0].RefTable = HostsTable
	HostsTable.ForeignKeys[0].RefTable = FindingsTable
	HostsTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	NetworksTable.ForeignKeys[0].RefTable = ProvisionedNetworksTable
	RemoteFilesTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	ScriptsTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	StatusTable.ForeignKeys[0].RefTable = ProvisionedHostsTable
	StatusTable.ForeignKeys[1].RefTable = ProvisionedNetworksTable
	StatusTable.ForeignKeys[2].RefTable = ProvisioningStepsTable
	TagsTable.ForeignKeys[0].RefTable = AgentStatusTable
	TagsTable.ForeignKeys[1].RefTable = BuildsTable
	TagsTable.ForeignKeys[2].RefTable = CommandsTable
	TagsTable.ForeignKeys[3].RefTable = CompetitionsTable
	TagsTable.ForeignKeys[4].RefTable = DnSsTable
	TagsTable.ForeignKeys[5].RefTable = DNSRecordsTable
	TagsTable.ForeignKeys[6].RefTable = DisksTable
	TagsTable.ForeignKeys[7].RefTable = EnvironmentsTable
	TagsTable.ForeignKeys[8].RefTable = FileDeletesTable
	TagsTable.ForeignKeys[9].RefTable = FileDownloadsTable
	TagsTable.ForeignKeys[10].RefTable = FileExtractsTable
	TagsTable.ForeignKeys[11].RefTable = FindingsTable
	TagsTable.ForeignKeys[12].RefTable = HostsTable
	TagsTable.ForeignKeys[13].RefTable = IncludedNetworksTable
	TagsTable.ForeignKeys[14].RefTable = NetworksTable
	TagsTable.ForeignKeys[15].RefTable = ProvisionedHostsTable
	TagsTable.ForeignKeys[16].RefTable = ProvisionedNetworksTable
	TagsTable.ForeignKeys[17].RefTable = ProvisioningStepsTable
	TagsTable.ForeignKeys[18].RefTable = RemoteFilesTable
	TagsTable.ForeignKeys[19].RefTable = ScriptsTable
	TagsTable.ForeignKeys[20].RefTable = StatusTable
	TagsTable.ForeignKeys[21].RefTable = TeamsTable
	TagsTable.ForeignKeys[22].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = BuildsTable
	UsersTable.ForeignKeys[1].RefTable = CommandsTable
	UsersTable.ForeignKeys[2].RefTable = FindingsTable
	UsersTable.ForeignKeys[3].RefTable = HostsTable
	UsersTable.ForeignKeys[4].RefTable = ScriptsTable
	UsersTable.ForeignKeys[5].RefTable = TeamsTable
	AgentStatusAgentStatusToProvisionedHostTable.ForeignKeys[0].RefTable = AgentStatusTable
	AgentStatusAgentStatusToProvisionedHostTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	BuildBuildToProvisionedNetworkTable.ForeignKeys[0].RefTable = BuildsTable
	BuildBuildToProvisionedNetworkTable.ForeignKeys[1].RefTable = ProvisionedNetworksTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToUserTable.ForeignKeys[1].RefTable = UsersTable
	EnvironmentEnvironmentToHostTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToHostTable.ForeignKeys[1].RefTable = HostsTable
	EnvironmentEnvironmentToCompetitionTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToCompetitionTable.ForeignKeys[1].RefTable = CompetitionsTable
	EnvironmentEnvironmentToBuildTable.ForeignKeys[0].RefTable = EnvironmentsTable
	EnvironmentEnvironmentToBuildTable.ForeignKeys[1].RefTable = BuildsTable
	FindingFindingToScriptTable.ForeignKeys[0].RefTable = FindingsTable
	FindingFindingToScriptTable.ForeignKeys[1].RefTable = ScriptsTable
	IncludedNetworkIncludedNetworkToEnvironmentTable.ForeignKeys[0].RefTable = IncludedNetworksTable
	IncludedNetworkIncludedNetworkToEnvironmentTable.ForeignKeys[1].RefTable = EnvironmentsTable
	NetworkNetworkToEnvironmentTable.ForeignKeys[0].RefTable = NetworksTable
	NetworkNetworkToEnvironmentTable.ForeignKeys[1].RefTable = EnvironmentsTable
	ProvisionedHostProvisionedHostToProvisionedNetworkTable.ForeignKeys[0].RefTable = ProvisionedHostsTable
	ProvisionedHostProvisionedHostToProvisionedNetworkTable.ForeignKeys[1].RefTable = ProvisionedNetworksTable
	ProvisionedNetworkProvisionedNetworkToTeamTable.ForeignKeys[0].RefTable = ProvisionedNetworksTable
	ProvisionedNetworkProvisionedNetworkToTeamTable.ForeignKeys[1].RefTable = TeamsTable
	ProvisioningStepProvisioningStepToProvisionedHostTable.ForeignKeys[0].RefTable = ProvisioningStepsTable
	ProvisioningStepProvisioningStepToProvisionedHostTable.ForeignKeys[1].RefTable = ProvisionedHostsTable
	TeamTeamToBuildTable.ForeignKeys[0].RefTable = TeamsTable
	TeamTeamToBuildTable.ForeignKeys[1].RefTable = BuildsTable
	TeamTeamToEnvironmentTable.ForeignKeys[0].RefTable = TeamsTable
	TeamTeamToEnvironmentTable.ForeignKeys[1].RefTable = EnvironmentsTable
}
