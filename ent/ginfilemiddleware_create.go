// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gen0cide/laforge/ent/ginfilemiddleware"
	"github.com/gen0cide/laforge/ent/provisionedhost"
	"github.com/gen0cide/laforge/ent/provisioningstep"
)

// GinFileMiddlewareCreate is the builder for creating a GinFileMiddleware entity.
type GinFileMiddlewareCreate struct {
	config
	mutation *GinFileMiddlewareMutation
	hooks    []Hook
}

// SetURLPath sets the "url_path" field.
func (gfmc *GinFileMiddlewareCreate) SetURLPath(s string) *GinFileMiddlewareCreate {
	gfmc.mutation.SetURLPath(s)
	return gfmc
}

// SetFilePath sets the "file_path" field.
func (gfmc *GinFileMiddlewareCreate) SetFilePath(s string) *GinFileMiddlewareCreate {
	gfmc.mutation.SetFilePath(s)
	return gfmc
}

// SetAccessed sets the "accessed" field.
func (gfmc *GinFileMiddlewareCreate) SetAccessed(b bool) *GinFileMiddlewareCreate {
	gfmc.mutation.SetAccessed(b)
	return gfmc
}

// SetNillableAccessed sets the "accessed" field if the given value is not nil.
func (gfmc *GinFileMiddlewareCreate) SetNillableAccessed(b *bool) *GinFileMiddlewareCreate {
	if b != nil {
		gfmc.SetAccessed(*b)
	}
	return gfmc
}

// SetGinFileMiddlewareToProvisionedHostID sets the "GinFileMiddlewareToProvisionedHost" edge to the ProvisionedHost entity by ID.
func (gfmc *GinFileMiddlewareCreate) SetGinFileMiddlewareToProvisionedHostID(id int) *GinFileMiddlewareCreate {
	gfmc.mutation.SetGinFileMiddlewareToProvisionedHostID(id)
	return gfmc
}

// SetNillableGinFileMiddlewareToProvisionedHostID sets the "GinFileMiddlewareToProvisionedHost" edge to the ProvisionedHost entity by ID if the given value is not nil.
func (gfmc *GinFileMiddlewareCreate) SetNillableGinFileMiddlewareToProvisionedHostID(id *int) *GinFileMiddlewareCreate {
	if id != nil {
		gfmc = gfmc.SetGinFileMiddlewareToProvisionedHostID(*id)
	}
	return gfmc
}

// SetGinFileMiddlewareToProvisionedHost sets the "GinFileMiddlewareToProvisionedHost" edge to the ProvisionedHost entity.
func (gfmc *GinFileMiddlewareCreate) SetGinFileMiddlewareToProvisionedHost(p *ProvisionedHost) *GinFileMiddlewareCreate {
	return gfmc.SetGinFileMiddlewareToProvisionedHostID(p.ID)
}

// SetGinFileMiddlewareToProvisioningStepID sets the "GinFileMiddlewareToProvisioningStep" edge to the ProvisioningStep entity by ID.
func (gfmc *GinFileMiddlewareCreate) SetGinFileMiddlewareToProvisioningStepID(id int) *GinFileMiddlewareCreate {
	gfmc.mutation.SetGinFileMiddlewareToProvisioningStepID(id)
	return gfmc
}

// SetNillableGinFileMiddlewareToProvisioningStepID sets the "GinFileMiddlewareToProvisioningStep" edge to the ProvisioningStep entity by ID if the given value is not nil.
func (gfmc *GinFileMiddlewareCreate) SetNillableGinFileMiddlewareToProvisioningStepID(id *int) *GinFileMiddlewareCreate {
	if id != nil {
		gfmc = gfmc.SetGinFileMiddlewareToProvisioningStepID(*id)
	}
	return gfmc
}

// SetGinFileMiddlewareToProvisioningStep sets the "GinFileMiddlewareToProvisioningStep" edge to the ProvisioningStep entity.
func (gfmc *GinFileMiddlewareCreate) SetGinFileMiddlewareToProvisioningStep(p *ProvisioningStep) *GinFileMiddlewareCreate {
	return gfmc.SetGinFileMiddlewareToProvisioningStepID(p.ID)
}

// Mutation returns the GinFileMiddlewareMutation object of the builder.
func (gfmc *GinFileMiddlewareCreate) Mutation() *GinFileMiddlewareMutation {
	return gfmc.mutation
}

// Save creates the GinFileMiddleware in the database.
func (gfmc *GinFileMiddlewareCreate) Save(ctx context.Context) (*GinFileMiddleware, error) {
	var (
		err  error
		node *GinFileMiddleware
	)
	gfmc.defaults()
	if len(gfmc.hooks) == 0 {
		if err = gfmc.check(); err != nil {
			return nil, err
		}
		node, err = gfmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GinFileMiddlewareMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gfmc.check(); err != nil {
				return nil, err
			}
			gfmc.mutation = mutation
			node, err = gfmc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gfmc.hooks) - 1; i >= 0; i-- {
			mut = gfmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gfmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gfmc *GinFileMiddlewareCreate) SaveX(ctx context.Context) *GinFileMiddleware {
	v, err := gfmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (gfmc *GinFileMiddlewareCreate) defaults() {
	if _, ok := gfmc.mutation.Accessed(); !ok {
		v := ginfilemiddleware.DefaultAccessed
		gfmc.mutation.SetAccessed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfmc *GinFileMiddlewareCreate) check() error {
	if _, ok := gfmc.mutation.URLPath(); !ok {
		return &ValidationError{Name: "url_path", err: errors.New("ent: missing required field \"url_path\"")}
	}
	if _, ok := gfmc.mutation.FilePath(); !ok {
		return &ValidationError{Name: "file_path", err: errors.New("ent: missing required field \"file_path\"")}
	}
	if _, ok := gfmc.mutation.Accessed(); !ok {
		return &ValidationError{Name: "accessed", err: errors.New("ent: missing required field \"accessed\"")}
	}
	return nil
}

func (gfmc *GinFileMiddlewareCreate) sqlSave(ctx context.Context) (*GinFileMiddleware, error) {
	_node, _spec := gfmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gfmc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gfmc *GinFileMiddlewareCreate) createSpec() (*GinFileMiddleware, *sqlgraph.CreateSpec) {
	var (
		_node = &GinFileMiddleware{config: gfmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ginfilemiddleware.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ginfilemiddleware.FieldID,
			},
		}
	)
	if value, ok := gfmc.mutation.URLPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ginfilemiddleware.FieldURLPath,
		})
		_node.URLPath = value
	}
	if value, ok := gfmc.mutation.FilePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ginfilemiddleware.FieldFilePath,
		})
		_node.FilePath = value
	}
	if value, ok := gfmc.mutation.Accessed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ginfilemiddleware.FieldAccessed,
		})
		_node.Accessed = value
	}
	if nodes := gfmc.mutation.GinFileMiddlewareToProvisionedHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ginfilemiddleware.GinFileMiddlewareToProvisionedHostTable,
			Columns: []string{ginfilemiddleware.GinFileMiddlewareToProvisionedHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisionedhost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gfmc.mutation.GinFileMiddlewareToProvisioningStepIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ginfilemiddleware.GinFileMiddlewareToProvisioningStepTable,
			Columns: []string{ginfilemiddleware.GinFileMiddlewareToProvisioningStepColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: provisioningstep.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GinFileMiddlewareCreateBulk is the builder for creating many GinFileMiddleware entities in bulk.
type GinFileMiddlewareCreateBulk struct {
	config
	builders []*GinFileMiddlewareCreate
}

// Save creates the GinFileMiddleware entities in the database.
func (gfmcb *GinFileMiddlewareCreateBulk) Save(ctx context.Context) ([]*GinFileMiddleware, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gfmcb.builders))
	nodes := make([]*GinFileMiddleware, len(gfmcb.builders))
	mutators := make([]Mutator, len(gfmcb.builders))
	for i := range gfmcb.builders {
		func(i int, root context.Context) {
			builder := gfmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GinFileMiddlewareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gfmcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gfmcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gfmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gfmcb *GinFileMiddlewareCreateBulk) SaveX(ctx context.Context) []*GinFileMiddleware {
	v, err := gfmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
